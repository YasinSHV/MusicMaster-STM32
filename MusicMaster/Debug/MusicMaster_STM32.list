
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000657c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001264  08006704  08006704  00016704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007968  08007968  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08007968  08007968  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007968  08007968  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800796c  0800796c  0001796c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08007970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          000005dc  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000678  20000678  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019351  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d63  00000000  00000000  0003941d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  0003c180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013c8  00000000  00000000  0003d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd0f  00000000  00000000  0003e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019566  00000000  00000000  0005c6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba620  00000000  00000000  00075c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130245  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057e0  00000000  00000000  00130298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080066ec 	.word	0x080066ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	080066ec 	.word	0x080066ec

080001c8 <extractNumber>:
////}
//PWM END

//UART BEGIN

void extractNumber(const uint8_t *data) {
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	isCorrect = -1;
 80001d0:	4b3d      	ldr	r3, [pc, #244]	; (80002c8 <extractNumber+0x100>)
 80001d2:	f04f 32ff 	mov.w	r2, #4294967295
 80001d6:	601a      	str	r2, [r3, #0]
	// Extract the first four characters and convert them to integers
	char pass[19] = "PASS_CHANGED(XXXX)\n";
 80001d8:	4b3c      	ldr	r3, [pc, #240]	; (80002cc <extractNumber+0x104>)
 80001da:	f107 0408 	add.w	r4, r7, #8
 80001de:	461d      	mov	r5, r3
 80001e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e4:	682b      	ldr	r3, [r5, #0]
 80001e6:	461a      	mov	r2, r3
 80001e8:	8022      	strh	r2, [r4, #0]
 80001ea:	3402      	adds	r4, #2
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	7023      	strb	r3, [r4, #0]
	pass[13] = data[9];
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3309      	adds	r3, #9
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	757b      	strb	r3, [r7, #21]
	pass[14] = data[10];
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	330a      	adds	r3, #10
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	75bb      	strb	r3, [r7, #22]
	pass[15] = data[11];
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	330b      	adds	r3, #11
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	75fb      	strb	r3, [r7, #23]
	pass[16] = data[12];
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	330c      	adds	r3, #12
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	763b      	strb	r3, [r7, #24]

	for (int i = 9; i < 13; i++) {
 8000210:	2309      	movs	r3, #9
 8000212:	61fb      	str	r3, [r7, #28]
 8000214:	e037      	b.n	8000286 <extractNumber+0xbe>
		if (data[i] <= '9' && data[i] >= '0') {
 8000216:	69fb      	ldr	r3, [r7, #28]
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	4413      	add	r3, r2
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	2b39      	cmp	r3, #57	; 0x39
 8000220:	d814      	bhi.n	800024c <extractNumber+0x84>
 8000222:	69fb      	ldr	r3, [r7, #28]
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	4413      	add	r3, r2
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b2f      	cmp	r3, #47	; 0x2f
 800022c:	d90e      	bls.n	800024c <extractNumber+0x84>
			password[i - 9] = data[i] - '0';
 800022e:	69fb      	ldr	r3, [r7, #28]
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	4413      	add	r3, r2
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	461a      	mov	r2, r3
 8000238:	69fb      	ldr	r3, [r7, #28]
 800023a:	3b09      	subs	r3, #9
 800023c:	3a30      	subs	r2, #48	; 0x30
 800023e:	4924      	ldr	r1, [pc, #144]	; (80002d0 <extractNumber+0x108>)
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 9; i < 13; i++) {
 8000244:	69fb      	ldr	r3, [r7, #28]
 8000246:	3301      	adds	r3, #1
 8000248:	61fb      	str	r3, [r7, #28]
 800024a:	e01c      	b.n	8000286 <extractNumber+0xbe>
		} else {
			if (logStatus) {
 800024c:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <extractNumber+0x10c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d004      	beq.n	800025e <extractNumber+0x96>
				HAL_UART_Transmit_IT(&huart1, "ERROR(INCORRECT FORMAT)\n", 24);
 8000254:	2218      	movs	r2, #24
 8000256:	4920      	ldr	r1, [pc, #128]	; (80002d8 <extractNumber+0x110>)
 8000258:	4820      	ldr	r0, [pc, #128]	; (80002dc <extractNumber+0x114>)
 800025a:	f004 feeb 	bl	8005034 <HAL_UART_Transmit_IT>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800025e:	2200      	movs	r2, #0
 8000260:	2101      	movs	r1, #1
 8000262:	481f      	ldr	r0, [pc, #124]	; (80002e0 <extractNumber+0x118>)
 8000264:	f001 fd7a 	bl	8001d5c <HAL_GPIO_WritePin>
			buzzer_flag = WrongInput;
 8000268:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <extractNumber+0x11c>)
 800026a:	2201      	movs	r2, #1
 800026c:	701a      	strb	r2, [r3, #0]
			buzzerEnterTime = HAL_GetTick();
 800026e:	f001 fa67 	bl	8001740 <HAL_GetTick>
 8000272:	4603      	mov	r3, r0
 8000274:	4a1c      	ldr	r2, [pc, #112]	; (80002e8 <extractNumber+0x120>)
 8000276:	6013      	str	r3, [r2, #0]
			if (alertStatus)
 8000278:	4b1c      	ldr	r3, [pc, #112]	; (80002ec <extractNumber+0x124>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d01f      	beq.n	80002c0 <extractNumber+0xf8>
				PWM_Start();
 8000280:	f001 f95e 	bl	8001540 <PWM_Start>
 8000284:	e01d      	b.n	80002c2 <extractNumber+0xfa>
	for (int i = 9; i < 13; i++) {
 8000286:	69fb      	ldr	r3, [r7, #28]
 8000288:	2b0c      	cmp	r3, #12
 800028a:	ddc4      	ble.n	8000216 <extractNumber+0x4e>
			return;
		}
	}
	if (logStatus) {
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <extractNumber+0x10c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d016      	beq.n	80002c2 <extractNumber+0xfa>
		HAL_UART_Transmit_IT(&huart1, pass, 19);
 8000294:	f107 0308 	add.w	r3, r7, #8
 8000298:	2213      	movs	r2, #19
 800029a:	4619      	mov	r1, r3
 800029c:	480f      	ldr	r0, [pc, #60]	; (80002dc <extractNumber+0x114>)
 800029e:	f004 fec9 	bl	8005034 <HAL_UART_Transmit_IT>
		buzzer_flag = CorrectInput;
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <extractNumber+0x11c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
		buzzerEnterTime = HAL_GetTick();
 80002a8:	f001 fa4a 	bl	8001740 <HAL_GetTick>
 80002ac:	4603      	mov	r3, r0
 80002ae:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <extractNumber+0x120>)
 80002b0:	6013      	str	r3, [r2, #0]
		if (alertStatus)
 80002b2:	4b0e      	ldr	r3, [pc, #56]	; (80002ec <extractNumber+0x124>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d003      	beq.n	80002c2 <extractNumber+0xfa>
			PWM_Start();
 80002ba:	f001 f941 	bl	8001540 <PWM_Start>
 80002be:	e000      	b.n	80002c2 <extractNumber+0xfa>
			return;
 80002c0:	bf00      	nop
	}
}
 80002c2:	3720      	adds	r7, #32
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bdb0      	pop	{r4, r5, r7, pc}
 80002c8:	20000040 	.word	0x20000040
 80002cc:	08006720 	.word	0x08006720
 80002d0:	20000000 	.word	0x20000000
 80002d4:	20000038 	.word	0x20000038
 80002d8:	08006704 	.word	0x08006704
 80002dc:	20000208 	.word	0x20000208
 80002e0:	48000800 	.word	0x48000800
 80002e4:	20000048 	.word	0x20000048
 80002e8:	200005b4 	.word	0x200005b4
 80002ec:	2000003c 	.word	0x2000003c

080002f0 <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 80002f0:	b480      	push	{r7}
 80002f2:	b087      	sub	sp, #28
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
 8000300:	e00e      	b.n	8000320 <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	68fa      	ldr	r2, [r7, #12]
 8000306:	4413      	add	r3, r2
 8000308:	781a      	ldrb	r2, [r3, #0]
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	68b9      	ldr	r1, [r7, #8]
 800030e:	440b      	add	r3, r1
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	429a      	cmp	r2, r3
 8000314:	d001      	beq.n	800031a <compareStrings+0x2a>
			return 0;
 8000316:	2300      	movs	r3, #0
 8000318:	e007      	b.n	800032a <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	3301      	adds	r3, #1
 800031e:	617b      	str	r3, [r7, #20]
 8000320:	697a      	ldr	r2, [r7, #20]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	429a      	cmp	r2, r3
 8000326:	dbec      	blt.n	8000302 <compareStrings+0x12>
		}
	}
	return 1;
 8000328:	2301      	movs	r3, #1
}
 800032a:	4618      	mov	r0, r3
 800032c:	371c      	adds	r7, #28
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
	...

08000338 <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000338:	b5b0      	push	{r4, r5, r7, lr}
 800033a:	b08a      	sub	sp, #40	; 0x28
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a72      	ldr	r2, [pc, #456]	; (8000510 <HAL_UART_RxCpltCallback+0x1d8>)
 8000346:	4293      	cmp	r3, r2
 8000348:	f040 80de 	bne.w	8000508 <HAL_UART_RxCpltCallback+0x1d0>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 800034c:	2201      	movs	r2, #1
 800034e:	4971      	ldr	r1, [pc, #452]	; (8000514 <HAL_UART_RxCpltCallback+0x1dc>)
 8000350:	4871      	ldr	r0, [pc, #452]	; (8000518 <HAL_UART_RxCpltCallback+0x1e0>)
 8000352:	f004 fecd 	bl	80050f0 <HAL_UART_Receive_IT>
		data[i++] = d;
 8000356:	4b71      	ldr	r3, [pc, #452]	; (800051c <HAL_UART_RxCpltCallback+0x1e4>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	1c5a      	adds	r2, r3, #1
 800035c:	b2d1      	uxtb	r1, r2
 800035e:	4a6f      	ldr	r2, [pc, #444]	; (800051c <HAL_UART_RxCpltCallback+0x1e4>)
 8000360:	7011      	strb	r1, [r2, #0]
 8000362:	461a      	mov	r2, r3
 8000364:	4b6b      	ldr	r3, [pc, #428]	; (8000514 <HAL_UART_RxCpltCallback+0x1dc>)
 8000366:	7819      	ldrb	r1, [r3, #0]
 8000368:	4b6d      	ldr	r3, [pc, #436]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 800036a:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 800036c:	4b69      	ldr	r3, [pc, #420]	; (8000514 <HAL_UART_RxCpltCallback+0x1dc>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	2b0a      	cmp	r3, #10
 8000372:	f040 80c9 	bne.w	8000508 <HAL_UART_RxCpltCallback+0x1d0>
			if ((i == 15 && compareStrings(setPass, data, 9) == 1)
 8000376:	4b69      	ldr	r3, [pc, #420]	; (800051c <HAL_UART_RxCpltCallback+0x1e4>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b0f      	cmp	r3, #15
 800037c:	d11a      	bne.n	80003b4 <HAL_UART_RxCpltCallback+0x7c>
 800037e:	2209      	movs	r2, #9
 8000380:	4967      	ldr	r1, [pc, #412]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 8000382:	4868      	ldr	r0, [pc, #416]	; (8000524 <HAL_UART_RxCpltCallback+0x1ec>)
 8000384:	f7ff ffb4 	bl	80002f0 <compareStrings>
 8000388:	4603      	mov	r3, r0
 800038a:	2b01      	cmp	r3, #1
 800038c:	d112      	bne.n	80003b4 <HAL_UART_RxCpltCallback+0x7c>
					&& isCorrect == -1) {
 800038e:	4b66      	ldr	r3, [pc, #408]	; (8000528 <HAL_UART_RxCpltCallback+0x1f0>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000396:	d10d      	bne.n	80003b4 <HAL_UART_RxCpltCallback+0x7c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000398:	2201      	movs	r2, #1
 800039a:	2101      	movs	r1, #1
 800039c:	4863      	ldr	r0, [pc, #396]	; (800052c <HAL_UART_RxCpltCallback+0x1f4>)
 800039e:	f001 fcdd 	bl	8001d5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2104      	movs	r1, #4
 80003a6:	4861      	ldr	r0, [pc, #388]	; (800052c <HAL_UART_RxCpltCallback+0x1f4>)
 80003a8:	f001 fcd8 	bl	8001d5c <HAL_GPIO_WritePin>
				extractNumber(data);
 80003ac:	485c      	ldr	r0, [pc, #368]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 80003ae:	f7ff ff0b 	bl	80001c8 <extractNumber>
 80003b2:	e0a6      	b.n	8000502 <HAL_UART_RxCpltCallback+0x1ca>
			} else if (i == 7) {
 80003b4:	4b59      	ldr	r3, [pc, #356]	; (800051c <HAL_UART_RxCpltCallback+0x1e4>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b07      	cmp	r3, #7
 80003ba:	d111      	bne.n	80003e0 <HAL_UART_RxCpltCallback+0xa8>
				if (compareStrings(logON, data, 6) == 1) {
 80003bc:	2206      	movs	r2, #6
 80003be:	4958      	ldr	r1, [pc, #352]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 80003c0:	485b      	ldr	r0, [pc, #364]	; (8000530 <HAL_UART_RxCpltCallback+0x1f8>)
 80003c2:	f7ff ff95 	bl	80002f0 <compareStrings>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	f040 809a 	bne.w	8000502 <HAL_UART_RxCpltCallback+0x1ca>
					logStatus = 1;
 80003ce:	4b59      	ldr	r3, [pc, #356]	; (8000534 <HAL_UART_RxCpltCallback+0x1fc>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned ON\n",
 80003d4:	2216      	movs	r2, #22
 80003d6:	4958      	ldr	r1, [pc, #352]	; (8000538 <HAL_UART_RxCpltCallback+0x200>)
 80003d8:	484f      	ldr	r0, [pc, #316]	; (8000518 <HAL_UART_RxCpltCallback+0x1e0>)
 80003da:	f004 fe2b 	bl	8005034 <HAL_UART_Transmit_IT>
 80003de:	e090      	b.n	8000502 <HAL_UART_RxCpltCallback+0x1ca>
							22);
				}
			} else if (i == 8) {
 80003e0:	4b4e      	ldr	r3, [pc, #312]	; (800051c <HAL_UART_RxCpltCallback+0x1e4>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b08      	cmp	r3, #8
 80003e6:	d111      	bne.n	800040c <HAL_UART_RxCpltCallback+0xd4>
				if (compareStrings(logOFF, data, 7) == 1) {
 80003e8:	2207      	movs	r2, #7
 80003ea:	494d      	ldr	r1, [pc, #308]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 80003ec:	4853      	ldr	r0, [pc, #332]	; (800053c <HAL_UART_RxCpltCallback+0x204>)
 80003ee:	f7ff ff7f 	bl	80002f0 <compareStrings>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b01      	cmp	r3, #1
 80003f6:	f040 8084 	bne.w	8000502 <HAL_UART_RxCpltCallback+0x1ca>
					logStatus = 0;
 80003fa:	4b4e      	ldr	r3, [pc, #312]	; (8000534 <HAL_UART_RxCpltCallback+0x1fc>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned OFF\n",
 8000400:	2217      	movs	r2, #23
 8000402:	494f      	ldr	r1, [pc, #316]	; (8000540 <HAL_UART_RxCpltCallback+0x208>)
 8000404:	4844      	ldr	r0, [pc, #272]	; (8000518 <HAL_UART_RxCpltCallback+0x1e0>)
 8000406:	f004 fe15 	bl	8005034 <HAL_UART_Transmit_IT>
 800040a:	e07a      	b.n	8000502 <HAL_UART_RxCpltCallback+0x1ca>
							23);
				}
			} else if (i == 9) {
 800040c:	4b43      	ldr	r3, [pc, #268]	; (800051c <HAL_UART_RxCpltCallback+0x1e4>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d11a      	bne.n	800044a <HAL_UART_RxCpltCallback+0x112>
				if (compareStrings(alertON, data, 8) == 1) {
 8000414:	2208      	movs	r2, #8
 8000416:	4942      	ldr	r1, [pc, #264]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 8000418:	484a      	ldr	r0, [pc, #296]	; (8000544 <HAL_UART_RxCpltCallback+0x20c>)
 800041a:	f7ff ff69 	bl	80002f0 <compareStrings>
 800041e:	4603      	mov	r3, r0
 8000420:	2b01      	cmp	r3, #1
 8000422:	d16e      	bne.n	8000502 <HAL_UART_RxCpltCallback+0x1ca>
					alertStatus = 1;
 8000424:	4b48      	ldr	r3, [pc, #288]	; (8000548 <HAL_UART_RxCpltCallback+0x210>)
 8000426:	2201      	movs	r2, #1
 8000428:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned ON\n",
 800042a:	2219      	movs	r2, #25
 800042c:	4947      	ldr	r1, [pc, #284]	; (800054c <HAL_UART_RxCpltCallback+0x214>)
 800042e:	483a      	ldr	r0, [pc, #232]	; (8000518 <HAL_UART_RxCpltCallback+0x1e0>)
 8000430:	f004 fe00 	bl	8005034 <HAL_UART_Transmit_IT>
							25);
					buzzer_flag = CorrectInput;
 8000434:	4b46      	ldr	r3, [pc, #280]	; (8000550 <HAL_UART_RxCpltCallback+0x218>)
 8000436:	2200      	movs	r2, #0
 8000438:	701a      	strb	r2, [r3, #0]
					buzzerEnterTime = HAL_GetTick();
 800043a:	f001 f981 	bl	8001740 <HAL_GetTick>
 800043e:	4603      	mov	r3, r0
 8000440:	4a44      	ldr	r2, [pc, #272]	; (8000554 <HAL_UART_RxCpltCallback+0x21c>)
 8000442:	6013      	str	r3, [r2, #0]
					PWM_Start();
 8000444:	f001 f87c 	bl	8001540 <PWM_Start>
 8000448:	e05b      	b.n	8000502 <HAL_UART_RxCpltCallback+0x1ca>
				}
			} else if (i == 10) {
 800044a:	4b34      	ldr	r3, [pc, #208]	; (800051c <HAL_UART_RxCpltCallback+0x1e4>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b0a      	cmp	r3, #10
 8000450:	d110      	bne.n	8000474 <HAL_UART_RxCpltCallback+0x13c>
				if (compareStrings(alertOFF, data, 9) == 1) {
 8000452:	2209      	movs	r2, #9
 8000454:	4932      	ldr	r1, [pc, #200]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 8000456:	4840      	ldr	r0, [pc, #256]	; (8000558 <HAL_UART_RxCpltCallback+0x220>)
 8000458:	f7ff ff4a 	bl	80002f0 <compareStrings>
 800045c:	4603      	mov	r3, r0
 800045e:	2b01      	cmp	r3, #1
 8000460:	d14f      	bne.n	8000502 <HAL_UART_RxCpltCallback+0x1ca>
					alertStatus = 0;
 8000462:	4b39      	ldr	r3, [pc, #228]	; (8000548 <HAL_UART_RxCpltCallback+0x210>)
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned OFF\n",
 8000468:	221a      	movs	r2, #26
 800046a:	493c      	ldr	r1, [pc, #240]	; (800055c <HAL_UART_RxCpltCallback+0x224>)
 800046c:	482a      	ldr	r0, [pc, #168]	; (8000518 <HAL_UART_RxCpltCallback+0x1e0>)
 800046e:	f004 fde1 	bl	8005034 <HAL_UART_Transmit_IT>
 8000472:	e046      	b.n	8000502 <HAL_UART_RxCpltCallback+0x1ca>
							26);
				}
			} else if (i == 14 && (data[11] - '0') < 6
 8000474:	4b29      	ldr	r3, [pc, #164]	; (800051c <HAL_UART_RxCpltCallback+0x1e4>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b0e      	cmp	r3, #14
 800047a:	d12d      	bne.n	80004d8 <HAL_UART_RxCpltCallback+0x1a0>
 800047c:	4b28      	ldr	r3, [pc, #160]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 800047e:	7adb      	ldrb	r3, [r3, #11]
 8000480:	2b35      	cmp	r3, #53	; 0x35
 8000482:	d829      	bhi.n	80004d8 <HAL_UART_RxCpltCallback+0x1a0>
					&& (data[11] - '0') > -1) {
 8000484:	4b26      	ldr	r3, [pc, #152]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 8000486:	7adb      	ldrb	r3, [r3, #11]
 8000488:	2b2f      	cmp	r3, #47	; 0x2f
 800048a:	d925      	bls.n	80004d8 <HAL_UART_RxCpltCallback+0x1a0>
				if (compareStrings(setVolume, data, 11) == 1
 800048c:	220b      	movs	r2, #11
 800048e:	4924      	ldr	r1, [pc, #144]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 8000490:	4833      	ldr	r0, [pc, #204]	; (8000560 <HAL_UART_RxCpltCallback+0x228>)
 8000492:	f7ff ff2d 	bl	80002f0 <compareStrings>
 8000496:	4603      	mov	r3, r0
 8000498:	2b01      	cmp	r3, #1
 800049a:	d131      	bne.n	8000500 <HAL_UART_RxCpltCallback+0x1c8>
						&& data[12] == ')') {
 800049c:	4b20      	ldr	r3, [pc, #128]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 800049e:	7b1b      	ldrb	r3, [r3, #12]
 80004a0:	2b29      	cmp	r3, #41	; 0x29
 80004a2:	d12d      	bne.n	8000500 <HAL_UART_RxCpltCallback+0x1c8>
					int v = data[11] - '0';
 80004a4:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 80004a6:	7adb      	ldrb	r3, [r3, #11]
 80004a8:	3b30      	subs	r3, #48	; 0x30
 80004aa:	627b      	str	r3, [r7, #36]	; 0x24
//					_volume = v * 10;
					char massage[24] = "Program Volume Set To  \n";
 80004ac:	4b2d      	ldr	r3, [pc, #180]	; (8000564 <HAL_UART_RxCpltCallback+0x22c>)
 80004ae:	f107 040c 	add.w	r4, r7, #12
 80004b2:	461d      	mov	r5, r3
 80004b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004bc:	e884 0003 	stmia.w	r4, {r0, r1}
					massage[22] = data[11];
 80004c0:	4b17      	ldr	r3, [pc, #92]	; (8000520 <HAL_UART_RxCpltCallback+0x1e8>)
 80004c2:	7adb      	ldrb	r3, [r3, #11]
 80004c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					HAL_UART_Transmit_IT(&huart1, massage, 24);
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	2218      	movs	r2, #24
 80004ce:	4619      	mov	r1, r3
 80004d0:	4811      	ldr	r0, [pc, #68]	; (8000518 <HAL_UART_RxCpltCallback+0x1e0>)
 80004d2:	f004 fdaf 	bl	8005034 <HAL_UART_Transmit_IT>
				if (compareStrings(setVolume, data, 11) == 1
 80004d6:	e013      	b.n	8000500 <HAL_UART_RxCpltCallback+0x1c8>
				}
			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 80004d8:	220e      	movs	r2, #14
 80004da:	4923      	ldr	r1, [pc, #140]	; (8000568 <HAL_UART_RxCpltCallback+0x230>)
 80004dc:	480e      	ldr	r0, [pc, #56]	; (8000518 <HAL_UART_RxCpltCallback+0x1e0>)
 80004de:	f004 fda9 	bl	8005034 <HAL_UART_Transmit_IT>
				buzzer_flag = WrongInput;
 80004e2:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <HAL_UART_RxCpltCallback+0x218>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	701a      	strb	r2, [r3, #0]
				buzzerEnterTime = HAL_GetTick();
 80004e8:	f001 f92a 	bl	8001740 <HAL_GetTick>
 80004ec:	4603      	mov	r3, r0
 80004ee:	4a19      	ldr	r2, [pc, #100]	; (8000554 <HAL_UART_RxCpltCallback+0x21c>)
 80004f0:	6013      	str	r3, [r2, #0]
				if (alertStatus)
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_UART_RxCpltCallback+0x210>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d003      	beq.n	8000502 <HAL_UART_RxCpltCallback+0x1ca>
					PWM_Start();
 80004fa:	f001 f821 	bl	8001540 <PWM_Start>
 80004fe:	e000      	b.n	8000502 <HAL_UART_RxCpltCallback+0x1ca>
				if (compareStrings(setVolume, data, 11) == 1
 8000500:	bf00      	nop
			}

			i = 0;
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <HAL_UART_RxCpltCallback+0x1e4>)
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000508:	bf00      	nop
 800050a:	3728      	adds	r7, #40	; 0x28
 800050c:	46bd      	mov	sp, r7
 800050e:	bdb0      	pop	{r4, r5, r7, pc}
 8000510:	40013800 	.word	0x40013800
 8000514:	20000670 	.word	0x20000670
 8000518:	20000208 	.word	0x20000208
 800051c:	20000671 	.word	0x20000671
 8000520:	2000060c 	.word	0x2000060c
 8000524:	2000004c 	.word	0x2000004c
 8000528:	20000040 	.word	0x20000040
 800052c:	48000800 	.word	0x48000800
 8000530:	20000058 	.word	0x20000058
 8000534:	20000038 	.word	0x20000038
 8000538:	08006734 	.word	0x08006734
 800053c:	20000060 	.word	0x20000060
 8000540:	0800674c 	.word	0x0800674c
 8000544:	20000068 	.word	0x20000068
 8000548:	2000003c 	.word	0x2000003c
 800054c:	08006764 	.word	0x08006764
 8000550:	20000048 	.word	0x20000048
 8000554:	200005b4 	.word	0x200005b4
 8000558:	20000070 	.word	0x20000070
 800055c:	08006780 	.word	0x08006780
 8000560:	2000007c 	.word	0x2000007c
 8000564:	080067ac 	.word	0x080067ac
 8000568:	0800679c 	.word	0x0800679c

0800056c <display_number>:

//UART END

void display_number(int led_flag, int _number) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 8000576:	2201      	movs	r2, #1
 8000578:	211e      	movs	r1, #30
 800057a:	4813      	ldr	r0, [pc, #76]	; (80005c8 <display_number+0x5c>)
 800057c:	f001 fbee 	bl	8001d5c <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], DISPLAY_ON);
 8000580:	4a12      	ldr	r2, [pc, #72]	; (80005cc <display_number+0x60>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000588:	2200      	movs	r2, #0
 800058a:	4619      	mov	r1, r3
 800058c:	480e      	ldr	r0, [pc, #56]	; (80005c8 <display_number+0x5c>)
 800058e:	f001 fbe5 	bl	8001d5c <HAL_GPIO_WritePin>
	if (_number != 0) {
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d009      	beq.n	80005ac <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <display_number+0x64>)
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	00db      	lsls	r3, r3, #3
 800059e:	4413      	add	r3, r2
 80005a0:	889b      	ldrh	r3, [r3, #4]
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <display_number+0x5c>)
 80005a8:	f001 fbd8 	bl	8001d5c <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 80005ac:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <display_number+0x64>)
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	00db      	lsls	r3, r3, #3
 80005b2:	4413      	add	r3, r2
 80005b4:	88db      	ldrh	r3, [r3, #6]
 80005b6:	2200      	movs	r2, #0
 80005b8:	4619      	mov	r1, r3
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <display_number+0x5c>)
 80005bc:	f001 fbce 	bl	8001d5c <HAL_GPIO_WritePin>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	48000c00 	.word	0x48000c00
 80005cc:	2000057c 	.word	0x2000057c
 80005d0:	200005bc 	.word	0x200005bc

080005d4 <increase>:

void increase() {
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
    carrier[3]++; // Increase the 1s place
 80005d8:	4b16      	ldr	r3, [pc, #88]	; (8000634 <increase+0x60>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	3301      	adds	r3, #1
 80005de:	4a15      	ldr	r2, [pc, #84]	; (8000634 <increase+0x60>)
 80005e0:	60d3      	str	r3, [r2, #12]

    if (carrier[3] == 10) {
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <increase+0x60>)
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	2b0a      	cmp	r3, #10
 80005e8:	d107      	bne.n	80005fa <increase+0x26>
        carrier[3] = 0; // Reset the 1s place
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <increase+0x60>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
        carrier[2]++; // Increase the 10s place
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <increase+0x60>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	3301      	adds	r3, #1
 80005f6:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <increase+0x60>)
 80005f8:	6093      	str	r3, [r2, #8]
    }
    if (carrier[2] == 10) {
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <increase+0x60>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	2b0a      	cmp	r3, #10
 8000600:	d107      	bne.n	8000612 <increase+0x3e>
        carrier[2] = 0; // Reset the 10s place
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <increase+0x60>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
        carrier[1]++; // Increase the 100s place
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <increase+0x60>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	3301      	adds	r3, #1
 800060e:	4a09      	ldr	r2, [pc, #36]	; (8000634 <increase+0x60>)
 8000610:	6053      	str	r3, [r2, #4]
    }
    if (carrier[1] == 10) {
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <increase+0x60>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	2b0a      	cmp	r3, #10
 8000618:	d107      	bne.n	800062a <increase+0x56>
        carrier[1] = 0; // Reset the 100s place
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <increase+0x60>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
        carrier[0]++; // Increase the 1000s place
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <increase+0x60>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	4a03      	ldr	r2, [pc, #12]	; (8000634 <increase+0x60>)
 8000628:	6013      	str	r3, [r2, #0]
    }
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	20000584 	.word	0x20000584

08000638 <init_display>:

void init_display() {
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,
 800063c:	2201      	movs	r2, #1
 800063e:	211e      	movs	r1, #30
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <init_display+0x14>)
 8000642:	f001 fb8b 	bl	8001d5c <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	48000c00 	.word	0x48000c00

08000650 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	; 0x58
 8000654:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	struct digit _digits[10];
	_digits[0].number = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 800065a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800065e:	817b      	strh	r3, [r7, #10]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
	_digits[1].pattern = GPIO_PIN_12;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	823b      	strh	r3, [r7, #16]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800066a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800066e:	827b      	strh	r3, [r7, #18]

	_digits[2].number = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	617b      	str	r3, [r7, #20]
	_digits[2].pattern = GPIO_PIN_13;
 8000674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000678:	833b      	strh	r3, [r7, #24]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 800067a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800067e:	837b      	strh	r3, [r7, #26]

	_digits[3].number = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	61fb      	str	r3, [r7, #28]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 8000684:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000688:	843b      	strh	r3, [r7, #32]
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 800068a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800068e:	847b      	strh	r3, [r7, #34]	; 0x22

	_digits[4].number = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
	_digits[4].pattern = GPIO_PIN_14;
 8000694:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000698:	853b      	strh	r3, [r7, #40]	; 0x28
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 800069a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800069e:	857b      	strh	r3, [r7, #42]	; 0x2a

	_digits[5].number = 5;
 80006a0:	2305      	movs	r3, #5
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 80006a4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80006a8:	863b      	strh	r3, [r7, #48]	; 0x30
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 80006aa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80006ae:	867b      	strh	r3, [r7, #50]	; 0x32

	_digits[6].number = 6;
 80006b0:	2306      	movs	r3, #6
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 80006b4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80006b8:	873b      	strh	r3, [r7, #56]	; 0x38
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 80006ba:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80006be:	877b      	strh	r3, [r7, #58]	; 0x3a

	_digits[7].number = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 80006c4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80006c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	_digits[7].anti_pattern = GPIO_PIN_15;
 80006cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	_digits[8].number = 8;
 80006d4:	2308      	movs	r3, #8
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
	_digits[8].pattern = GPIO_PIN_15;
 80006d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006dc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 80006e0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80006e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	_digits[9].number = 9;
 80006e8:	2309      	movs	r3, #9
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 80006ec:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80006f0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 80006f4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80006f8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	//initialize Global digits structure
	for (int i = 0; i < 10; i++) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	657b      	str	r3, [r7, #84]	; 0x54
 8000700:	e00f      	b.n	8000722 <main+0xd2>
		digits[i] = _digits[i];
 8000702:	491f      	ldr	r1, [pc, #124]	; (8000780 <main+0x130>)
 8000704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000706:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000708:	00d2      	lsls	r2, r2, #3
 800070a:	3258      	adds	r2, #88	; 0x58
 800070c:	443a      	add	r2, r7
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	440b      	add	r3, r1
 8000712:	3a54      	subs	r2, #84	; 0x54
 8000714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000718:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 800071c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800071e:	3301      	adds	r3, #1
 8000720:	657b      	str	r3, [r7, #84]	; 0x54
 8000722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000724:	2b09      	cmp	r3, #9
 8000726:	ddec      	ble.n	8000702 <main+0xb2>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000728:	f000 ffb0 	bl	800168c <HAL_Init>

	/* USER CODE BEGIN Init */

	//Set 7-segment PINS
	led[0] = GPIO_PIN_1;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <main+0x134>)
 800072e:	2202      	movs	r2, #2
 8000730:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <main+0x134>)
 8000734:	2204      	movs	r2, #4
 8000736:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <main+0x134>)
 800073a:	2208      	movs	r2, #8
 800073c:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <main+0x134>)
 8000740:	2210      	movs	r2, #16
 8000742:	80da      	strh	r2, [r3, #6]

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000744:	f000 f828 	bl	8000798 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000748:	f000 fa26 	bl	8000b98 <MX_GPIO_Init>
	MX_I2C1_Init();
 800074c:	f000 f88a 	bl	8000864 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000750:	f000 f8c8 	bl	80008e4 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 8000754:	f000 f9fe 	bl	8000b54 <MX_USB_PCD_Init>
	MX_TIM1_Init();
 8000758:	f000 f902 	bl	8000960 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 800075c:	f000 f9ca 	bl	8000af4 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8000760:	f000 f952 	bl	8000a08 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <main+0x138>)
 8000766:	f003 fa61 	bl	8003c2c <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 800076a:	222c      	movs	r2, #44	; 0x2c
 800076c:	4907      	ldr	r1, [pc, #28]	; (800078c <main+0x13c>)
 800076e:	4808      	ldr	r0, [pc, #32]	; (8000790 <main+0x140>)
 8000770:	f004 fc60 	bl	8005034 <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 8000774:	2201      	movs	r2, #1
 8000776:	4907      	ldr	r1, [pc, #28]	; (8000794 <main+0x144>)
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <main+0x140>)
 800077a:	f004 fcb9 	bl	80050f0 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800077e:	e7fe      	b.n	800077e <main+0x12e>
 8000780:	200005bc 	.word	0x200005bc
 8000784:	2000057c 	.word	0x2000057c
 8000788:	20000170 	.word	0x20000170
 800078c:	08007900 	.word	0x08007900
 8000790:	20000208 	.word	0x20000208
 8000794:	20000670 	.word	0x20000670

08000798 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b09e      	sub	sp, #120	; 0x78
 800079c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800079e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007a2:	2228      	movs	r2, #40	; 0x28
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 ff98 	bl	80066dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80007bc:	463b      	mov	r3, r7
 80007be:	223c      	movs	r2, #60	; 0x3c
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f005 ff8a 	bl	80066dc <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80007c8:	2303      	movs	r3, #3
 80007ca:	653b      	str	r3, [r7, #80]	; 0x50
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007d0:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d6:	2301      	movs	r3, #1
 80007d8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007da:	2310      	movs	r3, #16
 80007dc:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e6:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007ec:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fcf4 	bl	80021e0 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x6a>
		Error_Handler();
 80007fe:	f000 fcf1 	bl	80011e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2302      	movs	r3, #2
 8000808:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000812:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000818:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800081c:	2101      	movs	r1, #1
 800081e:	4618      	mov	r0, r3
 8000820:	f002 fd1c 	bl	800325c <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x96>
		Error_Handler();
 800082a:	f000 fcdb 	bl	80011e4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <SystemClock_Config+0xc8>)
 8000830:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_TIM1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800083a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000844:	463b      	mov	r3, r7
 8000846:	4618      	mov	r0, r3
 8000848:	f002 ff3e 	bl	80036c8 <HAL_RCCEx_PeriphCLKConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xbe>
		Error_Handler();
 8000852:	f000 fcc7 	bl	80011e4 <Error_Handler>
	}
}
 8000856:	bf00      	nop
 8000858:	3778      	adds	r7, #120	; 0x78
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	00021021 	.word	0x00021021

08000864 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_I2C1_Init+0x74>)
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_I2C1_Init+0x78>)
 800086c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_I2C1_Init+0x74>)
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <MX_I2C1_Init+0x7c>)
 8000872:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_I2C1_Init+0x74>)
 800087c:	2201      	movs	r2, #1
 800087e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_I2C1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_I2C1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800089e:	480e      	ldr	r0, [pc, #56]	; (80008d8 <MX_I2C1_Init+0x74>)
 80008a0:	f001 faa6 	bl	8001df0 <HAL_I2C_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C1_Init+0x4a>
		Error_Handler();
 80008aa:	f000 fc9b 	bl	80011e4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <MX_I2C1_Init+0x74>)
 80008b2:	f001 fb2c 	bl	8001f0e <HAL_I2CEx_ConfigAnalogFilter>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80008bc:	f000 fc92 	bl	80011e4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80008c0:	2100      	movs	r1, #0
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_I2C1_Init+0x74>)
 80008c4:	f001 fb6e 	bl	8001fa4 <HAL_I2CEx_ConfigDigitalFilter>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80008ce:	f000 fc89 	bl	80011e4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000b8 	.word	0x200000b8
 80008dc:	40005400 	.word	0x40005400
 80008e0:	2000090e 	.word	0x2000090e

080008e4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_SPI1_Init+0x74>)
 80008ea:	4a1c      	ldr	r2, [pc, #112]	; (800095c <MX_SPI1_Init+0x78>)
 80008ec:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_SPI1_Init+0x74>)
 80008f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_SPI1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_SPI1_Init+0x74>)
 80008fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000902:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_SPI1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_SPI1_Init+0x74>)
 8000912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000916:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI1_Init+0x74>)
 800091a:	2208      	movs	r2, #8
 800091c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <MX_SPI1_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI1_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <MX_SPI1_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI1_Init+0x74>)
 8000932:	2207      	movs	r2, #7
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <MX_SPI1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI1_Init+0x74>)
 800093e:	2208      	movs	r2, #8
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_SPI1_Init+0x74>)
 8000944:	f003 f870 	bl	8003a28 <HAL_SPI_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_SPI1_Init+0x6e>
		Error_Handler();
 800094e:	f000 fc49 	bl	80011e4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000010c 	.word	0x2000010c
 800095c:	40013000 	.word	0x40013000

08000960 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800097e:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <MX_TIM1_Init+0xa0>)
 8000980:	4a20      	ldr	r2, [pc, #128]	; (8000a04 <MX_TIM1_Init+0xa4>)
 8000982:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4800 - 1;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_TIM1_Init+0xa0>)
 8000986:	f241 22bf 	movw	r2, #4799	; 0x12bf
 800098a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_TIM1_Init+0xa0>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 5 - 1;
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_TIM1_Init+0xa0>)
 8000994:	2204      	movs	r2, #4
 8000996:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_TIM1_Init+0xa0>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_TIM1_Init+0xa0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_TIM1_Init+0xa0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80009aa:	4815      	ldr	r0, [pc, #84]	; (8000a00 <MX_TIM1_Init+0xa0>)
 80009ac:	f003 f8e7 	bl	8003b7e <HAL_TIM_Base_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM1_Init+0x5a>
		Error_Handler();
 80009b6:	f000 fc15 	bl	80011e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009be:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4619      	mov	r1, r3
 80009c6:	480e      	ldr	r0, [pc, #56]	; (8000a00 <MX_TIM1_Init+0xa0>)
 80009c8:	f003 fd30 	bl	800442c <HAL_TIM_ConfigClockSource>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM1_Init+0x76>
		Error_Handler();
 80009d2:	f000 fc07 	bl	80011e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <MX_TIM1_Init+0xa0>)
 80009e8:	f004 fa38 	bl	8004e5c <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 80009f2:	f000 fbf7 	bl	80011e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000170 	.word	0x20000170
 8000a04:	40012c00 	.word	0x40012c00

08000a08 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08e      	sub	sp, #56	; 0x38
 8000a0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	615a      	str	r2, [r3, #20]
 8000a38:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a3a:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <MX_TIM2_Init+0xe8>)
 8000a3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a40:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <MX_TIM2_Init+0xe8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a48:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <MX_TIM2_Init+0xe8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_TIM2_Init+0xe8>)
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a56:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <MX_TIM2_Init+0xe8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <MX_TIM2_Init+0xe8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000a62:	4823      	ldr	r0, [pc, #140]	; (8000af0 <MX_TIM2_Init+0xe8>)
 8000a64:	f003 f88b 	bl	8003b7e <HAL_TIM_Base_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM2_Init+0x6a>
		Error_Handler();
 8000a6e:	f000 fbb9 	bl	80011e4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481c      	ldr	r0, [pc, #112]	; (8000af0 <MX_TIM2_Init+0xe8>)
 8000a80:	f003 fcd4 	bl	800442c <HAL_TIM_ConfigClockSource>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM2_Init+0x86>
		Error_Handler();
 8000a8a:	f000 fbab 	bl	80011e4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000a8e:	4818      	ldr	r0, [pc, #96]	; (8000af0 <MX_TIM2_Init+0xe8>)
 8000a90:	f003 f936 	bl	8003d00 <HAL_TIM_PWM_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x96>
		Error_Handler();
 8000a9a:	f000 fba3 	bl	80011e4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4810      	ldr	r0, [pc, #64]	; (8000af0 <MX_TIM2_Init+0xe8>)
 8000aae:	f004 f9d5 	bl	8004e5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000ab8:	f000 fb94 	bl	80011e4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000abc:	2360      	movs	r3, #96	; 0x60
 8000abe:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000acc:	463b      	mov	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <MX_TIM2_Init+0xe8>)
 8000ad4:	f003 fb96 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8000ade:	f000 fb81 	bl	80011e4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <MX_TIM2_Init+0xe8>)
 8000ae4:	f000 fc66 	bl	80013b4 <HAL_TIM_MspPostInit>

}
 8000ae8:	bf00      	nop
 8000aea:	3738      	adds	r7, #56	; 0x38
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200001bc 	.word	0x200001bc

08000af4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <MX_USART1_UART_Init+0x5c>)
 8000afc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART1_UART_Init+0x58>)
 8000b38:	f004 fa2e 	bl	8004f98 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000b42:	f000 fb4f 	bl	80011e4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000208 	.word	0x20000208
 8000b50:	40013800 	.word	0x40013800

08000b54 <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MX_USB_PCD_Init+0x3c>)
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <MX_USB_PCD_Init+0x40>)
 8000b5c:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USB_PCD_Init+0x3c>)
 8000b60:	2208      	movs	r2, #8
 8000b62:	605a      	str	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MX_USB_PCD_Init+0x3c>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	609a      	str	r2, [r3, #8]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USB_PCD_Init+0x3c>)
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	611a      	str	r2, [r3, #16]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <MX_USB_PCD_Init+0x3c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USB_PCD_Init+0x3c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_USB_PCD_Init+0x3c>)
 8000b7e:	f001 fa5d 	bl	800203c <HAL_PCD_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USB_PCD_Init+0x38>
		Error_Handler();
 8000b88:	f000 fb2c 	bl	80011e4 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000290 	.word	0x20000290
 8000b94:	40005c00 	.word	0x40005c00

08000b98 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000bae:	4b5d      	ldr	r3, [pc, #372]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	4a5c      	ldr	r2, [pc, #368]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb8:	6153      	str	r3, [r2, #20]
 8000bba:	4b5a      	ldr	r3, [pc, #360]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc2:	61bb      	str	r3, [r7, #24]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	4b57      	ldr	r3, [pc, #348]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	4a56      	ldr	r2, [pc, #344]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000bcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bd0:	6153      	str	r3, [r2, #20]
 8000bd2:	4b54      	ldr	r3, [pc, #336]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000bde:	4b51      	ldr	r3, [pc, #324]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	4a50      	ldr	r2, [pc, #320]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000be4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000be8:	6153      	str	r3, [r2, #20]
 8000bea:	4b4e      	ldr	r3, [pc, #312]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	4a4a      	ldr	r2, [pc, #296]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	6153      	str	r3, [r2, #20]
 8000c02:	4b48      	ldr	r3, [pc, #288]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0e:	4b45      	ldr	r3, [pc, #276]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a44      	ldr	r2, [pc, #272]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b42      	ldr	r3, [pc, #264]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <MX_GPIO_Init+0x18c>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2108      	movs	r1, #8
 8000c42:	4839      	ldr	r0, [pc, #228]	; (8000d28 <MX_GPIO_Init+0x190>)
 8000c44:	f001 f88a 	bl	8001d5c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2,
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2107      	movs	r1, #7
 8000c4c:	4837      	ldr	r0, [pc, #220]	; (8000d2c <MX_GPIO_Init+0x194>)
 8000c4e:	f001 f885 	bl	8001d5c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000c52:	2200      	movs	r2, #0
 8000c54:	f24f 011e 	movw	r1, #61470	; 0xf01e
 8000c58:	4835      	ldr	r0, [pc, #212]	; (8000d30 <MX_GPIO_Init+0x198>)
 8000c5a:	f001 f87f 	bl	8001d5c <HAL_GPIO_WritePin>
			GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_1
					| GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);


	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	482c      	ldr	r0, [pc, #176]	; (8000d28 <MX_GPIO_Init+0x190>)
 8000c76:	f000 fef7 	bl	8001a68 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC0 PC1 PC2 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4826      	ldr	r0, [pc, #152]	; (8000d2c <MX_GPIO_Init+0x194>)
 8000c92:	f000 fee9 	bl	8001a68 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c9a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000c9e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cae:	f000 fedb 	bl	8001a68 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000cb6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000cba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f000 fecd 	bl	8001a68 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
	 PD1 PD2 PD3 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 8000cce:	f24f 031e 	movw	r3, #61470	; 0xf01e
 8000cd2:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4812      	ldr	r0, [pc, #72]	; (8000d30 <MX_GPIO_Init+0x198>)
 8000ce8:	f000 febe 	bl	8001a68 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2006      	movs	r0, #6
 8000cf2:	f000 fe0c 	bl	800190e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cf6:	2006      	movs	r0, #6
 8000cf8:	f000 fe25 	bl	8001946 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2007      	movs	r0, #7
 8000d02:	f000 fe04 	bl	800190e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d06:	2007      	movs	r0, #7
 8000d08:	f000 fe1d 	bl	8001946 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2009      	movs	r0, #9
 8000d12:	f000 fdfc 	bl	800190e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d16:	2009      	movs	r0, #9
 8000d18:	f000 fe15 	bl	8001946 <HAL_NVIC_EnableIRQ>

}
 8000d1c:	bf00      	nop
 8000d1e:	3730      	adds	r7, #48	; 0x30
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000
 8000d28:	48001000 	.word	0x48001000
 8000d2c:	48000800 	.word	0x48000800
 8000d30:	48000c00 	.word	0x48000c00

08000d34 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 8000d3e:	f000 fcff 	bl	8001740 <HAL_GetTick>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a91      	ldr	r2, [pc, #580]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x258>)
 8000d46:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1) && LED != 4) {
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d116      	bne.n	8000d7c <HAL_GPIO_EXTI_Callback+0x48>
 8000d4e:	4b90      	ldr	r3, [pc, #576]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d012      	beq.n	8000d7c <HAL_GPIO_EXTI_Callback+0x48>
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8000d56:	4b8d      	ldr	r3, [pc, #564]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x258>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4b8e      	ldr	r3, [pc, #568]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x260>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000d64:	f240 8150 	bls.w	8001008 <HAL_GPIO_EXTI_Callback+0x2d4>
//			counterInside++;
			increase(LED);
 8000d68:	4b89      	ldr	r3, [pc, #548]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fc31 	bl	80005d4 <increase>
			previousMillis = currentMillis;
 8000d72:	4b86      	ldr	r3, [pc, #536]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x258>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a87      	ldr	r2, [pc, #540]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x260>)
 8000d78:	6013      	str	r3, [r2, #0]
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8000d7a:	e145      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0x2d4>
		}
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	2b08      	cmp	r3, #8
 8000d80:	f040 812a 	bne.w	8000fd8 <HAL_GPIO_EXTI_Callback+0x2a4>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 8000d84:	4b81      	ldr	r3, [pc, #516]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x258>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b82      	ldr	r3, [pc, #520]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x260>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000d92:	f240 8139 	bls.w	8001008 <HAL_GPIO_EXTI_Callback+0x2d4>
			if (nextTurn < 6)
 8000d96:	4b80      	ldr	r3, [pc, #512]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x264>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b05      	cmp	r3, #5
 8000d9c:	dc04      	bgt.n	8000da8 <HAL_GPIO_EXTI_Callback+0x74>
				nextTurn++;
 8000d9e:	4b7e      	ldr	r3, [pc, #504]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x264>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a7c      	ldr	r2, [pc, #496]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x264>)
 8000da6:	6013      	str	r3, [r2, #0]
			if ((isCorrect == -1) && nextTurn == 6) {
 8000da8:	4b7c      	ldr	r3, [pc, #496]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x268>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d126      	bne.n	8000e00 <HAL_GPIO_EXTI_Callback+0xcc>
 8000db2:	4b79      	ldr	r3, [pc, #484]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x264>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d122      	bne.n	8000e00 <HAL_GPIO_EXTI_Callback+0xcc>
				for (int i = 0; i < 4; i++) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e007      	b.n	8000dd0 <HAL_GPIO_EXTI_Callback+0x9c>
					carrier[i] = 0;
 8000dc0:	4a77      	ldr	r2, [pc, #476]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	ddf4      	ble.n	8000dc0 <HAL_GPIO_EXTI_Callback+0x8c>
				    //password[i] = 0;
				}
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4872      	ldr	r0, [pc, #456]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x270>)
 8000ddc:	f000 ffbe 	bl	8001d5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2104      	movs	r1, #4
 8000de4:	486f      	ldr	r0, [pc, #444]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0x270>)
 8000de6:	f000 ffb9 	bl	8001d5c <HAL_GPIO_WritePin>
				LED = -1;
 8000dea:	4b69      	ldr	r3, [pc, #420]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	601a      	str	r2, [r3, #0]
				nextTurn = 0;
 8000df2:	4b69      	ldr	r3, [pc, #420]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x264>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
				blink = 1;
 8000df8:	4b6b      	ldr	r3, [pc, #428]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x274>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
				return;
 8000dfe:	e103      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0x2d4>
			} else if ((isCorrect != 0 && isCorrect != 1)) {
 8000e00:	4b66      	ldr	r3, [pc, #408]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x268>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 80bb 	beq.w	8000f80 <HAL_GPIO_EXTI_Callback+0x24c>
 8000e0a:	4b64      	ldr	r3, [pc, #400]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x268>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	f000 80b6 	beq.w	8000f80 <HAL_GPIO_EXTI_Callback+0x24c>

				LED += 1;
 8000e14:	4b5e      	ldr	r3, [pc, #376]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a5d      	ldr	r2, [pc, #372]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000e1c:	6013      	str	r3, [r2, #0]
				if (LED == 4) {
 8000e1e:	4b5c      	ldr	r3, [pc, #368]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x25c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	f040 80ac 	bne.w	8000f80 <HAL_GPIO_EXTI_Callback+0x24c>
					int bool = 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
					for (int i = 0; i < 4; i++) {
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	e061      	b.n	8000ef6 <HAL_GPIO_EXTI_Callback+0x1c2>
						if (password[i] != carrier[i]) {
 8000e32:	4a5e      	ldr	r2, [pc, #376]	; (8000fac <HAL_GPIO_EXTI_Callback+0x278>)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e3a:	4959      	ldr	r1, [pc, #356]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d054      	beq.n	8000ef0 <HAL_GPIO_EXTI_Callback+0x1bc>
							bool = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
							logFailed[4] = carrier[0] + '0';
 8000e4a:	4b55      	ldr	r3, [pc, #340]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	3330      	adds	r3, #48	; 0x30
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b56      	ldr	r3, [pc, #344]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000e56:	711a      	strb	r2, [r3, #4]
							logFailed[5] = carrier[1] + '0';
 8000e58:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	3330      	adds	r3, #48	; 0x30
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b53      	ldr	r3, [pc, #332]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000e64:	715a      	strb	r2, [r3, #5]
							logFailed[6] = carrier[2] + '0';
 8000e66:	4b4e      	ldr	r3, [pc, #312]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	3330      	adds	r3, #48	; 0x30
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b4f      	ldr	r3, [pc, #316]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000e72:	719a      	strb	r2, [r3, #6]
							logFailed[7] = carrier[3] + '0';
 8000e74:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	3330      	adds	r3, #48	; 0x30
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000e80:	71da      	strb	r2, [r3, #7]
							isCorrect = 0;
 8000e82:	4b46      	ldr	r3, [pc, #280]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x268>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
							if (logStatus)
 8000e88:	4b4a      	ldr	r3, [pc, #296]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <HAL_GPIO_EXTI_Callback+0x166>
								HAL_UART_Transmit_IT(&huart1, logFailed, 18);
 8000e90:	2212      	movs	r2, #18
 8000e92:	4947      	ldr	r1, [pc, #284]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000e94:	4848      	ldr	r0, [pc, #288]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x284>)
 8000e96:	f004 f8cd 	bl	8005034 <HAL_UART_Transmit_IT>
							prevEnterTime = HAL_GetTick();
 8000e9a:	f000 fc51 	bl	8001740 <HAL_GetTick>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a46      	ldr	r2, [pc, #280]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x288>)
 8000ea2:	6013      	str	r3, [r2, #0]
							wrongPassCounter++;
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	4a45      	ldr	r2, [pc, #276]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000eac:	6013      	str	r3, [r2, #0]
							if (wrongPassCounter % 3 == 0)
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000eb0:	6819      	ldr	r1, [r3, #0]
 8000eb2:	4b44      	ldr	r3, [pc, #272]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x290>)
 8000eb4:	fb83 3201 	smull	r3, r2, r3, r1
 8000eb8:	17cb      	asrs	r3, r1, #31
 8000eba:	1ad2      	subs	r2, r2, r3
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	1aca      	subs	r2, r1, r3
 8000ec4:	2a00      	cmp	r2, #0
 8000ec6:	d103      	bne.n	8000ed0 <HAL_GPIO_EXTI_Callback+0x19c>
								buzzer_flag = SuperWrongPass;
 8000ec8:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	701a      	strb	r2, [r3, #0]
 8000ece:	e002      	b.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x1a2>
							else
								buzzer_flag = WrongPass;
 8000ed0:	4b3d      	ldr	r3, [pc, #244]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	701a      	strb	r2, [r3, #0]
							buzzerEnterTime = HAL_GetTick();
 8000ed6:	f000 fc33 	bl	8001740 <HAL_GetTick>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a3b      	ldr	r2, [pc, #236]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x298>)
 8000ede:	6013      	str	r3, [r2, #0]
							if (alertStatus)
 8000ee0:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 808e 	beq.w	8001006 <HAL_GPIO_EXTI_Callback+0x2d2>
								PWM_Start();
 8000eea:	f000 fb29 	bl	8001540 <PWM_Start>
							return;
 8000eee:	e08a      	b.n	8001006 <HAL_GPIO_EXTI_Callback+0x2d2>
					for (int i = 0; i < 4; i++) {
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	dd9a      	ble.n	8000e32 <HAL_GPIO_EXTI_Callback+0xfe>
						}
					}
					if (bool) {
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d03e      	beq.n	8000f80 <HAL_GPIO_EXTI_Callback+0x24c>
						logCorrect[4] = carrier[0] + '0';
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	3330      	adds	r3, #48	; 0x30
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000f0e:	711a      	strb	r2, [r3, #4]
						logCorrect[5] = carrier[1] + '0';
 8000f10:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	3330      	adds	r3, #48	; 0x30
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000f1c:	715a      	strb	r2, [r3, #5]
						logCorrect[6] = carrier[2] + '0';
 8000f1e:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	3330      	adds	r3, #48	; 0x30
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000f2a:	719a      	strb	r2, [r3, #6]
						logCorrect[7] = carrier[3] + '0';
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3330      	adds	r3, #48	; 0x30
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000f38:	71da      	strb	r2, [r3, #7]
						isCorrect = 1;
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x268>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]
						if (logStatus)
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x280>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d004      	beq.n	8000f52 <HAL_GPIO_EXTI_Callback+0x21e>
							HAL_UART_Transmit_IT(&huart1, logCorrect, 19);
 8000f48:	2213      	movs	r2, #19
 8000f4a:	4922      	ldr	r1, [pc, #136]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000f4c:	481a      	ldr	r0, [pc, #104]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0x284>)
 8000f4e:	f004 f871 	bl	8005034 <HAL_UART_Transmit_IT>
						prevEnterTime = HAL_GetTick();
 8000f52:	f000 fbf5 	bl	8001740 <HAL_GetTick>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x288>)
 8000f5a:	6013      	str	r3, [r2, #0]
						buzzer_flag = CorrectPass;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x294>)
 8000f5e:	2202      	movs	r2, #2
 8000f60:	701a      	strb	r2, [r3, #0]
						buzzerEnterTime = HAL_GetTick();
 8000f62:	f000 fbed 	bl	8001740 <HAL_GetTick>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x298>)
 8000f6a:	6013      	str	r3, [r2, #0]
						if (alertStatus)
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_GPIO_EXTI_Callback+0x244>
							PWM_Start();
 8000f74:	f000 fae4 	bl	8001540 <PWM_Start>
						wrongPassCounter = 0;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
						return;
 8000f7e:	e043      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0x2d4>
					}
				}
			}
			previousMillis = currentMillis;
 8000f80:	4b02      	ldr	r3, [pc, #8]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x258>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a03      	ldr	r2, [pc, #12]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x260>)
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	e03e      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0x2d4>
 8000f8a:	bf00      	nop
 8000f8c:	2000059c 	.word	0x2000059c
 8000f90:	200005b8 	.word	0x200005b8
 8000f94:	20000598 	.word	0x20000598
 8000f98:	200005a8 	.word	0x200005a8
 8000f9c:	20000040 	.word	0x20000040
 8000fa0:	20000584 	.word	0x20000584
 8000fa4:	48000800 	.word	0x48000800
 8000fa8:	20000044 	.word	0x20000044
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000024 	.word	0x20000024
 8000fb4:	20000038 	.word	0x20000038
 8000fb8:	20000208 	.word	0x20000208
 8000fbc:	200005b0 	.word	0x200005b0
 8000fc0:	20000594 	.word	0x20000594
 8000fc4:	55555556 	.word	0x55555556
 8000fc8:	20000048 	.word	0x20000048
 8000fcc:	200005b4 	.word	0x200005b4
 8000fd0:	2000003c 	.word	0x2000003c
 8000fd4:	20000010 	.word	0x20000010
		}

	} else if (GPIO_Pin == GPIO_PIN_0 && isCorrect == 0) {
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d114      	bne.n	8001008 <HAL_GPIO_EXTI_Callback+0x2d4>
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d110      	bne.n	8001008 <HAL_GPIO_EXTI_Callback+0x2d4>
		blink = 0;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
		isCorrect = -1;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000fee:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff2:	601a      	str	r2, [r3, #0]
		prevEnterTime = HAL_GetTick();
 8000ff4:	f000 fba4 	bl	8001740 <HAL_GetTick>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000ffc:	6013      	str	r3, [r2, #0]
//		PWM_Stop();
		buzzer_flag = NONE;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001000:	2205      	movs	r2, #5
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e000      	b.n	8001008 <HAL_GPIO_EXTI_Callback+0x2d4>
							return;
 8001006:	bf00      	nop
	}
}
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000040 	.word	0x20000040
 8001014:	20000044 	.word	0x20000044
 8001018:	200005b0 	.word	0x200005b0
 800101c:	20000048 	.word	0x20000048

08001020 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a62      	ldr	r2, [pc, #392]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800102e:	4293      	cmp	r3, r2
 8001030:	f040 80be 	bne.w	80011b0 <HAL_TIM_PeriodElapsedCallback+0x190>
		if (index == LED && HAL_GetTick() - prevTime < 400) {
 8001034:	4b61      	ldr	r3, [pc, #388]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b61      	ldr	r3, [pc, #388]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d119      	bne.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x54>
 8001040:	f000 fb7e 	bl	8001740 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	4b5f      	ldr	r3, [pc, #380]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001050:	d210      	bcs.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x54>
			display_number(index, carrier[index]);
 8001052:	4b5a      	ldr	r3, [pc, #360]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b59      	ldr	r3, [pc, #356]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	495b      	ldr	r1, [pc, #364]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800105c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001060:	4619      	mov	r1, r3
 8001062:	4610      	mov	r0, r2
 8001064:	f7ff fa82 	bl	800056c <display_number>
			coolDownTimer = HAL_GetTick();
 8001068:	f000 fb6a 	bl	8001740 <HAL_GetTick>
 800106c:	4603      	mov	r3, r0
 800106e:	4a57      	ldr	r2, [pc, #348]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e02d      	b.n	80010d0 <HAL_TIM_PeriodElapsedCallback+0xb0>
		} else if (index == LED && HAL_GetTick() - prevTime > 900) {
 8001074:	4b51      	ldr	r3, [pc, #324]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b51      	ldr	r3, [pc, #324]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d116      	bne.n	80010ae <HAL_TIM_PeriodElapsedCallback+0x8e>
 8001080:	f000 fb5e 	bl	8001740 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	4b4f      	ldr	r3, [pc, #316]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001090:	d90d      	bls.n	80010ae <HAL_TIM_PeriodElapsedCallback+0x8e>
			//coolDown
			if (HAL_GetTick() - coolDownTimer > 100) {
 8001092:	f000 fb55 	bl	8001740 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d916      	bls.n	80010d0 <HAL_TIM_PeriodElapsedCallback+0xb0>
				prevTime = HAL_GetTick();
 80010a2:	f000 fb4d 	bl	8001740 <HAL_GetTick>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a46      	ldr	r2, [pc, #280]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80010aa:	6013      	str	r3, [r2, #0]
			if (HAL_GetTick() - coolDownTimer > 100) {
 80010ac:	e010      	b.n	80010d0 <HAL_TIM_PeriodElapsedCallback+0xb0>
			}
		} else if (index != LED) {
 80010ae:	4b43      	ldr	r3, [pc, #268]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b43      	ldr	r3, [pc, #268]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d00a      	beq.n	80010d0 <HAL_TIM_PeriodElapsedCallback+0xb0>
			display_number(index, carrier[index]);
 80010ba:	4b40      	ldr	r3, [pc, #256]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4941      	ldr	r1, [pc, #260]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80010c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4610      	mov	r0, r2
 80010cc:	f7ff fa4e 	bl	800056c <display_number>
		}
		if (index == 4) {
 80010d0:	4b3a      	ldr	r3, [pc, #232]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	d105      	bne.n	80010e4 <HAL_TIM_PeriodElapsedCallback+0xc4>
			index = 0;
 80010d8:	4b38      	ldr	r3, [pc, #224]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
			init_display();
 80010de:	f7ff faab 	bl	8000638 <init_display>
 80010e2:	e004      	b.n	80010ee <HAL_TIM_PeriodElapsedCallback+0xce>
		} else {
			++index;
 80010e4:	4b35      	ldr	r3, [pc, #212]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a34      	ldr	r2, [pc, #208]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80010ec:	6013      	str	r3, [r2, #0]
		}

		if (isCorrect == 1 && blink == 1) {
 80010ee:	4b38      	ldr	r3, [pc, #224]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d123      	bne.n	800113e <HAL_TIM_PeriodElapsedCallback+0x11e>
 80010f6:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d11f      	bne.n	800113e <HAL_TIM_PeriodElapsedCallback+0x11e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80010fe:	2201      	movs	r2, #1
 8001100:	2102      	movs	r1, #2
 8001102:	4835      	ldr	r0, [pc, #212]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001104:	f000 fe2a 	bl	8001d5c <HAL_GPIO_WritePin>
			if (HAL_GetTick() - prevEnterTime > 5000) {
 8001108:	f000 fb1a 	bl	8001740 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	4b33      	ldr	r3, [pc, #204]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f241 3288 	movw	r2, #5000	; 0x1388
 8001118:	4293      	cmp	r3, r2
 800111a:	d910      	bls.n	800113e <HAL_TIM_PeriodElapsedCallback+0x11e>
				blink = 0;
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2102      	movs	r1, #2
 8001126:	482c      	ldr	r0, [pc, #176]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001128:	f000 fe18 	bl	8001d5c <HAL_GPIO_WritePin>
				prevEnterTime = HAL_GetTick();
 800112c:	f000 fb08 	bl	8001740 <HAL_GetTick>
 8001130:	4603      	mov	r3, r0
 8001132:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001134:	6013      	str	r3, [r2, #0]
				isCorrect = -1;
 8001136:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	601a      	str	r2, [r3, #0]
			}
		}

		if (isCorrect == 0 && blink == 1) {
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d134      	bne.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x190>
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d130      	bne.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x190>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2104      	movs	r1, #4
 8001152:	4821      	ldr	r0, [pc, #132]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001154:	f000 fe02 	bl	8001d5c <HAL_GPIO_WritePin>
			if (HAL_GetTick() - prevEnterTime < 5000) {
 8001158:	f000 faf2 	bl	8001740 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	f241 3287 	movw	r2, #4999	; 0x1387
 8001168:	4293      	cmp	r3, r2
 800116a:	d811      	bhi.n	8001190 <HAL_TIM_PeriodElapsedCallback+0x170>
				if (HAL_GetTick() - prevTime > 100) {
 800116c:	f000 fae8 	bl	8001740 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b64      	cmp	r3, #100	; 0x64
 800117a:	d919      	bls.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x190>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 800117c:	2104      	movs	r1, #4
 800117e:	4816      	ldr	r0, [pc, #88]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001180:	f000 fe04 	bl	8001d8c <HAL_GPIO_TogglePin>
					prevTime = HAL_GetTick();
 8001184:	f000 fadc 	bl	8001740 <HAL_GetTick>
 8001188:	4603      	mov	r3, r0
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800118c:	6013      	str	r3, [r2, #0]
//		case SuperWrongPass:
//			PWM_Change_Tone(1000, _volume);
//			break;
//		}
	}
}
 800118e:	e00f      	b.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x190>
				if (buzzer_flag != SuperWrongPass) {
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b04      	cmp	r3, #4
 8001196:	d00b      	beq.n	80011b0 <HAL_TIM_PeriodElapsedCallback+0x190>
					blink = 0;
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
					isCorrect = -1;
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	601a      	str	r2, [r3, #0]
					prevEnterTime = HAL_GetTick();
 80011a6:	f000 facb 	bl	8001740 <HAL_GetTick>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40012c00 	.word	0x40012c00
 80011bc:	200005ac 	.word	0x200005ac
 80011c0:	200005b8 	.word	0x200005b8
 80011c4:	200005a0 	.word	0x200005a0
 80011c8:	20000584 	.word	0x20000584
 80011cc:	200005a4 	.word	0x200005a4
 80011d0:	20000040 	.word	0x20000040
 80011d4:	20000044 	.word	0x20000044
 80011d8:	48000800 	.word	0x48000800
 80011dc:	200005b0 	.word	0x200005b0
 80011e0:	20000048 	.word	0x20000048

080011e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
}
 80011ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011ec:	e7fe      	b.n	80011ec <Error_Handler+0x8>
	...

080011f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_MspInit+0x44>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_MspInit+0x44>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_MspInit+0x44>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_MspInit+0x44>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_MspInit+0x44>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	61d3      	str	r3, [r2, #28]
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x44>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001226:	2007      	movs	r0, #7
 8001228:	f000 fb66 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_I2C_MspInit+0x7c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d127      	bne.n	80012aa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_I2C_MspInit+0x80>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <HAL_I2C_MspInit+0x80>)
 8001260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001264:	6153      	str	r3, [r2, #20]
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_I2C_MspInit+0x80>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001272:	23c0      	movs	r3, #192	; 0xc0
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001276:	2312      	movs	r3, #18
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127a:	2301      	movs	r3, #1
 800127c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001282:	2304      	movs	r3, #4
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	480b      	ldr	r0, [pc, #44]	; (80012bc <HAL_I2C_MspInit+0x84>)
 800128e:	f000 fbeb 	bl	8001a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_I2C_MspInit+0x80>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_I2C_MspInit+0x80>)
 8001298:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_I2C_MspInit+0x80>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40005400 	.word	0x40005400
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000400 	.word	0x48000400

080012c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_SPI_MspInit+0x7c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d128      	bne.n	8001334 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_SPI_MspInit+0x80>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <HAL_SPI_MspInit+0x80>)
 80012e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ec:	6193      	str	r3, [r2, #24]
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_SPI_MspInit+0x80>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_SPI_MspInit+0x80>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a10      	ldr	r2, [pc, #64]	; (8001340 <HAL_SPI_MspInit+0x80>)
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_SPI_MspInit+0x80>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001312:	23e0      	movs	r3, #224	; 0xe0
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001322:	2305      	movs	r3, #5
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f000 fb9a 	bl	8001a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40013000 	.word	0x40013000
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a16      	ldr	r2, [pc, #88]	; (80013ac <HAL_TIM_Base_MspInit+0x68>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d114      	bne.n	8001380 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <HAL_TIM_Base_MspInit+0x6c>)
 800135c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2019      	movs	r0, #25
 8001374:	f000 facb 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001378:	2019      	movs	r0, #25
 800137a:	f000 fae4 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800137e:	e010      	b.n	80013a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001388:	d10b      	bne.n	80013a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_TIM_Base_MspInit+0x6c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40012c00 	.word	0x40012c00
 80013b0:	40021000 	.word	0x40021000

080013b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d4:	d11d      	bne.n	8001412 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_TIM_MspPostInit+0x68>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <HAL_TIM_MspPostInit+0x68>)
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	6153      	str	r3, [r2, #20]
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_TIM_MspPostInit+0x68>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001400:	2301      	movs	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f000 fb2b 	bl	8001a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <HAL_UART_MspInit+0x8c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12f      	bne.n	80014a2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_UART_MspInit+0x90>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	4a1a      	ldr	r2, [pc, #104]	; (80014b0 <HAL_UART_MspInit+0x90>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6193      	str	r3, [r2, #24]
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_UART_MspInit+0x90>)
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_UART_MspInit+0x90>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <HAL_UART_MspInit+0x90>)
 8001460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001464:	6153      	str	r3, [r2, #20]
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_UART_MspInit+0x90>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001472:	2330      	movs	r3, #48	; 0x30
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001482:	2307      	movs	r3, #7
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <HAL_UART_MspInit+0x94>)
 800148e:	f000 faeb 	bl	8001a68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	2025      	movs	r0, #37	; 0x25
 8001498:	f000 fa39 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800149c:	2025      	movs	r0, #37	; 0x25
 800149e:	f000 fa52 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	48000800 	.word	0x48000800

080014b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a18      	ldr	r2, [pc, #96]	; (8001538 <HAL_PCD_MspInit+0x80>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d129      	bne.n	800152e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_PCD_MspInit+0x84>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_PCD_MspInit+0x84>)
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	6153      	str	r3, [r2, #20]
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_PCD_MspInit+0x84>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80014f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001504:	230e      	movs	r3, #14
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	f000 faa9 	bl	8001a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_PCD_MspInit+0x84>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_PCD_MspInit+0x84>)
 800151c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_PCD_MspInit+0x84>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40005c00 	.word	0x40005c00
 800153c:	40021000 	.word	0x40021000

08001540 <PWM_Start>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <PWM_Start+0x18>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <PWM_Start+0x1c>)
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fc38 	bl	8003dc4 <HAL_TIM_PWM_Start>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000088 	.word	0x20000088
 800155c:	2000008c 	.word	0x2000008c

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 f8b4 	bl	8001718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f000 fc01 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80015c6:	2002      	movs	r0, #2
 80015c8:	f000 fbfa 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80015d4:	2004      	movs	r0, #4
 80015d6:	f000 fbf3 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}

080015de <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80015e2:	2008      	movs	r0, #8
 80015e4:	f000 fbec 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015f2:	f002 fce7 	bl	8003fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000170 	.word	0x20000170

08001600 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <USART1_IRQHandler+0x10>)
 8001606:	f003 fdb7 	bl	8005178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000208 	.word	0x20000208

08001614 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <SystemInit+0x20>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <SystemInit+0x20>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001670 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800163c:	f7ff ffea 	bl	8001614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <LoopForever+0x6>)
  ldr r1, =_edata
 8001642:	490d      	ldr	r1, [pc, #52]	; (8001678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <LoopForever+0xe>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001658:	4c0a      	ldr	r4, [pc, #40]	; (8001684 <LoopForever+0x16>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001666:	f005 f815 	bl	8006694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800166a:	f7fe fff1 	bl	8000650 <main>

0800166e <LoopForever>:

LoopForever:
    b LoopForever
 800166e:	e7fe      	b.n	800166e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001670:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800167c:	08007970 	.word	0x08007970
  ldr r2, =_sbss
 8001680:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001684:	20000678 	.word	0x20000678

08001688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC1_2_IRQHandler>
	...

0800168c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_Init+0x28>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_Init+0x28>)
 8001696:	f043 0310 	orr.w	r3, r3, #16
 800169a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 f92b 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f808 	bl	80016b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fda2 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40022000 	.word	0x40022000

080016b8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x54>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x58>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f943 	bl	8001962 <HAL_SYSTICK_Config>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00e      	b.n	8001704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b0f      	cmp	r3, #15
 80016ea:	d80a      	bhi.n	8001702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ec:	2200      	movs	r2, #0
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f000 f90b 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <HAL_InitTick+0x5c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	e000      	b.n	8001704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000090 	.word	0x20000090
 8001710:	20000098 	.word	0x20000098
 8001714:	20000094 	.word	0x20000094

08001718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x20>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x24>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4413      	add	r3, r2
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_IncTick+0x24>)
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000098 	.word	0x20000098
 800173c:	20000674 	.word	0x20000674

08001740 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return uwTick;  
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_GetTick+0x14>)
 8001746:	681b      	ldr	r3, [r3, #0]
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000674 	.word	0x20000674

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff8e 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff29 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff3e 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff8e 	bl	800184c <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5d 	bl	80017f8 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff31 	bl	80017bc <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001988:	2b02      	cmp	r3, #2
 800198a:	d008      	beq.n	800199e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2204      	movs	r2, #4
 8001990:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e020      	b.n	80019e0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 020e 	bic.w	r2, r2, #14
 80019ac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c6:	2101      	movs	r1, #1
 80019c8:	fa01 f202 	lsl.w	r2, r1, r2
 80019cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d005      	beq.n	8001a0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2204      	movs	r2, #4
 8001a06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e027      	b.n	8001a5e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 020e 	bic.w	r2, r2, #14
 8001a1c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	4798      	blx	r3
    } 
  }
  return status;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a76:	e154      	b.n	8001d22 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	fa01 f303 	lsl.w	r3, r1, r3
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8146 	beq.w	8001d1c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d005      	beq.n	8001aa8 <HAL_GPIO_Init+0x40>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d130      	bne.n	8001b0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ade:	2201      	movs	r2, #1
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	f003 0201 	and.w	r2, r3, #1
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d017      	beq.n	8001b46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d123      	bne.n	8001b9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	08da      	lsrs	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3208      	adds	r2, #8
 8001b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	6939      	ldr	r1, [r7, #16]
 8001b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0203 	and.w	r2, r3, #3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80a0 	beq.w	8001d1c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bdc:	4b58      	ldr	r3, [pc, #352]	; (8001d40 <HAL_GPIO_Init+0x2d8>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a57      	ldr	r2, [pc, #348]	; (8001d40 <HAL_GPIO_Init+0x2d8>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b55      	ldr	r3, [pc, #340]	; (8001d40 <HAL_GPIO_Init+0x2d8>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bf4:	4a53      	ldr	r2, [pc, #332]	; (8001d44 <HAL_GPIO_Init+0x2dc>)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	220f      	movs	r2, #15
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c1e:	d019      	beq.n	8001c54 <HAL_GPIO_Init+0x1ec>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a49      	ldr	r2, [pc, #292]	; (8001d48 <HAL_GPIO_Init+0x2e0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_GPIO_Init+0x1e8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a48      	ldr	r2, [pc, #288]	; (8001d4c <HAL_GPIO_Init+0x2e4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00d      	beq.n	8001c4c <HAL_GPIO_Init+0x1e4>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a47      	ldr	r2, [pc, #284]	; (8001d50 <HAL_GPIO_Init+0x2e8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d007      	beq.n	8001c48 <HAL_GPIO_Init+0x1e0>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a46      	ldr	r2, [pc, #280]	; (8001d54 <HAL_GPIO_Init+0x2ec>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_GPIO_Init+0x1dc>
 8001c40:	2304      	movs	r3, #4
 8001c42:	e008      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c44:	2305      	movs	r3, #5
 8001c46:	e006      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e004      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e002      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c54:	2300      	movs	r3, #0
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	f002 0203 	and.w	r2, r2, #3
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c66:	4937      	ldr	r1, [pc, #220]	; (8001d44 <HAL_GPIO_Init+0x2dc>)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c74:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <HAL_GPIO_Init+0x2f0>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c98:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <HAL_GPIO_Init+0x2f0>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <HAL_GPIO_Init+0x2f0>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cc2:	4a25      	ldr	r2, [pc, #148]	; (8001d58 <HAL_GPIO_Init+0x2f0>)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_GPIO_Init+0x2f0>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cec:	4a1a      	ldr	r2, [pc, #104]	; (8001d58 <HAL_GPIO_Init+0x2f0>)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_GPIO_Init+0x2f0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d16:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_GPIO_Init+0x2f0>)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f aea3 	bne.w	8001a78 <HAL_GPIO_Init+0x10>
  }
}
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010000 	.word	0x40010000
 8001d48:	48000400 	.word	0x48000400
 8001d4c:	48000800 	.word	0x48000800
 8001d50:	48000c00 	.word	0x48000c00
 8001d54:	48001000 	.word	0x48001000
 8001d58:	40010400 	.word	0x40010400

08001d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d6c:	787b      	ldrb	r3, [r7, #1]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4013      	ands	r3, r2
 8001da4:	041a      	lsls	r2, r3, #16
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43d9      	mvns	r1, r3
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	400b      	ands	r3, r1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe ffa8 	bl	8000d34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e081      	b.n	8001f06 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff fa0e 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2224      	movs	r2, #36	; 0x24
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	e006      	b.n	8001e78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d104      	bne.n	8001e8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69d9      	ldr	r1, [r3, #28]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d138      	bne.n	8001f96 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e032      	b.n	8001f98 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2224      	movs	r2, #36	; 0x24
 8001f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f60:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6819      	ldr	r1, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0201 	orr.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	d139      	bne.n	800202e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e033      	b.n	8002030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2224      	movs	r2, #36	; 0x24
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ff6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	021b      	lsls	r3, r3, #8
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0201 	orr.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800202e:	2302      	movs	r3, #2
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203e:	b08b      	sub	sp, #44	; 0x2c
 8002040:	af06      	add	r7, sp, #24
 8002042:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0c4      	b.n	80021d8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fa28 	bl	80014b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2203      	movs	r2, #3
 800206c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f004 fad1 	bl	800661c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	e040      	b.n	8002102 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	3301      	adds	r3, #1
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	440b      	add	r3, r1
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	3303      	adds	r3, #3
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	3338      	adds	r3, #56	; 0x38
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	333c      	adds	r3, #60	; 0x3c
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	3340      	adds	r3, #64	; 0x40
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	3301      	adds	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3b9      	bcc.n	8002080 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e044      	b.n	800219c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	3301      	adds	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d3b5      	bcc.n	8002112 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	687e      	ldr	r6, [r7, #4]
 80021ae:	466d      	mov	r5, sp
 80021b0:	f106 0410 	add.w	r4, r6, #16
 80021b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	602b      	str	r3, [r5, #0]
 80021bc:	1d33      	adds	r3, r6, #4
 80021be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c0:	6838      	ldr	r0, [r7, #0]
 80021c2:	f004 fa46 	bl	8006652 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d102      	bne.n	8002206 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	f001 b823 	b.w	800324c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 817d 	beq.w	8002516 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800221c:	4bbc      	ldr	r3, [pc, #752]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b04      	cmp	r3, #4
 8002226:	d00c      	beq.n	8002242 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002228:	4bb9      	ldr	r3, [pc, #740]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b08      	cmp	r3, #8
 8002232:	d15c      	bne.n	80022ee <HAL_RCC_OscConfig+0x10e>
 8002234:	4bb6      	ldr	r3, [pc, #728]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d155      	bne.n	80022ee <HAL_RCC_OscConfig+0x10e>
 8002242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002246:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002256:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d102      	bne.n	8002274 <HAL_RCC_OscConfig+0x94>
 800226e:	4ba8      	ldr	r3, [pc, #672]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e015      	b.n	80022a0 <HAL_RCC_OscConfig+0xc0>
 8002274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002278:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800228c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002290:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800229c:	4b9c      	ldr	r3, [pc, #624]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022a4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80022a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022ac:	fa92 f2a2 	rbit	r2, r2
 80022b0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80022b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80022b8:	fab2 f282 	clz	r2, r2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	f042 0220 	orr.w	r2, r2, #32
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f002 021f 	and.w	r2, r2, #31
 80022c8:	2101      	movs	r1, #1
 80022ca:	fa01 f202 	lsl.w	r2, r1, r2
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 811f 	beq.w	8002514 <HAL_RCC_OscConfig+0x334>
 80022d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 8116 	bne.w	8002514 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f000 bfaf 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x12e>
 8002300:	4b83      	ldr	r3, [pc, #524]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a82      	ldr	r2, [pc, #520]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e036      	b.n	800237c <HAL_RCC_OscConfig+0x19c>
 800230e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x158>
 800231e:	4b7c      	ldr	r3, [pc, #496]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a7b      	ldr	r2, [pc, #492]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b79      	ldr	r3, [pc, #484]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a78      	ldr	r2, [pc, #480]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e021      	b.n	800237c <HAL_RCC_OscConfig+0x19c>
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x184>
 800234a:	4b71      	ldr	r3, [pc, #452]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a70      	ldr	r2, [pc, #448]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b6e      	ldr	r3, [pc, #440]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a6d      	ldr	r2, [pc, #436]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0x19c>
 8002364:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a69      	ldr	r2, [pc, #420]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800236a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b67      	ldr	r3, [pc, #412]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a66      	ldr	r2, [pc, #408]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800237c:	4b64      	ldr	r3, [pc, #400]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f023 020f 	bic.w	r2, r3, #15
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	495f      	ldr	r1, [pc, #380]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002392:	4313      	orrs	r3, r2
 8002394:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d059      	beq.n	800245a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7ff f9cb 	bl	8001740 <HAL_GetTick>
 80023aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b0:	f7ff f9c6 	bl	8001740 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b64      	cmp	r3, #100	; 0x64
 80023be:	d902      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	f000 bf43 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
 80023c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80023da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d102      	bne.n	80023f8 <HAL_RCC_OscConfig+0x218>
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	e015      	b.n	8002424 <HAL_RCC_OscConfig+0x244>
 80023f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023fc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002404:	fa93 f3a3 	rbit	r3, r3
 8002408:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800240c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002410:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002414:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002420:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002428:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800242c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002430:	fa92 f2a2 	rbit	r2, r2
 8002434:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002438:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800243c:	fab2 f282 	clz	r2, r2
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f042 0220 	orr.w	r2, r2, #32
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	f002 021f 	and.w	r2, r2, #31
 800244c:	2101      	movs	r1, #1
 800244e:	fa01 f202 	lsl.w	r2, r1, r2
 8002452:	4013      	ands	r3, r2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ab      	beq.n	80023b0 <HAL_RCC_OscConfig+0x1d0>
 8002458:	e05d      	b.n	8002516 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7ff f971 	bl	8001740 <HAL_GetTick>
 800245e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002464:	f7ff f96c 	bl	8001740 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b64      	cmp	r3, #100	; 0x64
 8002472:	d902      	bls.n	800247a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	f000 bee9 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
 800247a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800248e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <HAL_RCC_OscConfig+0x2cc>
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	e015      	b.n	80024d8 <HAL_RCC_OscConfig+0x2f8>
 80024ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_RCC_OscConfig+0x330>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024dc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80024e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024e4:	fa92 f2a2 	rbit	r2, r2
 80024e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80024ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80024f0:	fab2 f282 	clz	r2, r2
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	f042 0220 	orr.w	r2, r2, #32
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f002 021f 	and.w	r2, r2, #31
 8002500:	2101      	movs	r1, #1
 8002502:	fa01 f202 	lsl.w	r2, r1, r2
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ab      	bne.n	8002464 <HAL_RCC_OscConfig+0x284>
 800250c:	e003      	b.n	8002516 <HAL_RCC_OscConfig+0x336>
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 817d 	beq.w	8002826 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800252c:	4ba6      	ldr	r3, [pc, #664]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002538:	4ba3      	ldr	r3, [pc, #652]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d172      	bne.n	800262a <HAL_RCC_OscConfig+0x44a>
 8002544:	4ba0      	ldr	r3, [pc, #640]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d16c      	bne.n	800262a <HAL_RCC_OscConfig+0x44a>
 8002550:	2302      	movs	r3, #2
 8002552:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002562:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d102      	bne.n	8002580 <HAL_RCC_OscConfig+0x3a0>
 800257a:	4b93      	ldr	r3, [pc, #588]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	e013      	b.n	80025a8 <HAL_RCC_OscConfig+0x3c8>
 8002580:	2302      	movs	r3, #2
 8002582:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002592:	2302      	movs	r3, #2
 8002594:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002598:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025a4:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	2202      	movs	r2, #2
 80025aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025b2:	fa92 f2a2 	rbit	r2, r2
 80025b6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025be:	fab2 f282 	clz	r2, r2
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	f042 0220 	orr.w	r2, r2, #32
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f002 021f 	and.w	r2, r2, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCC_OscConfig+0x410>
 80025da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d002      	beq.n	80025f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f000 be2e 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f0:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	21f8      	movs	r1, #248	; 0xf8
 8002606:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800260e:	fa91 f1a1 	rbit	r1, r1
 8002612:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002616:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800261a:	fab1 f181 	clz	r1, r1
 800261e:	b2c9      	uxtb	r1, r1
 8002620:	408b      	lsls	r3, r1
 8002622:	4969      	ldr	r1, [pc, #420]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002628:	e0fd      	b.n	8002826 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800262a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8088 	beq.w	800274c <HAL_RCC_OscConfig+0x56c>
 800263c:	2301      	movs	r3, #1
 800263e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800264e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800265c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	461a      	mov	r2, r3
 8002664:	2301      	movs	r3, #1
 8002666:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff f86a 	bl	8001740 <HAL_GetTick>
 800266c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002672:	f7ff f865 	bl	8001740 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d902      	bls.n	8002688 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	f000 bde2 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
 8002688:	2302      	movs	r3, #2
 800268a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800269a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d102      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4d8>
 80026b2:	4b45      	ldr	r3, [pc, #276]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	e013      	b.n	80026e0 <HAL_RCC_OscConfig+0x500>
 80026b8:	2302      	movs	r3, #2
 80026ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026ca:	2302      	movs	r3, #2
 80026cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026d4:	fa93 f3a3 	rbit	r3, r3
 80026d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026dc:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2202      	movs	r2, #2
 80026e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026ea:	fa92 f2a2 	rbit	r2, r2
 80026ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80026f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80026f6:	fab2 f282 	clz	r2, r2
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f042 0220 	orr.w	r2, r2, #32
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	f002 021f 	and.w	r2, r2, #31
 8002706:	2101      	movs	r1, #1
 8002708:	fa01 f202 	lsl.w	r2, r1, r2
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0af      	beq.n	8002672 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002712:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	21f8      	movs	r1, #248	; 0xf8
 8002728:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002730:	fa91 f1a1 	rbit	r1, r1
 8002734:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002738:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800273c:	fab1 f181 	clz	r1, r1
 8002740:	b2c9      	uxtb	r1, r1
 8002742:	408b      	lsls	r3, r1
 8002744:	4920      	ldr	r1, [pc, #128]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
 800274a:	e06c      	b.n	8002826 <HAL_RCC_OscConfig+0x646>
 800274c:	2301      	movs	r3, #1
 800274e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800275e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800276c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	461a      	mov	r2, r3
 8002774:	2300      	movs	r3, #0
 8002776:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe ffe2 	bl	8001740 <HAL_GetTick>
 800277c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002782:	f7fe ffdd 	bl	8001740 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d902      	bls.n	8002798 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	f000 bd5a 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
 8002798:	2302      	movs	r3, #2
 800279a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d104      	bne.n	80027cc <HAL_RCC_OscConfig+0x5ec>
 80027c2:	4b01      	ldr	r3, [pc, #4]	; (80027c8 <HAL_RCC_OscConfig+0x5e8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	e015      	b.n	80027f4 <HAL_RCC_OscConfig+0x614>
 80027c8:	40021000 	.word	0x40021000
 80027cc:	2302      	movs	r3, #2
 80027ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027de:	2302      	movs	r3, #2
 80027e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027e8:	fa93 f3a3 	rbit	r3, r3
 80027ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027f0:	4bc8      	ldr	r3, [pc, #800]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2202      	movs	r2, #2
 80027f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80027fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027fe:	fa92 f2a2 	rbit	r2, r2
 8002802:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002806:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800280a:	fab2 f282 	clz	r2, r2
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	f042 0220 	orr.w	r2, r2, #32
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f002 021f 	and.w	r2, r2, #31
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f202 	lsl.w	r2, r1, r2
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1ad      	bne.n	8002782 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8110 	beq.w	8002a5c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d079      	beq.n	8002940 <HAL_RCC_OscConfig+0x760>
 800284c:	2301      	movs	r3, #1
 800284e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800285e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	fab3 f383 	clz	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	4bab      	ldr	r3, [pc, #684]	; (8002b18 <HAL_RCC_OscConfig+0x938>)
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	461a      	mov	r2, r3
 8002872:	2301      	movs	r3, #1
 8002874:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7fe ff63 	bl	8001740 <HAL_GetTick>
 800287a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002880:	f7fe ff5e 	bl	8001740 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d902      	bls.n	8002896 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	f000 bcdb 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028b0:	2202      	movs	r2, #2
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	fa93 f2a3 	rbit	r2, r3
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028d4:	2202      	movs	r2, #2
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	fa93 f2a3 	rbit	r2, r3
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f0:	4b88      	ldr	r3, [pc, #544]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 80028f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80028fc:	2102      	movs	r1, #2
 80028fe:	6019      	str	r1, [r3, #0]
 8002900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002904:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	fa93 f1a3 	rbit	r1, r3
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002916:	6019      	str	r1, [r3, #0]
  return result;
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	4013      	ands	r3, r2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0a0      	beq.n	8002880 <HAL_RCC_OscConfig+0x6a0>
 800293e:	e08d      	b.n	8002a5c <HAL_RCC_OscConfig+0x87c>
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	fa93 f2a3 	rbit	r2, r3
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002962:	601a      	str	r2, [r3, #0]
  return result;
 8002964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002968:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800296c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	4b68      	ldr	r3, [pc, #416]	; (8002b18 <HAL_RCC_OscConfig+0x938>)
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	461a      	mov	r2, r3
 800297e:	2300      	movs	r3, #0
 8002980:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7fe fedd 	bl	8001740 <HAL_GetTick>
 8002986:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298c:	f7fe fed8 	bl	8001740 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d902      	bls.n	80029a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	f000 bc55 	b.w	800324c <HAL_RCC_OscConfig+0x106c>
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029aa:	2202      	movs	r2, #2
 80029ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029f2:	2202      	movs	r2, #2
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fa93 f2a3 	rbit	r2, r3
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0e:	4b41      	ldr	r3, [pc, #260]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	6019      	str	r1, [r3, #0]
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f1a3 	rbit	r1, r3
 8002a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a34:	6019      	str	r1, [r3, #0]
  return result;
 8002a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d197      	bne.n	800298c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 81a1 	beq.w	8002db4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a78:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d116      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	61d3      	str	r3, [r2, #28]
 8002a90:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002aaa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <HAL_RCC_OscConfig+0x93c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11a      	bne.n	8002af4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_RCC_OscConfig+0x93c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a16      	ldr	r2, [pc, #88]	; (8002b1c <HAL_RCC_OscConfig+0x93c>)
 8002ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aca:	f7fe fe39 	bl	8001740 <HAL_GetTick>
 8002ace:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	e009      	b.n	8002ae8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad4:	f7fe fe34 	bl	8001740 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	; 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e3b1      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_RCC_OscConfig+0x93c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ef      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d10d      	bne.n	8002b20 <HAL_RCC_OscConfig+0x940>
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4a02      	ldr	r2, [pc, #8]	; (8002b14 <HAL_RCC_OscConfig+0x934>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6213      	str	r3, [r2, #32]
 8002b10:	e03c      	b.n	8002b8c <HAL_RCC_OscConfig+0x9ac>
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	10908120 	.word	0x10908120
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10c      	bne.n	8002b4a <HAL_RCC_OscConfig+0x96a>
 8002b30:	4bc1      	ldr	r3, [pc, #772]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	4ac0      	ldr	r2, [pc, #768]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	6213      	str	r3, [r2, #32]
 8002b3c:	4bbe      	ldr	r3, [pc, #760]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4abd      	ldr	r2, [pc, #756]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b42:	f023 0304 	bic.w	r3, r3, #4
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	e020      	b.n	8002b8c <HAL_RCC_OscConfig+0x9ac>
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x994>
 8002b5a:	4bb7      	ldr	r3, [pc, #732]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4ab6      	ldr	r2, [pc, #728]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6213      	str	r3, [r2, #32]
 8002b66:	4bb4      	ldr	r3, [pc, #720]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	4ab3      	ldr	r2, [pc, #716]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6213      	str	r3, [r2, #32]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0x9ac>
 8002b74:	4bb0      	ldr	r3, [pc, #704]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4aaf      	ldr	r2, [pc, #700]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6213      	str	r3, [r2, #32]
 8002b80:	4bad      	ldr	r3, [pc, #692]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4aac      	ldr	r2, [pc, #688]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002b86:	f023 0304 	bic.w	r3, r3, #4
 8002b8a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8081 	beq.w	8002ca0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9e:	f7fe fdcf 	bl	8001740 <HAL_GetTick>
 8002ba2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fdca 	bl	8001740 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e345      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
 8002bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bc8:	2202      	movs	r2, #2
 8002bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	fa93 f2a3 	rbit	r2, r3
 8002bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bde:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002bec:	2202      	movs	r2, #2
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	fa93 f2a3 	rbit	r2, r3
 8002bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c06:	601a      	str	r2, [r3, #0]
  return result;
 8002c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002c10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f043 0302 	orr.w	r3, r3, #2
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d102      	bne.n	8002c2c <HAL_RCC_OscConfig+0xa4c>
 8002c26:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	e013      	b.n	8002c54 <HAL_RCC_OscConfig+0xa74>
 8002c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c34:	2202      	movs	r2, #2
 8002c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	fa93 f2a3 	rbit	r2, r3
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c58:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	6011      	str	r1, [r2, #0]
 8002c60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c64:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	fa92 f1a2 	rbit	r1, r2
 8002c6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c76:	6011      	str	r1, [r2, #0]
  return result;
 8002c78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c7c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	fab2 f282 	clz	r2, r2
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	f002 021f 	and.w	r2, r2, #31
 8002c92:	2101      	movs	r1, #1
 8002c94:	fa01 f202 	lsl.w	r2, r1, r2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d084      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x9c8>
 8002c9e:	e07f      	b.n	8002da0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca0:	f7fe fd4e 	bl	8001740 <HAL_GetTick>
 8002ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca8:	e00b      	b.n	8002cc2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7fe fd49 	bl	8001740 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e2c4      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cca:	2202      	movs	r2, #2
 8002ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	fa93 f2a3 	rbit	r2, r3
 8002cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002cee:	2202      	movs	r2, #2
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d08:	601a      	str	r2, [r3, #0]
  return result;
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002d12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f043 0302 	orr.w	r3, r3, #2
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d102      	bne.n	8002d2e <HAL_RCC_OscConfig+0xb4e>
 8002d28:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	e013      	b.n	8002d56 <HAL_RCC_OscConfig+0xb76>
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d36:	2202      	movs	r2, #2
 8002d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	fa93 f2a3 	rbit	r2, r3
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d5a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d5e:	2102      	movs	r1, #2
 8002d60:	6011      	str	r1, [r2, #0]
 8002d62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d66:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	fa92 f1a2 	rbit	r1, r2
 8002d70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d74:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d78:	6011      	str	r1, [r2, #0]
  return result;
 8002d7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d7e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	fab2 f282 	clz	r2, r2
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	f002 021f 	and.w	r2, r2, #31
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d184      	bne.n	8002caa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002da0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8242 	beq.w	800324a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <HAL_RCC_OscConfig+0xc58>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	f000 8213 	beq.w	80031fa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	f040 8162 	bne.w	80030aa <HAL_RCC_OscConfig+0xeca>
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002dee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	fa93 f2a3 	rbit	r2, r3
 8002e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e06:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e0a:	601a      	str	r2, [r3, #0]
  return result;
 8002e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e10:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002e14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	461a      	mov	r2, r3
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fc88 	bl	8001740 <HAL_GetTick>
 8002e30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e34:	e00c      	b.n	8002e50 <HAL_RCC_OscConfig+0xc70>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe fc80 	bl	8001740 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1fd      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
 8002e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e54:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e74:	601a      	str	r2, [r3, #0]
  return result;
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e80:	fab3 f383 	clz	r3, r3
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	095b      	lsrs	r3, r3, #5
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d102      	bne.n	8002e9a <HAL_RCC_OscConfig+0xcba>
 8002e94:	4bb0      	ldr	r3, [pc, #704]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	e027      	b.n	8002eea <HAL_RCC_OscConfig+0xd0a>
 8002e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ea2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	fa93 f2a3 	rbit	r2, r3
 8002eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	fa93 f2a3 	rbit	r2, r3
 8002edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	4b9c      	ldr	r3, [pc, #624]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002ef2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ef6:	6011      	str	r1, [r2, #0]
 8002ef8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002efc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	fa92 f1a2 	rbit	r1, r2
 8002f06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f0a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f0e:	6011      	str	r1, [r2, #0]
  return result;
 8002f10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f14:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	fab2 f282 	clz	r2, r2
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	f042 0220 	orr.w	r2, r2, #32
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	f002 021f 	and.w	r2, r2, #31
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d182      	bne.n	8002e3c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f36:	4b88      	ldr	r3, [pc, #544]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	430b      	orrs	r3, r1
 8002f58:	497f      	ldr	r1, [pc, #508]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
 8002f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f62:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f82:	601a      	str	r2, [r3, #0]
  return result;
 8002f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f88:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f8c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fbcc 	bl	8001740 <HAL_GetTick>
 8002fa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fac:	e009      	b.n	8002fc2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fae:	f7fe fbc7 	bl	8001740 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e144      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	fa93 f2a3 	rbit	r2, r3
 8002fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002fe6:	601a      	str	r2, [r3, #0]
  return result;
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ff0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d102      	bne.n	800300c <HAL_RCC_OscConfig+0xe2c>
 8003006:	4b54      	ldr	r3, [pc, #336]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e027      	b.n	800305c <HAL_RCC_OscConfig+0xe7c>
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003018:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	fa93 f2a3 	rbit	r2, r3
 8003028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800303a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003060:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003064:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003068:	6011      	str	r1, [r2, #0]
 800306a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800306e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	fa92 f1a2 	rbit	r1, r2
 8003078:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800307c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003080:	6011      	str	r1, [r2, #0]
  return result;
 8003082:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003086:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	fab2 f282 	clz	r2, r2
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	f042 0220 	orr.w	r2, r2, #32
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f002 021f 	and.w	r2, r2, #31
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f202 	lsl.w	r2, r1, r2
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d082      	beq.n	8002fae <HAL_RCC_OscConfig+0xdce>
 80030a8:	e0cf      	b.n	800324a <HAL_RCC_OscConfig+0x106a>
 80030aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	fa93 f2a3 	rbit	r2, r3
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030ce:	601a      	str	r2, [r3, #0]
  return result;
 80030d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80030d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	fab3 f383 	clz	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	461a      	mov	r2, r3
 80030ec:	2300      	movs	r3, #0
 80030ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe fb26 	bl	8001740 <HAL_GetTick>
 80030f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f8:	e009      	b.n	800310e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fe fb21 	bl	8001740 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e09e      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800311a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003120:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	fa93 f2a3 	rbit	r2, r3
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003132:	601a      	str	r2, [r3, #0]
  return result;
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800313c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d104      	bne.n	800315c <HAL_RCC_OscConfig+0xf7c>
 8003152:	4b01      	ldr	r3, [pc, #4]	; (8003158 <HAL_RCC_OscConfig+0xf78>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	e029      	b.n	80031ac <HAL_RCC_OscConfig+0xfcc>
 8003158:	40021000 	.word	0x40021000
 800315c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003160:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003164:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	fa93 f2a3 	rbit	r2, r3
 8003178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800318a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	fa93 f2a3 	rbit	r2, r3
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_RCC_OscConfig+0x1078>)
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031b0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031b8:	6011      	str	r1, [r2, #0]
 80031ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031be:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	fa92 f1a2 	rbit	r1, r2
 80031c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031cc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031d0:	6011      	str	r1, [r2, #0]
  return result;
 80031d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	fab2 f282 	clz	r2, r2
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	f042 0220 	orr.w	r2, r2, #32
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	f002 021f 	and.w	r2, r2, #31
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f202 	lsl.w	r2, r1, r2
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d180      	bne.n	80030fa <HAL_RCC_OscConfig+0xf1a>
 80031f8:	e027      	b.n	800324a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e01e      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800320e:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_RCC_OscConfig+0x1078>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003216:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800321a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800321e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	429a      	cmp	r2, r3
 800322c:	d10b      	bne.n	8003246 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800322e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003232:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003242:	429a      	cmp	r2, r3
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000

0800325c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b09e      	sub	sp, #120	; 0x78
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e162      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b90      	ldr	r3, [pc, #576]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d910      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b8d      	ldr	r3, [pc, #564]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 0207 	bic.w	r2, r3, #7
 800328a:	498b      	ldr	r1, [pc, #556]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b89      	ldr	r3, [pc, #548]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e14a      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b0:	4b82      	ldr	r3, [pc, #520]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	497f      	ldr	r1, [pc, #508]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80dc 	beq.w	8003488 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d13c      	bne.n	8003352 <HAL_RCC_ClockConfig+0xf6>
 80032d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d102      	bne.n	8003302 <HAL_RCC_ClockConfig+0xa6>
 80032fc:	4b6f      	ldr	r3, [pc, #444]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	e00f      	b.n	8003322 <HAL_RCC_ClockConfig+0xc6>
 8003302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003306:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	667b      	str	r3, [r7, #100]	; 0x64
 8003310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003314:	663b      	str	r3, [r7, #96]	; 0x60
 8003316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800331e:	4b67      	ldr	r3, [pc, #412]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003326:	65ba      	str	r2, [r7, #88]	; 0x58
 8003328:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800332a:	fa92 f2a2 	rbit	r2, r2
 800332e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003330:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003332:	fab2 f282 	clz	r2, r2
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	f042 0220 	orr.w	r2, r2, #32
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f002 021f 	and.w	r2, r2, #31
 8003342:	2101      	movs	r1, #1
 8003344:	fa01 f202 	lsl.w	r2, r1, r2
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d17b      	bne.n	8003446 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0f3      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d13c      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x178>
 800335a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <HAL_RCC_ClockConfig+0x128>
 800337e:	4b4f      	ldr	r3, [pc, #316]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	e00f      	b.n	80033a4 <HAL_RCC_ClockConfig+0x148>
 8003384:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003388:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	647b      	str	r3, [r7, #68]	; 0x44
 8003392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003396:	643b      	str	r3, [r7, #64]	; 0x40
 8003398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a0:	4b46      	ldr	r3, [pc, #280]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80033aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ac:	fa92 f2a2 	rbit	r2, r2
 80033b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b4:	fab2 f282 	clz	r2, r2
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f042 0220 	orr.w	r2, r2, #32
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	f002 021f 	and.w	r2, r2, #31
 80033c4:	2101      	movs	r1, #1
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d13a      	bne.n	8003446 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0b2      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
 80033d4:	2302      	movs	r3, #2
 80033d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d102      	bne.n	80033fc <HAL_RCC_ClockConfig+0x1a0>
 80033f6:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	e00d      	b.n	8003418 <HAL_RCC_ClockConfig+0x1bc>
 80033fc:	2302      	movs	r3, #2
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
 8003408:	2302      	movs	r3, #2
 800340a:	623b      	str	r3, [r7, #32]
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2202      	movs	r2, #2
 800341a:	61ba      	str	r2, [r7, #24]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	fa92 f2a2 	rbit	r2, r2
 8003422:	617a      	str	r2, [r7, #20]
  return result;
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	fab2 f282 	clz	r2, r2
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f042 0220 	orr.w	r2, r2, #32
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	f002 021f 	and.w	r2, r2, #31
 8003436:	2101      	movs	r1, #1
 8003438:	fa01 f202 	lsl.w	r2, r1, r2
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e079      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f023 0203 	bic.w	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	491a      	ldr	r1, [pc, #104]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003458:	f7fe f972 	bl	8001740 <HAL_GetTick>
 800345c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	e00a      	b.n	8003476 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003460:	f7fe f96e 	bl	8001740 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e061      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_RCC_ClockConfig+0x260>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 020c 	and.w	r2, r3, #12
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	429a      	cmp	r2, r3
 8003486:	d1eb      	bne.n	8003460 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d214      	bcs.n	80034c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 0207 	bic.w	r2, r3, #7
 800349e:	4906      	ldr	r1, [pc, #24]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCC_ClockConfig+0x25c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e040      	b.n	800353a <HAL_RCC_ClockConfig+0x2de>
 80034b8:	40022000 	.word	0x40022000
 80034bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	491a      	ldr	r1, [pc, #104]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4912      	ldr	r1, [pc, #72]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034fe:	f000 f829 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003502:	4601      	mov	r1, r0
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_RCC_ClockConfig+0x2e8>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800350c:	22f0      	movs	r2, #240	; 0xf0
 800350e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	fa92 f2a2 	rbit	r2, r2
 8003516:	60fa      	str	r2, [r7, #12]
  return result;
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	fab2 f282 	clz	r2, r2
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	40d3      	lsrs	r3, r2
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_RCC_ClockConfig+0x2ec>)
 8003524:	5cd3      	ldrb	r3, [r2, r3]
 8003526:	fa21 f303 	lsr.w	r3, r1, r3
 800352a:	4a08      	ldr	r2, [pc, #32]	; (800354c <HAL_RCC_ClockConfig+0x2f0>)
 800352c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800352e:	4b08      	ldr	r3, [pc, #32]	; (8003550 <HAL_RCC_ClockConfig+0x2f4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe f8c0 	bl	80016b8 <HAL_InitTick>
  
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3778      	adds	r7, #120	; 0x78
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	08007930 	.word	0x08007930
 800354c:	20000090 	.word	0x20000090
 8003550:	20000094 	.word	0x20000094

08003554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b08b      	sub	sp, #44	; 0x2c
 8003558:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800356e:	4b29      	ldr	r3, [pc, #164]	; (8003614 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b04      	cmp	r3, #4
 800357c:	d002      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x30>
 800357e:	2b08      	cmp	r3, #8
 8003580:	d003      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x36>
 8003582:	e03c      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003584:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003586:	623b      	str	r3, [r7, #32]
      break;
 8003588:	e03c      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003590:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003594:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	fa92 f2a2 	rbit	r2, r2
 800359c:	607a      	str	r2, [r7, #4]
  return result;
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	fab2 f282 	clz	r2, r2
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	40d3      	lsrs	r3, r2
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <HAL_RCC_GetSysClockFreq+0xc8>)
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	220f      	movs	r2, #15
 80035b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	fa92 f2a2 	rbit	r2, r2
 80035c0:	60fa      	str	r2, [r7, #12]
  return result;
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	fab2 f282 	clz	r2, r2
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	40d3      	lsrs	r3, r2
 80035cc:	4a14      	ldr	r2, [pc, #80]	; (8003620 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035dc:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
 80035ec:	e004      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	623b      	str	r3, [r7, #32]
      break;
 80035fc:	e002      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003600:	623b      	str	r3, [r7, #32]
      break;
 8003602:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003604:	6a3b      	ldr	r3, [r7, #32]
}
 8003606:	4618      	mov	r0, r3
 8003608:	372c      	adds	r7, #44	; 0x2c
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	007a1200 	.word	0x007a1200
 800361c:	08007948 	.word	0x08007948
 8003620:	08007958 	.word	0x08007958
 8003624:	003d0900 	.word	0x003d0900

08003628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <HAL_RCC_GetHCLKFreq+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000090 	.word	0x20000090

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003646:	f7ff ffef 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 800364a:	4601      	mov	r1, r0
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003654:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003658:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	fa92 f2a2 	rbit	r2, r2
 8003660:	603a      	str	r2, [r7, #0]
  return result;
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	fab2 f282 	clz	r2, r2
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	40d3      	lsrs	r3, r2
 800366c:	4a04      	ldr	r2, [pc, #16]	; (8003680 <HAL_RCC_GetPCLK1Freq+0x40>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000
 8003680:	08007940 	.word	0x08007940

08003684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800368a:	f7ff ffcd 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 800368e:	4601      	mov	r1, r0
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003698:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800369c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	fa92 f2a2 	rbit	r2, r2
 80036a4:	603a      	str	r2, [r7, #0]
  return result;
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	fab2 f282 	clz	r2, r2
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	40d3      	lsrs	r3, r2
 80036b0:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	08007940 	.word	0x08007940

080036c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b092      	sub	sp, #72	; 0x48
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80036d8:	2300      	movs	r3, #0
 80036da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80d4 	beq.w	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ec:	4b4e      	ldr	r3, [pc, #312]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10e      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f8:	4b4b      	ldr	r3, [pc, #300]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	4a4a      	ldr	r2, [pc, #296]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	61d3      	str	r3, [r2, #28]
 8003704:	4b48      	ldr	r3, [pc, #288]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003716:	4b45      	ldr	r3, [pc, #276]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d118      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003722:	4b42      	ldr	r3, [pc, #264]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a41      	ldr	r2, [pc, #260]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372e:	f7fe f807 	bl	8001740 <HAL_GetTick>
 8003732:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	e008      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003736:	f7fe f803 	bl	8001740 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b64      	cmp	r3, #100	; 0x64
 8003742:	d901      	bls.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e169      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	4b38      	ldr	r3, [pc, #224]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003754:	4b34      	ldr	r3, [pc, #208]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8084 	beq.w	800386e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003770:	429a      	cmp	r2, r3
 8003772:	d07c      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003774:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800377e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003782:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	461a      	mov	r2, r3
 800379e:	2301      	movs	r3, #1
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037aa:	fa93 f3a3 	rbit	r3, r3
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037b2:	fab3 f383 	clz	r3, r3
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	461a      	mov	r2, r3
 80037c2:	2300      	movs	r3, #0
 80037c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037c6:	4a18      	ldr	r2, [pc, #96]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d04b      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fd ffb3 	bl	8001740 <HAL_GetTick>
 80037da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037de:	f7fd ffaf 	bl	8001740 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e113      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80037f4:	2302      	movs	r3, #2
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003800:	2302      	movs	r3, #2
 8003802:	623b      	str	r3, [r7, #32]
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	61fb      	str	r3, [r7, #28]
  return result;
 800380c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d108      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003822:	4b01      	ldr	r3, [pc, #4]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	e00d      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003828:	40021000 	.word	0x40021000
 800382c:	40007000 	.word	0x40007000
 8003830:	10908100 	.word	0x10908100
 8003834:	2302      	movs	r3, #2
 8003836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	4b78      	ldr	r3, [pc, #480]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	2202      	movs	r2, #2
 8003846:	613a      	str	r2, [r7, #16]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	fa92 f2a2 	rbit	r2, r2
 800384e:	60fa      	str	r2, [r7, #12]
  return result;
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	fab2 f282 	clz	r2, r2
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	f002 021f 	and.w	r2, r2, #31
 8003862:	2101      	movs	r1, #1
 8003864:	fa01 f202 	lsl.w	r2, r1, r2
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0b7      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800386e:	4b6d      	ldr	r3, [pc, #436]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	496a      	ldr	r1, [pc, #424]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800387c:	4313      	orrs	r3, r2
 800387e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003880:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003888:	4b66      	ldr	r3, [pc, #408]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	4a65      	ldr	r2, [pc, #404]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800388e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003892:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038a0:	4b60      	ldr	r3, [pc, #384]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	f023 0203 	bic.w	r2, r3, #3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	495d      	ldr	r1, [pc, #372]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038be:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	4956      	ldr	r1, [pc, #344]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038dc:	4b51      	ldr	r3, [pc, #324]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	494e      	ldr	r1, [pc, #312]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038fa:	4b4a      	ldr	r3, [pc, #296]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f023 0210 	bic.w	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	4947      	ldr	r1, [pc, #284]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003918:	4b42      	ldr	r3, [pc, #264]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	493f      	ldr	r1, [pc, #252]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003936:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f023 0220 	bic.w	r2, r3, #32
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4938      	ldr	r1, [pc, #224]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003944:	4313      	orrs	r3, r2
 8003946:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003954:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	4930      	ldr	r1, [pc, #192]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003962:	4313      	orrs	r3, r2
 8003964:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003972:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	4929      	ldr	r1, [pc, #164]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003980:	4313      	orrs	r3, r2
 8003982:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	4921      	ldr	r1, [pc, #132]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039ae:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	491a      	ldr	r1, [pc, #104]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80039cc:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	4912      	ldr	r1, [pc, #72]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	490b      	ldr	r1, [pc, #44]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a14:	4903      	ldr	r1, [pc, #12]	; (8003a24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3748      	adds	r7, #72	; 0x48
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000

08003a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e09d      	b.n	8003b76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4a:	d009      	beq.n	8003a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]
 8003a52:	e005      	b.n	8003a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd fc20 	bl	80012c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2202      	movs	r2, #2
 8003a84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003aa0:	d902      	bls.n	8003aa8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	e002      	b.n	8003aae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ab6:	d007      	beq.n	8003ac8 <HAL_SPI_Init+0xa0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	ea42 0103 	orr.w	r1, r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	f003 0204 	and.w	r2, r3, #4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b44:	ea42 0103 	orr.w	r1, r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e049      	b.n	8003c24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7fd fbcd 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f000 fd27 	bl	8004610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d001      	beq.n	8003c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e04a      	b.n	8003cda <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2202      	movs	r2, #2
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a21      	ldr	r2, [pc, #132]	; (8003ce8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d018      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x6c>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6e:	d013      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x6c>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1d      	ldr	r2, [pc, #116]	; (8003cec <HAL_TIM_Base_Start_IT+0xc0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00e      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x6c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1c      	ldr	r2, [pc, #112]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d009      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x6c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d004      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x6c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d115      	bne.n	8003cc4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	4b17      	ldr	r3, [pc, #92]	; (8003cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b06      	cmp	r3, #6
 8003ca8:	d015      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0xaa>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb0:	d011      	beq.n	8003cd6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0201 	orr.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc2:	e008      	b.n	8003cd6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e000      	b.n	8003cd8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40000800 	.word	0x40000800
 8003cf4:	40013400 	.word	0x40013400
 8003cf8:	40014000 	.word	0x40014000
 8003cfc:	00010007 	.word	0x00010007

08003d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e049      	b.n	8003da6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f841 	bl	8003dae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4610      	mov	r0, r2
 8003d40:	f000 fc66 	bl	8004610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d109      	bne.n	8003de8 <HAL_TIM_PWM_Start+0x24>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	bf14      	ite	ne
 8003de0:	2301      	movne	r3, #1
 8003de2:	2300      	moveq	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	e03c      	b.n	8003e62 <HAL_TIM_PWM_Start+0x9e>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d109      	bne.n	8003e02 <HAL_TIM_PWM_Start+0x3e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	bf14      	ite	ne
 8003dfa:	2301      	movne	r3, #1
 8003dfc:	2300      	moveq	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	e02f      	b.n	8003e62 <HAL_TIM_PWM_Start+0x9e>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d109      	bne.n	8003e1c <HAL_TIM_PWM_Start+0x58>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	bf14      	ite	ne
 8003e14:	2301      	movne	r3, #1
 8003e16:	2300      	moveq	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	e022      	b.n	8003e62 <HAL_TIM_PWM_Start+0x9e>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b0c      	cmp	r3, #12
 8003e20:	d109      	bne.n	8003e36 <HAL_TIM_PWM_Start+0x72>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	bf14      	ite	ne
 8003e2e:	2301      	movne	r3, #1
 8003e30:	2300      	moveq	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	e015      	b.n	8003e62 <HAL_TIM_PWM_Start+0x9e>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d109      	bne.n	8003e50 <HAL_TIM_PWM_Start+0x8c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	bf14      	ite	ne
 8003e48:	2301      	movne	r3, #1
 8003e4a:	2300      	moveq	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	e008      	b.n	8003e62 <HAL_TIM_PWM_Start+0x9e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e097      	b.n	8003f9a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_PWM_Start+0xb6>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e78:	e023      	b.n	8003ec2 <HAL_TIM_PWM_Start+0xfe>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d104      	bne.n	8003e8a <HAL_TIM_PWM_Start+0xc6>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e88:	e01b      	b.n	8003ec2 <HAL_TIM_PWM_Start+0xfe>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d104      	bne.n	8003e9a <HAL_TIM_PWM_Start+0xd6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e98:	e013      	b.n	8003ec2 <HAL_TIM_PWM_Start+0xfe>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	d104      	bne.n	8003eaa <HAL_TIM_PWM_Start+0xe6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ea8:	e00b      	b.n	8003ec2 <HAL_TIM_PWM_Start+0xfe>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d104      	bne.n	8003eba <HAL_TIM_PWM_Start+0xf6>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb8:	e003      	b.n	8003ec2 <HAL_TIM_PWM_Start+0xfe>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 ffa0 	bl	8004e10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a33      	ldr	r2, [pc, #204]	; (8003fa4 <HAL_TIM_PWM_Start+0x1e0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x13e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a32      	ldr	r2, [pc, #200]	; (8003fa8 <HAL_TIM_PWM_Start+0x1e4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00e      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x13e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a30      	ldr	r2, [pc, #192]	; (8003fac <HAL_TIM_PWM_Start+0x1e8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x13e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <HAL_TIM_PWM_Start+0x1ec>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_TIM_PWM_Start+0x13e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a2d      	ldr	r2, [pc, #180]	; (8003fb4 <HAL_TIM_PWM_Start+0x1f0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d101      	bne.n	8003f06 <HAL_TIM_PWM_Start+0x142>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <HAL_TIM_PWM_Start+0x144>
 8003f06:	2300      	movs	r3, #0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a20      	ldr	r2, [pc, #128]	; (8003fa4 <HAL_TIM_PWM_Start+0x1e0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d018      	beq.n	8003f58 <HAL_TIM_PWM_Start+0x194>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d013      	beq.n	8003f58 <HAL_TIM_PWM_Start+0x194>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a20      	ldr	r2, [pc, #128]	; (8003fb8 <HAL_TIM_PWM_Start+0x1f4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00e      	beq.n	8003f58 <HAL_TIM_PWM_Start+0x194>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <HAL_TIM_PWM_Start+0x1f8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d009      	beq.n	8003f58 <HAL_TIM_PWM_Start+0x194>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <HAL_TIM_PWM_Start+0x1e4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <HAL_TIM_PWM_Start+0x194>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a16      	ldr	r2, [pc, #88]	; (8003fac <HAL_TIM_PWM_Start+0x1e8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d115      	bne.n	8003f84 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <HAL_TIM_PWM_Start+0x1fc>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b06      	cmp	r3, #6
 8003f68:	d015      	beq.n	8003f96 <HAL_TIM_PWM_Start+0x1d2>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d011      	beq.n	8003f96 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0201 	orr.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f82:	e008      	b.n	8003f96 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e000      	b.n	8003f98 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40012c00 	.word	0x40012c00
 8003fa8:	40013400 	.word	0x40013400
 8003fac:	40014000 	.word	0x40014000
 8003fb0:	40014400 	.word	0x40014400
 8003fb4:	40014800 	.word	0x40014800
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	00010007 	.word	0x00010007

08003fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d122      	bne.n	8004020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d11b      	bne.n	8004020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0202 	mvn.w	r2, #2
 8003ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fae3 	bl	80045d2 <HAL_TIM_IC_CaptureCallback>
 800400c:	e005      	b.n	800401a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fad5 	bl	80045be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fae6 	bl	80045e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b04      	cmp	r3, #4
 800402c:	d122      	bne.n	8004074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b04      	cmp	r3, #4
 800403a:	d11b      	bne.n	8004074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0204 	mvn.w	r2, #4
 8004044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fab9 	bl	80045d2 <HAL_TIM_IC_CaptureCallback>
 8004060:	e005      	b.n	800406e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 faab 	bl	80045be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fabc 	bl	80045e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b08      	cmp	r3, #8
 8004080:	d122      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0308 	and.w	r3, r3, #8
 800408c:	2b08      	cmp	r3, #8
 800408e:	d11b      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0208 	mvn.w	r2, #8
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2204      	movs	r2, #4
 800409e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa8f 	bl	80045d2 <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa81 	bl	80045be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fa92 	bl	80045e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d122      	bne.n	800411c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d11b      	bne.n	800411c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0210 	mvn.w	r2, #16
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2208      	movs	r2, #8
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa65 	bl	80045d2 <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fa57 	bl	80045be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fa68 	bl	80045e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b01      	cmp	r3, #1
 8004128:	d10e      	bne.n	8004148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d107      	bne.n	8004148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0201 	mvn.w	r2, #1
 8004140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fc ff6c 	bl	8001020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b80      	cmp	r3, #128	; 0x80
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b80      	cmp	r3, #128	; 0x80
 8004162:	d107      	bne.n	8004174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fefe 	bl	8004f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004182:	d10e      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b80      	cmp	r3, #128	; 0x80
 8004190:	d107      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800419a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fef1 	bl	8004f84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d10e      	bne.n	80041ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b40      	cmp	r3, #64	; 0x40
 80041bc:	d107      	bne.n	80041ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fa16 	bl	80045fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d10e      	bne.n	80041fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0320 	and.w	r3, r3, #32
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d107      	bne.n	80041fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f06f 0220 	mvn.w	r2, #32
 80041f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 feb1 	bl	8004f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800421e:	2302      	movs	r3, #2
 8004220:	e0ff      	b.n	8004422 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b14      	cmp	r3, #20
 800422e:	f200 80f0 	bhi.w	8004412 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800428d 	.word	0x0800428d
 800423c:	08004413 	.word	0x08004413
 8004240:	08004413 	.word	0x08004413
 8004244:	08004413 	.word	0x08004413
 8004248:	080042cd 	.word	0x080042cd
 800424c:	08004413 	.word	0x08004413
 8004250:	08004413 	.word	0x08004413
 8004254:	08004413 	.word	0x08004413
 8004258:	0800430f 	.word	0x0800430f
 800425c:	08004413 	.word	0x08004413
 8004260:	08004413 	.word	0x08004413
 8004264:	08004413 	.word	0x08004413
 8004268:	0800434f 	.word	0x0800434f
 800426c:	08004413 	.word	0x08004413
 8004270:	08004413 	.word	0x08004413
 8004274:	08004413 	.word	0x08004413
 8004278:	08004391 	.word	0x08004391
 800427c:	08004413 	.word	0x08004413
 8004280:	08004413 	.word	0x08004413
 8004284:	08004413 	.word	0x08004413
 8004288:	080043d1 	.word	0x080043d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fa4c 	bl	8004730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0208 	orr.w	r2, r2, #8
 80042a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0204 	bic.w	r2, r2, #4
 80042b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6999      	ldr	r1, [r3, #24]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	619a      	str	r2, [r3, #24]
      break;
 80042ca:	e0a5      	b.n	8004418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fabc 	bl	8004850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	021a      	lsls	r2, r3, #8
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	619a      	str	r2, [r3, #24]
      break;
 800430c:	e084      	b.n	8004418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fb25 	bl	8004964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0208 	orr.w	r2, r2, #8
 8004328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0204 	bic.w	r2, r2, #4
 8004338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69d9      	ldr	r1, [r3, #28]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	61da      	str	r2, [r3, #28]
      break;
 800434c:	e064      	b.n	8004418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fb8d 	bl	8004a74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	021a      	lsls	r2, r3, #8
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	61da      	str	r2, [r3, #28]
      break;
 800438e:	e043      	b.n	8004418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 fbd6 	bl	8004b48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0208 	orr.w	r2, r2, #8
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0204 	bic.w	r2, r2, #4
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043ce:	e023      	b.n	8004418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fc1a 	bl	8004c10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	021a      	lsls	r2, r3, #8
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004410:	e002      	b.n	8004418 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
      break;
 8004416:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004420:	7dfb      	ldrb	r3, [r7, #23]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop

0800442c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_TIM_ConfigClockSource+0x1c>
 8004444:	2302      	movs	r3, #2
 8004446:	e0b6      	b.n	80045b6 <HAL_TIM_ConfigClockSource+0x18a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800446a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004484:	d03e      	beq.n	8004504 <HAL_TIM_ConfigClockSource+0xd8>
 8004486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448a:	f200 8087 	bhi.w	800459c <HAL_TIM_ConfigClockSource+0x170>
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004492:	f000 8086 	beq.w	80045a2 <HAL_TIM_ConfigClockSource+0x176>
 8004496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449a:	d87f      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x170>
 800449c:	2b70      	cmp	r3, #112	; 0x70
 800449e:	d01a      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0xaa>
 80044a0:	2b70      	cmp	r3, #112	; 0x70
 80044a2:	d87b      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x170>
 80044a4:	2b60      	cmp	r3, #96	; 0x60
 80044a6:	d050      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x11e>
 80044a8:	2b60      	cmp	r3, #96	; 0x60
 80044aa:	d877      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x170>
 80044ac:	2b50      	cmp	r3, #80	; 0x50
 80044ae:	d03c      	beq.n	800452a <HAL_TIM_ConfigClockSource+0xfe>
 80044b0:	2b50      	cmp	r3, #80	; 0x50
 80044b2:	d873      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x170>
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d058      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x13e>
 80044b8:	2b40      	cmp	r3, #64	; 0x40
 80044ba:	d86f      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x170>
 80044bc:	2b30      	cmp	r3, #48	; 0x30
 80044be:	d064      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15e>
 80044c0:	2b30      	cmp	r3, #48	; 0x30
 80044c2:	d86b      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x170>
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d060      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15e>
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d867      	bhi.n	800459c <HAL_TIM_ConfigClockSource+0x170>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d05c      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15e>
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d05a      	beq.n	800458a <HAL_TIM_ConfigClockSource+0x15e>
 80044d4:	e062      	b.n	800459c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6899      	ldr	r1, [r3, #8]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f000 fc73 	bl	8004dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	609a      	str	r2, [r3, #8]
      break;
 8004502:	e04f      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	6899      	ldr	r1, [r3, #8]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f000 fc5c 	bl	8004dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004526:	609a      	str	r2, [r3, #8]
      break;
 8004528:	e03c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6859      	ldr	r1, [r3, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	461a      	mov	r2, r3
 8004538:	f000 fbd0 	bl	8004cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2150      	movs	r1, #80	; 0x50
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fc29 	bl	8004d9a <TIM_ITRx_SetConfig>
      break;
 8004548:	e02c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6859      	ldr	r1, [r3, #4]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	461a      	mov	r2, r3
 8004558:	f000 fbef 	bl	8004d3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2160      	movs	r1, #96	; 0x60
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fc19 	bl	8004d9a <TIM_ITRx_SetConfig>
      break;
 8004568:	e01c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	461a      	mov	r2, r3
 8004578:	f000 fbb0 	bl	8004cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2140      	movs	r1, #64	; 0x40
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fc09 	bl	8004d9a <TIM_ITRx_SetConfig>
      break;
 8004588:	e00c      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f000 fc00 	bl	8004d9a <TIM_ITRx_SetConfig>
      break;
 800459a:	e003      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
      break;
 80045a0:	e000      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80045a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a3c      	ldr	r2, [pc, #240]	; (8004714 <TIM_Base_SetConfig+0x104>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00f      	beq.n	8004648 <TIM_Base_SetConfig+0x38>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462e:	d00b      	beq.n	8004648 <TIM_Base_SetConfig+0x38>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a39      	ldr	r2, [pc, #228]	; (8004718 <TIM_Base_SetConfig+0x108>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d007      	beq.n	8004648 <TIM_Base_SetConfig+0x38>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a38      	ldr	r2, [pc, #224]	; (800471c <TIM_Base_SetConfig+0x10c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d003      	beq.n	8004648 <TIM_Base_SetConfig+0x38>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a37      	ldr	r2, [pc, #220]	; (8004720 <TIM_Base_SetConfig+0x110>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d108      	bne.n	800465a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a2d      	ldr	r2, [pc, #180]	; (8004714 <TIM_Base_SetConfig+0x104>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01b      	beq.n	800469a <TIM_Base_SetConfig+0x8a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004668:	d017      	beq.n	800469a <TIM_Base_SetConfig+0x8a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2a      	ldr	r2, [pc, #168]	; (8004718 <TIM_Base_SetConfig+0x108>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <TIM_Base_SetConfig+0x8a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a29      	ldr	r2, [pc, #164]	; (800471c <TIM_Base_SetConfig+0x10c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00f      	beq.n	800469a <TIM_Base_SetConfig+0x8a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a28      	ldr	r2, [pc, #160]	; (8004720 <TIM_Base_SetConfig+0x110>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00b      	beq.n	800469a <TIM_Base_SetConfig+0x8a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a27      	ldr	r2, [pc, #156]	; (8004724 <TIM_Base_SetConfig+0x114>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <TIM_Base_SetConfig+0x8a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a26      	ldr	r2, [pc, #152]	; (8004728 <TIM_Base_SetConfig+0x118>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d003      	beq.n	800469a <TIM_Base_SetConfig+0x8a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a25      	ldr	r2, [pc, #148]	; (800472c <TIM_Base_SetConfig+0x11c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d108      	bne.n	80046ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a10      	ldr	r2, [pc, #64]	; (8004714 <TIM_Base_SetConfig+0x104>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00f      	beq.n	80046f8 <TIM_Base_SetConfig+0xe8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a11      	ldr	r2, [pc, #68]	; (8004720 <TIM_Base_SetConfig+0x110>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00b      	beq.n	80046f8 <TIM_Base_SetConfig+0xe8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a10      	ldr	r2, [pc, #64]	; (8004724 <TIM_Base_SetConfig+0x114>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_Base_SetConfig+0xe8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a0f      	ldr	r2, [pc, #60]	; (8004728 <TIM_Base_SetConfig+0x118>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_Base_SetConfig+0xe8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0e      	ldr	r2, [pc, #56]	; (800472c <TIM_Base_SetConfig+0x11c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d103      	bne.n	8004700 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	615a      	str	r2, [r3, #20]
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40013400 	.word	0x40013400
 8004724:	40014000 	.word	0x40014000
 8004728:	40014400 	.word	0x40014400
 800472c:	40014800 	.word	0x40014800

08004730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0201 	bic.w	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0303 	bic.w	r3, r3, #3
 800476a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 0302 	bic.w	r3, r3, #2
 800477c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a2c      	ldr	r2, [pc, #176]	; (800483c <TIM_OC1_SetConfig+0x10c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00f      	beq.n	80047b0 <TIM_OC1_SetConfig+0x80>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a2b      	ldr	r2, [pc, #172]	; (8004840 <TIM_OC1_SetConfig+0x110>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00b      	beq.n	80047b0 <TIM_OC1_SetConfig+0x80>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a2a      	ldr	r2, [pc, #168]	; (8004844 <TIM_OC1_SetConfig+0x114>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d007      	beq.n	80047b0 <TIM_OC1_SetConfig+0x80>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a29      	ldr	r2, [pc, #164]	; (8004848 <TIM_OC1_SetConfig+0x118>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d003      	beq.n	80047b0 <TIM_OC1_SetConfig+0x80>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a28      	ldr	r2, [pc, #160]	; (800484c <TIM_OC1_SetConfig+0x11c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d10c      	bne.n	80047ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0308 	bic.w	r3, r3, #8
 80047b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f023 0304 	bic.w	r3, r3, #4
 80047c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a1b      	ldr	r2, [pc, #108]	; (800483c <TIM_OC1_SetConfig+0x10c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00f      	beq.n	80047f2 <TIM_OC1_SetConfig+0xc2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1a      	ldr	r2, [pc, #104]	; (8004840 <TIM_OC1_SetConfig+0x110>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <TIM_OC1_SetConfig+0xc2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a19      	ldr	r2, [pc, #100]	; (8004844 <TIM_OC1_SetConfig+0x114>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <TIM_OC1_SetConfig+0xc2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a18      	ldr	r2, [pc, #96]	; (8004848 <TIM_OC1_SetConfig+0x118>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <TIM_OC1_SetConfig+0xc2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a17      	ldr	r2, [pc, #92]	; (800484c <TIM_OC1_SetConfig+0x11c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d111      	bne.n	8004816 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	621a      	str	r2, [r3, #32]
}
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	40012c00 	.word	0x40012c00
 8004840:	40013400 	.word	0x40013400
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800

08004850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f023 0210 	bic.w	r2, r3, #16
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800487e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0320 	bic.w	r3, r3, #32
 800489e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a28      	ldr	r2, [pc, #160]	; (8004950 <TIM_OC2_SetConfig+0x100>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_OC2_SetConfig+0x6c>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a27      	ldr	r2, [pc, #156]	; (8004954 <TIM_OC2_SetConfig+0x104>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d10d      	bne.n	80048d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <TIM_OC2_SetConfig+0x100>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00f      	beq.n	8004900 <TIM_OC2_SetConfig+0xb0>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <TIM_OC2_SetConfig+0x104>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00b      	beq.n	8004900 <TIM_OC2_SetConfig+0xb0>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <TIM_OC2_SetConfig+0x108>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d007      	beq.n	8004900 <TIM_OC2_SetConfig+0xb0>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a1a      	ldr	r2, [pc, #104]	; (800495c <TIM_OC2_SetConfig+0x10c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <TIM_OC2_SetConfig+0xb0>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a19      	ldr	r2, [pc, #100]	; (8004960 <TIM_OC2_SetConfig+0x110>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d113      	bne.n	8004928 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004906:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800490e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40012c00 	.word	0x40012c00
 8004954:	40013400 	.word	0x40013400
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0303 	bic.w	r3, r3, #3
 800499e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a27      	ldr	r2, [pc, #156]	; (8004a60 <TIM_OC3_SetConfig+0xfc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d003      	beq.n	80049ce <TIM_OC3_SetConfig+0x6a>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a26      	ldr	r2, [pc, #152]	; (8004a64 <TIM_OC3_SetConfig+0x100>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10d      	bne.n	80049ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	021b      	lsls	r3, r3, #8
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049e8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <TIM_OC3_SetConfig+0xfc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00f      	beq.n	8004a12 <TIM_OC3_SetConfig+0xae>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1b      	ldr	r2, [pc, #108]	; (8004a64 <TIM_OC3_SetConfig+0x100>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00b      	beq.n	8004a12 <TIM_OC3_SetConfig+0xae>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1a      	ldr	r2, [pc, #104]	; (8004a68 <TIM_OC3_SetConfig+0x104>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d007      	beq.n	8004a12 <TIM_OC3_SetConfig+0xae>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a19      	ldr	r2, [pc, #100]	; (8004a6c <TIM_OC3_SetConfig+0x108>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_OC3_SetConfig+0xae>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a18      	ldr	r2, [pc, #96]	; (8004a70 <TIM_OC3_SetConfig+0x10c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d113      	bne.n	8004a3a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	621a      	str	r2, [r3, #32]
}
 8004a54:	bf00      	nop
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40013400 	.word	0x40013400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800

08004a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	031b      	lsls	r3, r3, #12
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a18      	ldr	r2, [pc, #96]	; (8004b34 <TIM_OC4_SetConfig+0xc0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00f      	beq.n	8004af8 <TIM_OC4_SetConfig+0x84>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <TIM_OC4_SetConfig+0xc4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00b      	beq.n	8004af8 <TIM_OC4_SetConfig+0x84>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <TIM_OC4_SetConfig+0xc8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d007      	beq.n	8004af8 <TIM_OC4_SetConfig+0x84>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a15      	ldr	r2, [pc, #84]	; (8004b40 <TIM_OC4_SetConfig+0xcc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_OC4_SetConfig+0x84>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a14      	ldr	r2, [pc, #80]	; (8004b44 <TIM_OC4_SetConfig+0xd0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d109      	bne.n	8004b0c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004afe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	019b      	lsls	r3, r3, #6
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	40013400 	.word	0x40013400
 8004b3c:	40014000 	.word	0x40014000
 8004b40:	40014400 	.word	0x40014400
 8004b44:	40014800 	.word	0x40014800

08004b48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <TIM_OC5_SetConfig+0xb4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00f      	beq.n	8004bc2 <TIM_OC5_SetConfig+0x7a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <TIM_OC5_SetConfig+0xb8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00b      	beq.n	8004bc2 <TIM_OC5_SetConfig+0x7a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <TIM_OC5_SetConfig+0xbc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <TIM_OC5_SetConfig+0x7a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <TIM_OC5_SetConfig+0xc0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d003      	beq.n	8004bc2 <TIM_OC5_SetConfig+0x7a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <TIM_OC5_SetConfig+0xc4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d109      	bne.n	8004bd6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40012c00 	.word	0x40012c00
 8004c00:	40013400 	.word	0x40013400
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40014400 	.word	0x40014400
 8004c0c:	40014800 	.word	0x40014800

08004c10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	051b      	lsls	r3, r3, #20
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a18      	ldr	r2, [pc, #96]	; (8004cc8 <TIM_OC6_SetConfig+0xb8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00f      	beq.n	8004c8c <TIM_OC6_SetConfig+0x7c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a17      	ldr	r2, [pc, #92]	; (8004ccc <TIM_OC6_SetConfig+0xbc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00b      	beq.n	8004c8c <TIM_OC6_SetConfig+0x7c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <TIM_OC6_SetConfig+0xc0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_OC6_SetConfig+0x7c>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <TIM_OC6_SetConfig+0xc4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_OC6_SetConfig+0x7c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a14      	ldr	r2, [pc, #80]	; (8004cd8 <TIM_OC6_SetConfig+0xc8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d109      	bne.n	8004ca0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	029b      	lsls	r3, r3, #10
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	621a      	str	r2, [r3, #32]
}
 8004cba:	bf00      	nop
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40013400 	.word	0x40013400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800

08004cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f023 0201 	bic.w	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f023 030a 	bic.w	r3, r3, #10
 8004d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	621a      	str	r2, [r3, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b087      	sub	sp, #28
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0210 	bic.w	r2, r3, #16
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	031b      	lsls	r3, r3, #12
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	621a      	str	r2, [r3, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f043 0307 	orr.w	r3, r3, #7
 8004dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	609a      	str	r2, [r3, #8]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	021a      	lsls	r2, r3, #8
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	609a      	str	r2, [r3, #8]
}
 8004e04:	bf00      	nop
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	2201      	movs	r2, #1
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a1a      	ldr	r2, [r3, #32]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	401a      	ands	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a1a      	ldr	r2, [r3, #32]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	fa01 f303 	lsl.w	r3, r1, r3
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e063      	b.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a2b      	ldr	r2, [pc, #172]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a2a      	ldr	r2, [pc, #168]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d108      	bne.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004eae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d018      	beq.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d013      	beq.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00e      	beq.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a17      	ldr	r2, [pc, #92]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d009      	beq.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10c      	bne.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40012c00 	.word	0x40012c00
 8004f4c:	40013400 	.word	0x40013400
 8004f50:	40000400 	.word	0x40000400
 8004f54:	40000800 	.word	0x40000800
 8004f58:	40014000 	.word	0x40014000

08004f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e040      	b.n	800502c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fc fa30 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2224      	movs	r2, #36	; 0x24
 8004fc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fbd4 	bl	8005784 <UART_SetConfig>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e022      	b.n	800502c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fd9c 	bl	8005b2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fe23 	bl	8005c70 <UART_CheckIdleState>
 800502a:	4603      	mov	r3, r0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005034:	b480      	push	{r7}
 8005036:	b08b      	sub	sp, #44	; 0x2c
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	4613      	mov	r3, r2
 8005040:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005046:	2b20      	cmp	r3, #32
 8005048:	d147      	bne.n	80050da <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <HAL_UART_Transmit_IT+0x22>
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e040      	b.n	80050dc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	88fa      	ldrh	r2, [r7, #6]
 800506c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2221      	movs	r2, #33	; 0x21
 8005082:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508c:	d107      	bne.n	800509e <HAL_UART_Transmit_IT+0x6a>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4a13      	ldr	r2, [pc, #76]	; (80050e8 <HAL_UART_Transmit_IT+0xb4>)
 800509a:	66da      	str	r2, [r3, #108]	; 0x6c
 800509c:	e002      	b.n	80050a4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4a12      	ldr	r2, [pc, #72]	; (80050ec <HAL_UART_Transmit_IT+0xb8>)
 80050a2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	613b      	str	r3, [r7, #16]
   return(result);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	623b      	str	r3, [r7, #32]
 80050c4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	69f9      	ldr	r1, [r7, #28]
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e6      	bne.n	80050a4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e000      	b.n	80050dc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
  }
}
 80050dc:	4618      	mov	r0, r3
 80050de:	372c      	adds	r7, #44	; 0x2c
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	080061a5 	.word	0x080061a5
 80050ec:	080060ed 	.word	0x080060ed

080050f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005104:	2b20      	cmp	r3, #32
 8005106:	d132      	bne.n	800516e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_UART_Receive_IT+0x24>
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e02b      	b.n	8005170 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d018      	beq.n	800515e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	613b      	str	r3, [r7, #16]
   return(result);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	623b      	str	r3, [r7, #32]
 800514c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	69f9      	ldr	r1, [r7, #28]
 8005150:	6a3a      	ldr	r2, [r7, #32]
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	61bb      	str	r3, [r7, #24]
   return(result);
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e6      	bne.n	800512c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	461a      	mov	r2, r3
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 fe93 	bl	8005e90 <UART_Start_Receive_IT>
 800516a:	4603      	mov	r3, r0
 800516c:	e000      	b.n	8005170 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
  }
}
 8005170:	4618      	mov	r0, r3
 8005172:	3728      	adds	r7, #40	; 0x28
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b0ba      	sub	sp, #232	; 0xe8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800519e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80051a6:	4013      	ands	r3, r2
 80051a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80051ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d115      	bne.n	80051e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80051b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00f      	beq.n	80051e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 82ab 	beq.w	800572c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
      }
      return;
 80051de:	e2a5      	b.n	800572c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8117 	beq.w	8005418 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80051ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80051f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051fa:	4b85      	ldr	r3, [pc, #532]	; (8005410 <HAL_UART_IRQHandler+0x298>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 810a 	beq.w	8005418 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d011      	beq.n	8005234 <HAL_UART_IRQHandler+0xbc>
 8005210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00b      	beq.n	8005234 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2201      	movs	r2, #1
 8005222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800522a:	f043 0201 	orr.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d011      	beq.n	8005264 <HAL_UART_IRQHandler+0xec>
 8005240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2202      	movs	r2, #2
 8005252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525a:	f043 0204 	orr.w	r2, r3, #4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d011      	beq.n	8005294 <HAL_UART_IRQHandler+0x11c>
 8005270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2204      	movs	r2, #4
 8005282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528a:	f043 0202 	orr.w	r2, r3, #2
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d017      	beq.n	80052d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d105      	bne.n	80052b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80052ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2208      	movs	r2, #8
 80052be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c6:	f043 0208 	orr.w	r2, r3, #8
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d012      	beq.n	8005302 <HAL_UART_IRQHandler+0x18a>
 80052dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00c      	beq.n	8005302 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8211 	beq.w	8005730 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800530e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00d      	beq.n	8005336 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800531a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b40      	cmp	r3, #64	; 0x40
 800534c:	d005      	beq.n	800535a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800534e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005352:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005356:	2b00      	cmp	r3, #0
 8005358:	d04f      	beq.n	80053fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fe4c 	bl	8005ff8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d141      	bne.n	80053f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3308      	adds	r3, #8
 8005374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005384:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800538c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800539a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800539e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1d9      	bne.n	800536e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d013      	beq.n	80053ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c6:	4a13      	ldr	r2, [pc, #76]	; (8005414 <HAL_UART_IRQHandler+0x29c>)
 80053c8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fc fb0c 	bl	80019ec <HAL_DMA_Abort_IT>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d017      	beq.n	800540a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053e4:	4610      	mov	r0, r2
 80053e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e8:	e00f      	b.n	800540a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f9b4 	bl	8005758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f0:	e00b      	b.n	800540a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f9b0 	bl	8005758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f8:	e007      	b.n	800540a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f9ac 	bl	8005758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005408:	e192      	b.n	8005730 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540a:	bf00      	nop
    return;
 800540c:	e190      	b.n	8005730 <HAL_UART_IRQHandler+0x5b8>
 800540e:	bf00      	nop
 8005410:	04000120 	.word	0x04000120
 8005414:	080060c1 	.word	0x080060c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541c:	2b01      	cmp	r3, #1
 800541e:	f040 814b 	bne.w	80056b8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005426:	f003 0310 	and.w	r3, r3, #16
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8144 	beq.w	80056b8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 813d 	beq.w	80056b8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2210      	movs	r2, #16
 8005444:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	f040 80b5 	bne.w	80055c0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005462:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8164 	beq.w	8005734 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005476:	429a      	cmp	r2, r3
 8005478:	f080 815c 	bcs.w	8005734 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005482:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	2b20      	cmp	r3, #32
 800548e:	f000 8086 	beq.w	800559e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054cc:	e841 2300 	strex	r3, r2, [r1]
 80054d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1da      	bne.n	8005492 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3308      	adds	r3, #8
 80054e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3308      	adds	r3, #8
 80054fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005500:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005504:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005508:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e1      	bne.n	80054dc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3308      	adds	r3, #8
 800551e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800552a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800552e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3308      	adds	r3, #8
 8005538:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800553c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800553e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005542:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800554a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e3      	bne.n	8005518 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800556c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800556e:	f023 0310 	bic.w	r3, r3, #16
 8005572:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005580:	65bb      	str	r3, [r7, #88]	; 0x58
 8005582:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005586:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800558e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e4      	bne.n	800555e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005598:	4618      	mov	r0, r3
 800559a:	f7fc f9ee 	bl	800197a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2202      	movs	r2, #2
 80055a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 f8d7 	bl	800576c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055be:	e0b9      	b.n	8005734 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80ab 	beq.w	8005738 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80055e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 80a6 	beq.w	8005738 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005600:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800560e:	647b      	str	r3, [r7, #68]	; 0x44
 8005610:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005612:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e4      	bne.n	80055ec <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3308      	adds	r3, #8
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	623b      	str	r3, [r7, #32]
   return(result);
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3308      	adds	r3, #8
 8005642:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005646:	633a      	str	r2, [r7, #48]	; 0x30
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800564c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e3      	bne.n	8005622 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	e853 3f00 	ldrex	r3, [r3]
 800567a:	60fb      	str	r3, [r7, #12]
   return(result);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0310 	bic.w	r3, r3, #16
 8005682:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	69b9      	ldr	r1, [r7, #24]
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	e841 2300 	strex	r3, r2, [r1]
 800569c:	617b      	str	r3, [r7, #20]
   return(result);
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e4      	bne.n	800566e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f85b 	bl	800576c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056b6:	e03f      	b.n	8005738 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00e      	beq.n	80056e2 <HAL_UART_IRQHandler+0x56a>
 80056c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d008      	beq.n	80056e2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 ff94 	bl	8006608 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056e0:	e02d      	b.n	800573e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80056e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00e      	beq.n	800570c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80056ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d01c      	beq.n	800573c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	4798      	blx	r3
    }
    return;
 800570a:	e017      	b.n	800573c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d012      	beq.n	800573e <HAL_UART_IRQHandler+0x5c6>
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00c      	beq.n	800573e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fd9d 	bl	8006264 <UART_EndTransmit_IT>
    return;
 800572a:	e008      	b.n	800573e <HAL_UART_IRQHandler+0x5c6>
      return;
 800572c:	bf00      	nop
 800572e:	e006      	b.n	800573e <HAL_UART_IRQHandler+0x5c6>
    return;
 8005730:	bf00      	nop
 8005732:	e004      	b.n	800573e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005734:	bf00      	nop
 8005736:	e002      	b.n	800573e <HAL_UART_IRQHandler+0x5c6>
      return;
 8005738:	bf00      	nop
 800573a:	e000      	b.n	800573e <HAL_UART_IRQHandler+0x5c6>
    return;
 800573c:	bf00      	nop
  }

}
 800573e:	37e8      	adds	r7, #232	; 0xe8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80057b2:	f023 030c 	bic.w	r3, r3, #12
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	6979      	ldr	r1, [r7, #20]
 80057bc:	430b      	orrs	r3, r1
 80057be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4aa7      	ldr	r2, [pc, #668]	; (8005a9c <UART_SetConfig+0x318>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d120      	bne.n	8005846 <UART_SetConfig+0xc2>
 8005804:	4ba6      	ldr	r3, [pc, #664]	; (8005aa0 <UART_SetConfig+0x31c>)
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	f003 0303 	and.w	r3, r3, #3
 800580c:	2b03      	cmp	r3, #3
 800580e:	d817      	bhi.n	8005840 <UART_SetConfig+0xbc>
 8005810:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <UART_SetConfig+0x94>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	08005829 	.word	0x08005829
 800581c:	08005835 	.word	0x08005835
 8005820:	0800583b 	.word	0x0800583b
 8005824:	0800582f 	.word	0x0800582f
 8005828:	2301      	movs	r3, #1
 800582a:	77fb      	strb	r3, [r7, #31]
 800582c:	e0b5      	b.n	800599a <UART_SetConfig+0x216>
 800582e:	2302      	movs	r3, #2
 8005830:	77fb      	strb	r3, [r7, #31]
 8005832:	e0b2      	b.n	800599a <UART_SetConfig+0x216>
 8005834:	2304      	movs	r3, #4
 8005836:	77fb      	strb	r3, [r7, #31]
 8005838:	e0af      	b.n	800599a <UART_SetConfig+0x216>
 800583a:	2308      	movs	r3, #8
 800583c:	77fb      	strb	r3, [r7, #31]
 800583e:	e0ac      	b.n	800599a <UART_SetConfig+0x216>
 8005840:	2310      	movs	r3, #16
 8005842:	77fb      	strb	r3, [r7, #31]
 8005844:	e0a9      	b.n	800599a <UART_SetConfig+0x216>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a96      	ldr	r2, [pc, #600]	; (8005aa4 <UART_SetConfig+0x320>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d124      	bne.n	800589a <UART_SetConfig+0x116>
 8005850:	4b93      	ldr	r3, [pc, #588]	; (8005aa0 <UART_SetConfig+0x31c>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005858:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800585c:	d011      	beq.n	8005882 <UART_SetConfig+0xfe>
 800585e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005862:	d817      	bhi.n	8005894 <UART_SetConfig+0x110>
 8005864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005868:	d011      	beq.n	800588e <UART_SetConfig+0x10a>
 800586a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800586e:	d811      	bhi.n	8005894 <UART_SetConfig+0x110>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <UART_SetConfig+0xf8>
 8005874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005878:	d006      	beq.n	8005888 <UART_SetConfig+0x104>
 800587a:	e00b      	b.n	8005894 <UART_SetConfig+0x110>
 800587c:	2300      	movs	r3, #0
 800587e:	77fb      	strb	r3, [r7, #31]
 8005880:	e08b      	b.n	800599a <UART_SetConfig+0x216>
 8005882:	2302      	movs	r3, #2
 8005884:	77fb      	strb	r3, [r7, #31]
 8005886:	e088      	b.n	800599a <UART_SetConfig+0x216>
 8005888:	2304      	movs	r3, #4
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e085      	b.n	800599a <UART_SetConfig+0x216>
 800588e:	2308      	movs	r3, #8
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e082      	b.n	800599a <UART_SetConfig+0x216>
 8005894:	2310      	movs	r3, #16
 8005896:	77fb      	strb	r3, [r7, #31]
 8005898:	e07f      	b.n	800599a <UART_SetConfig+0x216>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a82      	ldr	r2, [pc, #520]	; (8005aa8 <UART_SetConfig+0x324>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d124      	bne.n	80058ee <UART_SetConfig+0x16a>
 80058a4:	4b7e      	ldr	r3, [pc, #504]	; (8005aa0 <UART_SetConfig+0x31c>)
 80058a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80058ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80058b0:	d011      	beq.n	80058d6 <UART_SetConfig+0x152>
 80058b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80058b6:	d817      	bhi.n	80058e8 <UART_SetConfig+0x164>
 80058b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058bc:	d011      	beq.n	80058e2 <UART_SetConfig+0x15e>
 80058be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058c2:	d811      	bhi.n	80058e8 <UART_SetConfig+0x164>
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <UART_SetConfig+0x14c>
 80058c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058cc:	d006      	beq.n	80058dc <UART_SetConfig+0x158>
 80058ce:	e00b      	b.n	80058e8 <UART_SetConfig+0x164>
 80058d0:	2300      	movs	r3, #0
 80058d2:	77fb      	strb	r3, [r7, #31]
 80058d4:	e061      	b.n	800599a <UART_SetConfig+0x216>
 80058d6:	2302      	movs	r3, #2
 80058d8:	77fb      	strb	r3, [r7, #31]
 80058da:	e05e      	b.n	800599a <UART_SetConfig+0x216>
 80058dc:	2304      	movs	r3, #4
 80058de:	77fb      	strb	r3, [r7, #31]
 80058e0:	e05b      	b.n	800599a <UART_SetConfig+0x216>
 80058e2:	2308      	movs	r3, #8
 80058e4:	77fb      	strb	r3, [r7, #31]
 80058e6:	e058      	b.n	800599a <UART_SetConfig+0x216>
 80058e8:	2310      	movs	r3, #16
 80058ea:	77fb      	strb	r3, [r7, #31]
 80058ec:	e055      	b.n	800599a <UART_SetConfig+0x216>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a6e      	ldr	r2, [pc, #440]	; (8005aac <UART_SetConfig+0x328>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d124      	bne.n	8005942 <UART_SetConfig+0x1be>
 80058f8:	4b69      	ldr	r3, [pc, #420]	; (8005aa0 <UART_SetConfig+0x31c>)
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005904:	d011      	beq.n	800592a <UART_SetConfig+0x1a6>
 8005906:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800590a:	d817      	bhi.n	800593c <UART_SetConfig+0x1b8>
 800590c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005910:	d011      	beq.n	8005936 <UART_SetConfig+0x1b2>
 8005912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005916:	d811      	bhi.n	800593c <UART_SetConfig+0x1b8>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <UART_SetConfig+0x1a0>
 800591c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005920:	d006      	beq.n	8005930 <UART_SetConfig+0x1ac>
 8005922:	e00b      	b.n	800593c <UART_SetConfig+0x1b8>
 8005924:	2300      	movs	r3, #0
 8005926:	77fb      	strb	r3, [r7, #31]
 8005928:	e037      	b.n	800599a <UART_SetConfig+0x216>
 800592a:	2302      	movs	r3, #2
 800592c:	77fb      	strb	r3, [r7, #31]
 800592e:	e034      	b.n	800599a <UART_SetConfig+0x216>
 8005930:	2304      	movs	r3, #4
 8005932:	77fb      	strb	r3, [r7, #31]
 8005934:	e031      	b.n	800599a <UART_SetConfig+0x216>
 8005936:	2308      	movs	r3, #8
 8005938:	77fb      	strb	r3, [r7, #31]
 800593a:	e02e      	b.n	800599a <UART_SetConfig+0x216>
 800593c:	2310      	movs	r3, #16
 800593e:	77fb      	strb	r3, [r7, #31]
 8005940:	e02b      	b.n	800599a <UART_SetConfig+0x216>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a5a      	ldr	r2, [pc, #360]	; (8005ab0 <UART_SetConfig+0x32c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d124      	bne.n	8005996 <UART_SetConfig+0x212>
 800594c:	4b54      	ldr	r3, [pc, #336]	; (8005aa0 <UART_SetConfig+0x31c>)
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005954:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005958:	d011      	beq.n	800597e <UART_SetConfig+0x1fa>
 800595a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800595e:	d817      	bhi.n	8005990 <UART_SetConfig+0x20c>
 8005960:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005964:	d011      	beq.n	800598a <UART_SetConfig+0x206>
 8005966:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800596a:	d811      	bhi.n	8005990 <UART_SetConfig+0x20c>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <UART_SetConfig+0x1f4>
 8005970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005974:	d006      	beq.n	8005984 <UART_SetConfig+0x200>
 8005976:	e00b      	b.n	8005990 <UART_SetConfig+0x20c>
 8005978:	2300      	movs	r3, #0
 800597a:	77fb      	strb	r3, [r7, #31]
 800597c:	e00d      	b.n	800599a <UART_SetConfig+0x216>
 800597e:	2302      	movs	r3, #2
 8005980:	77fb      	strb	r3, [r7, #31]
 8005982:	e00a      	b.n	800599a <UART_SetConfig+0x216>
 8005984:	2304      	movs	r3, #4
 8005986:	77fb      	strb	r3, [r7, #31]
 8005988:	e007      	b.n	800599a <UART_SetConfig+0x216>
 800598a:	2308      	movs	r3, #8
 800598c:	77fb      	strb	r3, [r7, #31]
 800598e:	e004      	b.n	800599a <UART_SetConfig+0x216>
 8005990:	2310      	movs	r3, #16
 8005992:	77fb      	strb	r3, [r7, #31]
 8005994:	e001      	b.n	800599a <UART_SetConfig+0x216>
 8005996:	2310      	movs	r3, #16
 8005998:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059a2:	d15b      	bne.n	8005a5c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80059a4:	7ffb      	ldrb	r3, [r7, #31]
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d827      	bhi.n	80059fa <UART_SetConfig+0x276>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <UART_SetConfig+0x22c>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059dd 	.word	0x080059dd
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	080059fb 	.word	0x080059fb
 80059c0:	080059eb 	.word	0x080059eb
 80059c4:	080059fb 	.word	0x080059fb
 80059c8:	080059fb 	.word	0x080059fb
 80059cc:	080059fb 	.word	0x080059fb
 80059d0:	080059f3 	.word	0x080059f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d4:	f7fd fe34 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 80059d8:	61b8      	str	r0, [r7, #24]
        break;
 80059da:	e013      	b.n	8005a04 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059dc:	f7fd fe52 	bl	8003684 <HAL_RCC_GetPCLK2Freq>
 80059e0:	61b8      	str	r0, [r7, #24]
        break;
 80059e2:	e00f      	b.n	8005a04 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e4:	4b33      	ldr	r3, [pc, #204]	; (8005ab4 <UART_SetConfig+0x330>)
 80059e6:	61bb      	str	r3, [r7, #24]
        break;
 80059e8:	e00c      	b.n	8005a04 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059ea:	f7fd fdb3 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80059ee:	61b8      	str	r0, [r7, #24]
        break;
 80059f0:	e008      	b.n	8005a04 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f6:	61bb      	str	r3, [r7, #24]
        break;
 80059f8:	e004      	b.n	8005a04 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	77bb      	strb	r3, [r7, #30]
        break;
 8005a02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 8082 	beq.w	8005b10 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	005a      	lsls	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	441a      	add	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b0f      	cmp	r3, #15
 8005a26:	d916      	bls.n	8005a56 <UART_SetConfig+0x2d2>
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2e:	d212      	bcs.n	8005a56 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f023 030f 	bic.w	r3, r3, #15
 8005a38:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	085b      	lsrs	r3, r3, #1
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	89fb      	ldrh	r3, [r7, #14]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	89fa      	ldrh	r2, [r7, #14]
 8005a52:	60da      	str	r2, [r3, #12]
 8005a54:	e05c      	b.n	8005b10 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	77bb      	strb	r3, [r7, #30]
 8005a5a:	e059      	b.n	8005b10 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a5c:	7ffb      	ldrb	r3, [r7, #31]
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d835      	bhi.n	8005ace <UART_SetConfig+0x34a>
 8005a62:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <UART_SetConfig+0x2e4>)
 8005a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a68:	08005a8d 	.word	0x08005a8d
 8005a6c:	08005a95 	.word	0x08005a95
 8005a70:	08005ab9 	.word	0x08005ab9
 8005a74:	08005acf 	.word	0x08005acf
 8005a78:	08005abf 	.word	0x08005abf
 8005a7c:	08005acf 	.word	0x08005acf
 8005a80:	08005acf 	.word	0x08005acf
 8005a84:	08005acf 	.word	0x08005acf
 8005a88:	08005ac7 	.word	0x08005ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a8c:	f7fd fdd8 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005a90:	61b8      	str	r0, [r7, #24]
        break;
 8005a92:	e021      	b.n	8005ad8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a94:	f7fd fdf6 	bl	8003684 <HAL_RCC_GetPCLK2Freq>
 8005a98:	61b8      	str	r0, [r7, #24]
        break;
 8005a9a:	e01d      	b.n	8005ad8 <UART_SetConfig+0x354>
 8005a9c:	40013800 	.word	0x40013800
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40004400 	.word	0x40004400
 8005aa8:	40004800 	.word	0x40004800
 8005aac:	40004c00 	.word	0x40004c00
 8005ab0:	40005000 	.word	0x40005000
 8005ab4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <UART_SetConfig+0x3a4>)
 8005aba:	61bb      	str	r3, [r7, #24]
        break;
 8005abc:	e00c      	b.n	8005ad8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005abe:	f7fd fd49 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8005ac2:	61b8      	str	r0, [r7, #24]
        break;
 8005ac4:	e008      	b.n	8005ad8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aca:	61bb      	str	r3, [r7, #24]
        break;
 8005acc:	e004      	b.n	8005ad8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ad6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d018      	beq.n	8005b10 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	085a      	lsrs	r2, r3, #1
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	441a      	add	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b0f      	cmp	r3, #15
 8005af6:	d909      	bls.n	8005b0c <UART_SetConfig+0x388>
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005afe:	d205      	bcs.n	8005b0c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60da      	str	r2, [r3, #12]
 8005b0a:	e001      	b.n	8005b10 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3720      	adds	r7, #32
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	007a1200 	.word	0x007a1200

08005b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00a      	beq.n	8005b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00a      	beq.n	8005bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01a      	beq.n	8005c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c2a:	d10a      	bne.n	8005c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	605a      	str	r2, [r3, #4]
  }
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b098      	sub	sp, #96	; 0x60
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c80:	f7fb fd5e 	bl	8001740 <HAL_GetTick>
 8005c84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d12e      	bne.n	8005cf2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f88c 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d021      	beq.n	8005cf2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e6      	bne.n	8005cae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e062      	b.n	8005db8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d149      	bne.n	8005d94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f856 	bl	8005dc0 <UART_WaitOnFlagUntilTimeout>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d03c      	beq.n	8005d94 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	623b      	str	r3, [r7, #32]
   return(result);
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d38:	633b      	str	r3, [r7, #48]	; 0x30
 8005d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e6      	bne.n	8005d1a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3308      	adds	r3, #8
 8005d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0301 	bic.w	r3, r3, #1
 8005d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3308      	adds	r3, #8
 8005d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d6c:	61fa      	str	r2, [r7, #28]
 8005d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d70:	69b9      	ldr	r1, [r7, #24]
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	e841 2300 	strex	r3, r2, [r1]
 8005d78:	617b      	str	r3, [r7, #20]
   return(result);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e5      	bne.n	8005d4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e011      	b.n	8005db8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3758      	adds	r7, #88	; 0x58
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd0:	e049      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d045      	beq.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dda:	f7fb fcb1 	bl	8001740 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d302      	bcc.n	8005df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e048      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d031      	beq.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b08      	cmp	r3, #8
 8005e0e:	d110      	bne.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2208      	movs	r2, #8
 8005e16:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f8ed 	bl	8005ff8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2208      	movs	r2, #8
 8005e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e029      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e40:	d111      	bne.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 f8d3 	bl	8005ff8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e00f      	b.n	8005e86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	bf0c      	ite	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	2300      	movne	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d0a6      	beq.n	8005dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b097      	sub	sp, #92	; 0x5c
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	88fa      	ldrh	r2, [r7, #6]
 8005ea8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	88fa      	ldrh	r2, [r7, #6]
 8005eb0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec2:	d10e      	bne.n	8005ee2 <UART_Start_Receive_IT+0x52>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d105      	bne.n	8005ed8 <UART_Start_Receive_IT+0x48>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ed2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ed6:	e01a      	b.n	8005f0e <UART_Start_Receive_IT+0x7e>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	22ff      	movs	r2, #255	; 0xff
 8005edc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ee0:	e015      	b.n	8005f0e <UART_Start_Receive_IT+0x7e>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10d      	bne.n	8005f06 <UART_Start_Receive_IT+0x76>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d104      	bne.n	8005efc <UART_Start_Receive_IT+0x6c>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	22ff      	movs	r2, #255	; 0xff
 8005ef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005efa:	e008      	b.n	8005f0e <UART_Start_Receive_IT+0x7e>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	227f      	movs	r2, #127	; 0x7f
 8005f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f04:	e003      	b.n	8005f0e <UART_Start_Receive_IT+0x7e>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2222      	movs	r2, #34	; 0x22
 8005f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	3308      	adds	r3, #8
 8005f24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f28:	e853 3f00 	ldrex	r3, [r3]
 8005f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	657b      	str	r3, [r7, #84]	; 0x54
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e5      	bne.n	8005f1e <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f5a:	d107      	bne.n	8005f6c <UART_Start_Receive_IT+0xdc>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d103      	bne.n	8005f6c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4a22      	ldr	r2, [pc, #136]	; (8005ff0 <UART_Start_Receive_IT+0x160>)
 8005f68:	669a      	str	r2, [r3, #104]	; 0x68
 8005f6a:	e002      	b.n	8005f72 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4a21      	ldr	r2, [pc, #132]	; (8005ff4 <UART_Start_Receive_IT+0x164>)
 8005f70:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d019      	beq.n	8005fae <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e6      	bne.n	8005f7a <UART_Start_Receive_IT+0xea>
 8005fac:	e018      	b.n	8005fe0 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	613b      	str	r3, [r7, #16]
   return(result);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f043 0320 	orr.w	r3, r3, #32
 8005fc2:	653b      	str	r3, [r7, #80]	; 0x50
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fcc:	623b      	str	r3, [r7, #32]
 8005fce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	69f9      	ldr	r1, [r7, #28]
 8005fd2:	6a3a      	ldr	r2, [r7, #32]
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e6      	bne.n	8005fae <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	375c      	adds	r7, #92	; 0x5c
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	08006461 	.word	0x08006461
 8005ff4:	080062b9 	.word	0x080062b9

08005ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b095      	sub	sp, #84	; 0x54
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601e:	643b      	str	r3, [r7, #64]	; 0x40
 8006020:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006024:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800602c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e6      	bne.n	8006000 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3308      	adds	r3, #8
 8006038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	61fb      	str	r3, [r7, #28]
   return(result);
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	64bb      	str	r3, [r7, #72]	; 0x48
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3308      	adds	r3, #8
 8006050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e5      	bne.n	8006032 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800606a:	2b01      	cmp	r3, #1
 800606c:	d118      	bne.n	80060a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	60bb      	str	r3, [r7, #8]
   return(result);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f023 0310 	bic.w	r3, r3, #16
 8006082:	647b      	str	r3, [r7, #68]	; 0x44
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6979      	ldr	r1, [r7, #20]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	613b      	str	r3, [r7, #16]
   return(result);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e6      	bne.n	800606e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80060b4:	bf00      	nop
 80060b6:	3754      	adds	r7, #84	; 0x54
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7ff fb3a 	bl	8005758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060e4:	bf00      	nop
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b08f      	sub	sp, #60	; 0x3c
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f8:	2b21      	cmp	r3, #33	; 0x21
 80060fa:	d14d      	bne.n	8006198 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d132      	bne.n	800616e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	61fb      	str	r3, [r7, #28]
   return(result);
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006128:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800612c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e6      	bne.n	8006108 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	60bb      	str	r3, [r7, #8]
   return(result);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800614e:	633b      	str	r3, [r7, #48]	; 0x30
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	6979      	ldr	r1, [r7, #20]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	613b      	str	r3, [r7, #16]
   return(result);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e6      	bne.n	800613a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800616c:	e014      	b.n	8006198 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006172:	781a      	ldrb	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	b292      	uxth	r2, r2
 800617a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006198:	bf00      	nop
 800619a:	373c      	adds	r7, #60	; 0x3c
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b091      	sub	sp, #68	; 0x44
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061b0:	2b21      	cmp	r3, #33	; 0x21
 80061b2:	d151      	bne.n	8006258 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d132      	bne.n	8006226 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	623b      	str	r3, [r7, #32]
   return(result);
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061de:	633b      	str	r3, [r7, #48]	; 0x30
 80061e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e6      	bne.n	80061c0 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006206:	637b      	str	r3, [r7, #52]	; 0x34
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	69b9      	ldr	r1, [r7, #24]
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	617b      	str	r3, [r7, #20]
   return(result);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e6      	bne.n	80061f2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006224:	e018      	b.n	8006258 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800622c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622e:	881a      	ldrh	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006238:	b292      	uxth	r2, r2
 800623a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006240:	1c9a      	adds	r2, r3, #2
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006258:	bf00      	nop
 800625a:	3744      	adds	r7, #68	; 0x44
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	60bb      	str	r3, [r7, #8]
   return(result);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006280:	61fb      	str	r3, [r7, #28]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	61bb      	str	r3, [r7, #24]
 800628c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6979      	ldr	r1, [r7, #20]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	613b      	str	r3, [r7, #16]
   return(result);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e6      	bne.n	800626c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff fa4a 	bl	8005744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062b0:	bf00      	nop
 80062b2:	3720      	adds	r7, #32
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b09c      	sub	sp, #112	; 0x70
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062d0:	2b22      	cmp	r3, #34	; 0x22
 80062d2:	f040 80b9 	bne.w	8006448 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80062e4:	b2d9      	uxtb	r1, r3
 80062e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f0:	400a      	ands	r2, r1
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 809c 	bne.w	8006458 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800632e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006330:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006334:	66bb      	str	r3, [r7, #104]	; 0x68
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800633e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006340:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006342:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006346:	e841 2300 	strex	r3, r2, [r1]
 800634a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800634c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1e6      	bne.n	8006320 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3308      	adds	r3, #8
 8006358:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006364:	f023 0301 	bic.w	r3, r3, #1
 8006368:	667b      	str	r3, [r7, #100]	; 0x64
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006372:	647a      	str	r2, [r7, #68]	; 0x44
 8006374:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e5      	bne.n	8006352 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2220      	movs	r2, #32
 800638a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d018      	beq.n	80063da <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	623b      	str	r3, [r7, #32]
   return(result);
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063bc:	663b      	str	r3, [r7, #96]	; 0x60
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30
 80063c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e6      	bne.n	80063a8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d12e      	bne.n	8006440 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f023 0310 	bic.w	r3, r3, #16
 80063fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	69b9      	ldr	r1, [r7, #24]
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	617b      	str	r3, [r7, #20]
   return(result);
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e6      	bne.n	80063e8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b10      	cmp	r3, #16
 8006426:	d103      	bne.n	8006430 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2210      	movs	r2, #16
 800642e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff f997 	bl	800576c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800643e:	e00b      	b.n	8006458 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7f9 ff79 	bl	8000338 <HAL_UART_RxCpltCallback>
}
 8006446:	e007      	b.n	8006458 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699a      	ldr	r2, [r3, #24]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0208 	orr.w	r2, r2, #8
 8006456:	619a      	str	r2, [r3, #24]
}
 8006458:	bf00      	nop
 800645a:	3770      	adds	r7, #112	; 0x70
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b09c      	sub	sp, #112	; 0x70
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800646e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006478:	2b22      	cmp	r3, #34	; 0x22
 800647a:	f040 80b9 	bne.w	80065f0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006484:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800648e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006492:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006496:	4013      	ands	r3, r2
 8006498:	b29a      	uxth	r2, r3
 800649a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800649c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a2:	1c9a      	adds	r2, r3, #2
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f040 809c 	bne.w	8006600 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d0:	e853 3f00 	ldrex	r3, [r3]
 80064d4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80064d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064dc:	667b      	str	r3, [r7, #100]	; 0x64
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064e6:	657b      	str	r3, [r7, #84]	; 0x54
 80064e8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1e6      	bne.n	80064c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3308      	adds	r3, #8
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	663b      	str	r3, [r7, #96]	; 0x60
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3308      	adds	r3, #8
 8006518:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800651a:	643a      	str	r2, [r7, #64]	; 0x40
 800651c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006520:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e5      	bne.n	80064fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d018      	beq.n	8006582 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	61fb      	str	r3, [r7, #28]
   return(result);
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006564:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800656e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006570:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006576:	e841 2300 	strex	r3, r2, [r1]
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1e6      	bne.n	8006550 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006586:	2b01      	cmp	r3, #1
 8006588:	d12e      	bne.n	80065e8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	60bb      	str	r3, [r7, #8]
   return(result);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f023 0310 	bic.w	r3, r3, #16
 80065a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6979      	ldr	r1, [r7, #20]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	613b      	str	r3, [r7, #16]
   return(result);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e6      	bne.n	8006590 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b10      	cmp	r3, #16
 80065ce:	d103      	bne.n	80065d8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2210      	movs	r2, #16
 80065d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff f8c3 	bl	800576c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065e6:	e00b      	b.n	8006600 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7f9 fea5 	bl	8000338 <HAL_UART_RxCpltCallback>
}
 80065ee:	e007      	b.n	8006600 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699a      	ldr	r2, [r3, #24]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f042 0208 	orr.w	r2, r2, #8
 80065fe:	619a      	str	r2, [r3, #24]
}
 8006600:	bf00      	nop
 8006602:	3770      	adds	r7, #112	; 0x70
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006624:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006628:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	b29b      	uxth	r3, r3
 8006636:	43db      	mvns	r3, r3
 8006638:	b29b      	uxth	r3, r3
 800663a:	4013      	ands	r3, r2
 800663c:	b29a      	uxth	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006652:	b084      	sub	sp, #16
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	f107 0014 	add.w	r0, r7, #20
 8006660:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	b004      	add	sp, #16
 8006692:	4770      	bx	lr

08006694 <__libc_init_array>:
 8006694:	b570      	push	{r4, r5, r6, lr}
 8006696:	4d0d      	ldr	r5, [pc, #52]	; (80066cc <__libc_init_array+0x38>)
 8006698:	4c0d      	ldr	r4, [pc, #52]	; (80066d0 <__libc_init_array+0x3c>)
 800669a:	1b64      	subs	r4, r4, r5
 800669c:	10a4      	asrs	r4, r4, #2
 800669e:	2600      	movs	r6, #0
 80066a0:	42a6      	cmp	r6, r4
 80066a2:	d109      	bne.n	80066b8 <__libc_init_array+0x24>
 80066a4:	4d0b      	ldr	r5, [pc, #44]	; (80066d4 <__libc_init_array+0x40>)
 80066a6:	4c0c      	ldr	r4, [pc, #48]	; (80066d8 <__libc_init_array+0x44>)
 80066a8:	f000 f820 	bl	80066ec <_init>
 80066ac:	1b64      	subs	r4, r4, r5
 80066ae:	10a4      	asrs	r4, r4, #2
 80066b0:	2600      	movs	r6, #0
 80066b2:	42a6      	cmp	r6, r4
 80066b4:	d105      	bne.n	80066c2 <__libc_init_array+0x2e>
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
 80066b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066bc:	4798      	blx	r3
 80066be:	3601      	adds	r6, #1
 80066c0:	e7ee      	b.n	80066a0 <__libc_init_array+0xc>
 80066c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c6:	4798      	blx	r3
 80066c8:	3601      	adds	r6, #1
 80066ca:	e7f2      	b.n	80066b2 <__libc_init_array+0x1e>
 80066cc:	08007968 	.word	0x08007968
 80066d0:	08007968 	.word	0x08007968
 80066d4:	08007968 	.word	0x08007968
 80066d8:	0800796c 	.word	0x0800796c

080066dc <memset>:
 80066dc:	4402      	add	r2, r0
 80066de:	4603      	mov	r3, r0
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d100      	bne.n	80066e6 <memset+0xa>
 80066e4:	4770      	bx	lr
 80066e6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ea:	e7f9      	b.n	80066e0 <memset+0x4>

080066ec <_init>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	bf00      	nop
 80066f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f2:	bc08      	pop	{r3}
 80066f4:	469e      	mov	lr, r3
 80066f6:	4770      	bx	lr

080066f8 <_fini>:
 80066f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fa:	bf00      	nop
 80066fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fe:	bc08      	pop	{r3}
 8006700:	469e      	mov	lr, r3
 8006702:	4770      	bx	lr
