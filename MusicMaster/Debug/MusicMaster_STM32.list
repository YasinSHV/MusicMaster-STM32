
MusicMaster_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009054  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002584  080091e4  080091e4  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b768  0800b768  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  0800b768  0800b768  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b768  0800b768  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b768  0800b768  0001b768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b76c  0800b76c  0001b76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800b770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          0000065c  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000075c  2000075c  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c9ab  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e0  00000000  00000000  0003cadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  0003fec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001648  00000000  00000000  000415e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020db2  00000000  00000000  00042c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d717  00000000  00000000  000639e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7611  00000000  00000000  000810f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014870a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006904  00000000  00000000  0014875c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091cc 	.word	0x080091cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	080091cc 	.word	0x080091cc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2uiz>:
 8000618:	004a      	lsls	r2, r1, #1
 800061a:	d211      	bcs.n	8000640 <__aeabi_d2uiz+0x28>
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d211      	bcs.n	8000646 <__aeabi_d2uiz+0x2e>
 8000622:	d50d      	bpl.n	8000640 <__aeabi_d2uiz+0x28>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d40e      	bmi.n	800064c <__aeabi_d2uiz+0x34>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	fa23 f002 	lsr.w	r0, r3, r2
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d102      	bne.n	8000652 <__aeabi_d2uiz+0x3a>
 800064c:	f04f 30ff 	mov.w	r0, #4294967295
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <hashString>:
    struct DictionaryNode **buckets;
    int size;
};

// Hash function for string keys
unsigned int hashString(const char *key, int size) {
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
    unsigned int hash = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
    while (*key) {
 8000666:	e007      	b.n	8000678 <hashString+0x20>
        hash = (hash << 5) + *key++;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	015a      	lsls	r2, r3, #5
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	1c59      	adds	r1, r3, #1
 8000670:	6079      	str	r1, [r7, #4]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4413      	add	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]
    while (*key) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f3      	bne.n	8000668 <hashString+0x10>
    }
    return hash % size;
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	fbb3 f1f2 	udiv	r1, r3, r2
 8000688:	fb01 f202 	mul.w	r2, r1, r2
 800068c:	1a9b      	subs	r3, r3, r2
}
 800068e:	4618      	mov	r0, r3
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <hashNumeric>:

// Hash function for numeric keys
unsigned int hashNumeric(int key, int size) {
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	6039      	str	r1, [r7, #0]
    return key % size;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	fb93 f2f2 	sdiv	r2, r3, r2
 80006ac:	6839      	ldr	r1, [r7, #0]
 80006ae:	fb01 f202 	mul.w	r2, r1, r2
 80006b2:	1a9b      	subs	r3, r3, r2
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <initDictionary>:

// Initialize dictionary
Dictionary *initDictionary(int size) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    Dictionary *dict = malloc(sizeof(Dictionary));
 80006c8:	2008      	movs	r0, #8
 80006ca:	f008 f8e3 	bl	8008894 <malloc>
 80006ce:	4603      	mov	r3, r0
 80006d0:	60bb      	str	r3, [r7, #8]
    dict->buckets = malloc(size * sizeof(struct DictionaryNode *));
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f008 f8dc 	bl	8008894 <malloc>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	601a      	str	r2, [r3, #0]
    dict->size = size;
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < size; i++) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	e009      	b.n	8000704 <initDictionary+0x44>
        dict->buckets[i] = NULL;
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	4413      	add	r3, r2
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	429a      	cmp	r2, r3
 800070a:	dbf1      	blt.n	80006f0 <initDictionary+0x30>
    }
    return dict;
 800070c:	68bb      	ldr	r3, [r7, #8]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <insert>:

// Insert key-value pair into dictionary
void insert(Dictionary *dict, const char *stringKey, int numericKey, struct Tone *tones, int numTones) {
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *newNode = malloc(sizeof(struct DictionaryNode));
 8000724:	2014      	movs	r0, #20
 8000726:	f008 f8b5 	bl	8008894 <malloc>
 800072a:	4603      	mov	r3, r0
 800072c:	613b      	str	r3, [r7, #16]
    newNode->stringKey = strdup(stringKey);
 800072e:	68b8      	ldr	r0, [r7, #8]
 8000730:	f008 f9de 	bl	8008af0 <strdup>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	693b      	ldr	r3, [r7, #16]
 800073a:	601a      	str	r2, [r3, #0]
    newNode->numericKey = numericKey;
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	605a      	str	r2, [r3, #4]
    newNode->tones = malloc(numTones * sizeof(struct Tone));
 8000742:	6a3b      	ldr	r3, [r7, #32]
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	4618      	mov	r0, r3
 8000748:	f008 f8a4 	bl	8008894 <malloc>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	609a      	str	r2, [r3, #8]
    memcpy(newNode->tones, tones, numTones * sizeof(struct Tone));
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	6898      	ldr	r0, [r3, #8]
 8000758:	6a3b      	ldr	r3, [r7, #32]
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	461a      	mov	r2, r3
 800075e:	6839      	ldr	r1, [r7, #0]
 8000760:	f008 f8a0 	bl	80088a4 <memcpy>
    newNode->numTones = numTones;
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	6a3a      	ldr	r2, [r7, #32]
 8000768:	60da      	str	r2, [r3, #12]

    if (stringKey != NULL) {
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d007      	beq.n	8000780 <insert+0x6a>
        index = hashString(stringKey, dict->size);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4619      	mov	r1, r3
 8000776:	68b8      	ldr	r0, [r7, #8]
 8000778:	f7ff ff6e 	bl	8000658 <hashString>
 800077c:	6178      	str	r0, [r7, #20]
 800077e:	e006      	b.n	800078e <insert+0x78>
    } else {
        index = hashNumeric(numericKey, dict->size);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4619      	mov	r1, r3
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ff87 	bl	800069a <hashNumeric>
 800078c:	6178      	str	r0, [r7, #20]
    }

    newNode->next = dict->buckets[index];
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	611a      	str	r2, [r3, #16]
    dict->buckets[index] = newNode;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	601a      	str	r2, [r3, #0]
}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <lookup>:

// Lookup value by key
struct Tone *lookup(Dictionary *dict, const char *stringKey, int numericKey, int *numTones) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
 80007c0:	603b      	str	r3, [r7, #0]
    unsigned int index;
    struct DictionaryNode *current;

    if (stringKey != NULL) {
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d029      	beq.n	800081c <lookup+0x68>
        index = hashString(stringKey, dict->size);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4619      	mov	r1, r3
 80007ce:	68b8      	ldr	r0, [r7, #8]
 80007d0:	f7ff ff42 	bl	8000658 <hashString>
 80007d4:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	617b      	str	r3, [r7, #20]
        while (current) {
 80007e4:	e016      	b.n	8000814 <lookup+0x60>
            if (current->stringKey && strcmp(current->stringKey, stringKey) == 0) {
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d00f      	beq.n	800080e <lookup+0x5a>
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	68b9      	ldr	r1, [r7, #8]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fceb 	bl	80001d0 <strcmp>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d106      	bne.n	800080e <lookup+0x5a>
                *numTones = current->numTones;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	68da      	ldr	r2, [r3, #12]
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	601a      	str	r2, [r3, #0]
                return current->tones;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	e02b      	b.n	8000866 <lookup+0xb2>
            }
            current = current->next;
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	691b      	ldr	r3, [r3, #16]
 8000812:	617b      	str	r3, [r7, #20]
        while (current) {
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1e5      	bne.n	80007e6 <lookup+0x32>
 800081a:	e020      	b.n	800085e <lookup+0xaa>
        }
    } else {
        index = hashNumeric(numericKey, dict->size);
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	4619      	mov	r1, r3
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ff39 	bl	800069a <hashNumeric>
 8000828:	6138      	str	r0, [r7, #16]
        current = dict->buckets[index];
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	617b      	str	r3, [r7, #20]
        while (current) {
 8000838:	e00e      	b.n	8000858 <lookup+0xa4>
            if (current->numericKey == numericKey) {
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	d106      	bne.n	8000852 <lookup+0x9e>
                *numTones = current->numTones;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	68da      	ldr	r2, [r3, #12]
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	601a      	str	r2, [r3, #0]
                return current->tones;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	e009      	b.n	8000866 <lookup+0xb2>
            }
            current = current->next;
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	617b      	str	r3, [r7, #20]
        while (current) {
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1ed      	bne.n	800083a <lookup+0x86>
        }
    }

    *numTones = 0;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
    return NULL;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <extractNumber>:
////}
//PWM END

//UART BEGIN

void extractNumber(const uint8_t *data) {
 8000870:	b5b0      	push	{r4, r5, r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	isCorrect = -1;
 8000878:	4b3d      	ldr	r3, [pc, #244]	; (8000970 <extractNumber+0x100>)
 800087a:	f04f 32ff 	mov.w	r2, #4294967295
 800087e:	601a      	str	r2, [r3, #0]
	// Extract the first four characters and convert them to integers
	char pass[19] = "PASS_CHANGED(XXXX)\n";
 8000880:	4b3c      	ldr	r3, [pc, #240]	; (8000974 <extractNumber+0x104>)
 8000882:	f107 0408 	add.w	r4, r7, #8
 8000886:	461d      	mov	r5, r3
 8000888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088c:	682b      	ldr	r3, [r5, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	8022      	strh	r2, [r4, #0]
 8000892:	3402      	adds	r4, #2
 8000894:	0c1b      	lsrs	r3, r3, #16
 8000896:	7023      	strb	r3, [r4, #0]
	pass[13] = data[9];
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3309      	adds	r3, #9
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	757b      	strb	r3, [r7, #21]
	pass[14] = data[10];
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	330a      	adds	r3, #10
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	75bb      	strb	r3, [r7, #22]
	pass[15] = data[11];
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	330b      	adds	r3, #11
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	75fb      	strb	r3, [r7, #23]
	pass[16] = data[12];
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	330c      	adds	r3, #12
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	763b      	strb	r3, [r7, #24]

	for (int i = 9; i < 13; i++) {
 80008b8:	2309      	movs	r3, #9
 80008ba:	61fb      	str	r3, [r7, #28]
 80008bc:	e037      	b.n	800092e <extractNumber+0xbe>
		if (data[i] <= '9' && data[i] >= '0') {
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	4413      	add	r3, r2
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b39      	cmp	r3, #57	; 0x39
 80008c8:	d814      	bhi.n	80008f4 <extractNumber+0x84>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	4413      	add	r3, r2
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b2f      	cmp	r3, #47	; 0x2f
 80008d4:	d90e      	bls.n	80008f4 <extractNumber+0x84>
			password[i - 9] = data[i] - '0';
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	3b09      	subs	r3, #9
 80008e4:	3a30      	subs	r2, #48	; 0x30
 80008e6:	4924      	ldr	r1, [pc, #144]	; (8000978 <extractNumber+0x108>)
 80008e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 9; i < 13; i++) {
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	3301      	adds	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
 80008f2:	e01c      	b.n	800092e <extractNumber+0xbe>
		} else {
			if (logStatus) {
 80008f4:	4b21      	ldr	r3, [pc, #132]	; (800097c <extractNumber+0x10c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d004      	beq.n	8000906 <extractNumber+0x96>
				HAL_UART_Transmit_IT(&huart1, "ERROR(INCORRECT FORMAT)\n", 24);
 80008fc:	2218      	movs	r2, #24
 80008fe:	4920      	ldr	r1, [pc, #128]	; (8000980 <extractNumber+0x110>)
 8000900:	4820      	ldr	r0, [pc, #128]	; (8000984 <extractNumber+0x114>)
 8000902:	f006 fc6d 	bl	80071e0 <HAL_UART_Transmit_IT>
			}
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2101      	movs	r1, #1
 800090a:	481f      	ldr	r0, [pc, #124]	; (8000988 <extractNumber+0x118>)
 800090c:	f003 fb16 	bl	8003f3c <HAL_GPIO_WritePin>
			buzzer_flag = WrongInput;
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <extractNumber+0x11c>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
			buzzerEnterTime = HAL_GetTick();
 8000916:	f001 fd0b 	bl	8002330 <HAL_GetTick>
 800091a:	4603      	mov	r3, r0
 800091c:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <extractNumber+0x120>)
 800091e:	6013      	str	r3, [r2, #0]
			if (alertStatus)
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <extractNumber+0x124>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d01f      	beq.n	8000968 <extractNumber+0xf8>
				PWM_Start();
 8000928:	f001 fa92 	bl	8001e50 <PWM_Start>
 800092c:	e01d      	b.n	800096a <extractNumber+0xfa>
	for (int i = 9; i < 13; i++) {
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	2b0c      	cmp	r3, #12
 8000932:	ddc4      	ble.n	80008be <extractNumber+0x4e>
			return;
		}
	}
	if (logStatus) {
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <extractNumber+0x10c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d016      	beq.n	800096a <extractNumber+0xfa>
		HAL_UART_Transmit_IT(&huart1, pass, 19);
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	2213      	movs	r2, #19
 8000942:	4619      	mov	r1, r3
 8000944:	480f      	ldr	r0, [pc, #60]	; (8000984 <extractNumber+0x114>)
 8000946:	f006 fc4b 	bl	80071e0 <HAL_UART_Transmit_IT>
		buzzer_flag = CorrectInput;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <extractNumber+0x11c>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
		buzzerEnterTime = HAL_GetTick();
 8000950:	f001 fcee 	bl	8002330 <HAL_GetTick>
 8000954:	4603      	mov	r3, r0
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <extractNumber+0x120>)
 8000958:	6013      	str	r3, [r2, #0]
		if (alertStatus)
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <extractNumber+0x124>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <extractNumber+0xfa>
			PWM_Start();
 8000962:	f001 fa75 	bl	8001e50 <PWM_Start>
 8000966:	e000      	b.n	800096a <extractNumber+0xfa>
			return;
 8000968:	bf00      	nop
	}
}
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bdb0      	pop	{r4, r5, r7, pc}
 8000970:	20000040 	.word	0x20000040
 8000974:	08009200 	.word	0x08009200
 8000978:	20000000 	.word	0x20000000
 800097c:	20000038 	.word	0x20000038
 8000980:	080091e4 	.word	0x080091e4
 8000984:	200002bc 	.word	0x200002bc
 8000988:	48000800 	.word	0x48000800
 800098c:	20000048 	.word	0x20000048
 8000990:	20000670 	.word	0x20000670
 8000994:	2000003c 	.word	0x2000003c

08000998 <compareStrings>:

int compareStrings(const char *str1, const uint8_t *str2, int n) {
 8000998:	b480      	push	{r7}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < n; i++) {
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	e00e      	b.n	80009c8 <compareStrings+0x30>
		if (str1[i] != str2[i]) {
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	68b9      	ldr	r1, [r7, #8]
 80009b6:	440b      	add	r3, r1
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d001      	beq.n	80009c2 <compareStrings+0x2a>
			return 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	e007      	b.n	80009d2 <compareStrings+0x3a>
	for (int i = 0; i < n; i++) {
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbec      	blt.n	80009aa <compareStrings+0x12>
		}
	}
	return 1;
 80009d0:	2301      	movs	r3, #1
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	371c      	adds	r7, #28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <HAL_UART_RxCpltCallback>:

uint8_t data[100];
uint8_t d;
uint8_t i;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a72      	ldr	r2, [pc, #456]	; (8000bb8 <HAL_UART_RxCpltCallback+0x1d8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	f040 80de 	bne.w	8000bb0 <HAL_UART_RxCpltCallback+0x1d0>
		HAL_UART_Receive_IT(&huart1, &d, 1);
 80009f4:	2201      	movs	r2, #1
 80009f6:	4971      	ldr	r1, [pc, #452]	; (8000bbc <HAL_UART_RxCpltCallback+0x1dc>)
 80009f8:	4871      	ldr	r0, [pc, #452]	; (8000bc0 <HAL_UART_RxCpltCallback+0x1e0>)
 80009fa:	f006 fc4f 	bl	800729c <HAL_UART_Receive_IT>
		data[i++] = d;
 80009fe:	4b71      	ldr	r3, [pc, #452]	; (8000bc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	b2d1      	uxtb	r1, r2
 8000a06:	4a6f      	ldr	r2, [pc, #444]	; (8000bc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a08:	7011      	strb	r1, [r2, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b6b      	ldr	r3, [pc, #428]	; (8000bbc <HAL_UART_RxCpltCallback+0x1dc>)
 8000a0e:	7819      	ldrb	r1, [r3, #0]
 8000a10:	4b6d      	ldr	r3, [pc, #436]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a12:	5499      	strb	r1, [r3, r2]
		if (d == '\n') {
 8000a14:	4b69      	ldr	r3, [pc, #420]	; (8000bbc <HAL_UART_RxCpltCallback+0x1dc>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b0a      	cmp	r3, #10
 8000a1a:	f040 80c9 	bne.w	8000bb0 <HAL_UART_RxCpltCallback+0x1d0>
			if ((i == 15 && compareStrings(setPass, data, 9) == 1)
 8000a1e:	4b69      	ldr	r3, [pc, #420]	; (8000bc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b0f      	cmp	r3, #15
 8000a24:	d11a      	bne.n	8000a5c <HAL_UART_RxCpltCallback+0x7c>
 8000a26:	2209      	movs	r2, #9
 8000a28:	4967      	ldr	r1, [pc, #412]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a2a:	4868      	ldr	r0, [pc, #416]	; (8000bcc <HAL_UART_RxCpltCallback+0x1ec>)
 8000a2c:	f7ff ffb4 	bl	8000998 <compareStrings>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d112      	bne.n	8000a5c <HAL_UART_RxCpltCallback+0x7c>
					&& isCorrect == -1) {
 8000a36:	4b66      	ldr	r3, [pc, #408]	; (8000bd0 <HAL_UART_RxCpltCallback+0x1f0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3e:	d10d      	bne.n	8000a5c <HAL_UART_RxCpltCallback+0x7c>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2101      	movs	r1, #1
 8000a44:	4863      	ldr	r0, [pc, #396]	; (8000bd4 <HAL_UART_RxCpltCallback+0x1f4>)
 8000a46:	f003 fa79 	bl	8003f3c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2104      	movs	r1, #4
 8000a4e:	4861      	ldr	r0, [pc, #388]	; (8000bd4 <HAL_UART_RxCpltCallback+0x1f4>)
 8000a50:	f003 fa74 	bl	8003f3c <HAL_GPIO_WritePin>
				extractNumber(data);
 8000a54:	485c      	ldr	r0, [pc, #368]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a56:	f7ff ff0b 	bl	8000870 <extractNumber>
 8000a5a:	e0a6      	b.n	8000baa <HAL_UART_RxCpltCallback+0x1ca>
			} else if (i == 7) {
 8000a5c:	4b59      	ldr	r3, [pc, #356]	; (8000bc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b07      	cmp	r3, #7
 8000a62:	d111      	bne.n	8000a88 <HAL_UART_RxCpltCallback+0xa8>
				if (compareStrings(logON, data, 6) == 1) {
 8000a64:	2206      	movs	r2, #6
 8000a66:	4958      	ldr	r1, [pc, #352]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a68:	485b      	ldr	r0, [pc, #364]	; (8000bd8 <HAL_UART_RxCpltCallback+0x1f8>)
 8000a6a:	f7ff ff95 	bl	8000998 <compareStrings>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	f040 809a 	bne.w	8000baa <HAL_UART_RxCpltCallback+0x1ca>
					logStatus = 1;
 8000a76:	4b59      	ldr	r3, [pc, #356]	; (8000bdc <HAL_UART_RxCpltCallback+0x1fc>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned ON\n",
 8000a7c:	2216      	movs	r2, #22
 8000a7e:	4958      	ldr	r1, [pc, #352]	; (8000be0 <HAL_UART_RxCpltCallback+0x200>)
 8000a80:	484f      	ldr	r0, [pc, #316]	; (8000bc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000a82:	f006 fbad 	bl	80071e0 <HAL_UART_Transmit_IT>
 8000a86:	e090      	b.n	8000baa <HAL_UART_RxCpltCallback+0x1ca>
							22);
				}
			} else if (i == 8) {
 8000a88:	4b4e      	ldr	r3, [pc, #312]	; (8000bc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b08      	cmp	r3, #8
 8000a8e:	d111      	bne.n	8000ab4 <HAL_UART_RxCpltCallback+0xd4>
				if (compareStrings(logOFF, data, 7) == 1) {
 8000a90:	2207      	movs	r2, #7
 8000a92:	494d      	ldr	r1, [pc, #308]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000a94:	4853      	ldr	r0, [pc, #332]	; (8000be4 <HAL_UART_RxCpltCallback+0x204>)
 8000a96:	f7ff ff7f 	bl	8000998 <compareStrings>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	f040 8084 	bne.w	8000baa <HAL_UART_RxCpltCallback+0x1ca>
					logStatus = 0;
 8000aa2:	4b4e      	ldr	r3, [pc, #312]	; (8000bdc <HAL_UART_RxCpltCallback+0x1fc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Log Turned OFF\n",
 8000aa8:	2217      	movs	r2, #23
 8000aaa:	494f      	ldr	r1, [pc, #316]	; (8000be8 <HAL_UART_RxCpltCallback+0x208>)
 8000aac:	4844      	ldr	r0, [pc, #272]	; (8000bc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000aae:	f006 fb97 	bl	80071e0 <HAL_UART_Transmit_IT>
 8000ab2:	e07a      	b.n	8000baa <HAL_UART_RxCpltCallback+0x1ca>
							23);
				}
			} else if (i == 9) {
 8000ab4:	4b43      	ldr	r3, [pc, #268]	; (8000bc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b09      	cmp	r3, #9
 8000aba:	d11a      	bne.n	8000af2 <HAL_UART_RxCpltCallback+0x112>
				if (compareStrings(alertON, data, 8) == 1) {
 8000abc:	2208      	movs	r2, #8
 8000abe:	4942      	ldr	r1, [pc, #264]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000ac0:	484a      	ldr	r0, [pc, #296]	; (8000bec <HAL_UART_RxCpltCallback+0x20c>)
 8000ac2:	f7ff ff69 	bl	8000998 <compareStrings>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d16e      	bne.n	8000baa <HAL_UART_RxCpltCallback+0x1ca>
					alertStatus = 1;
 8000acc:	4b48      	ldr	r3, [pc, #288]	; (8000bf0 <HAL_UART_RxCpltCallback+0x210>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned ON\n",
 8000ad2:	2219      	movs	r2, #25
 8000ad4:	4947      	ldr	r1, [pc, #284]	; (8000bf4 <HAL_UART_RxCpltCallback+0x214>)
 8000ad6:	483a      	ldr	r0, [pc, #232]	; (8000bc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000ad8:	f006 fb82 	bl	80071e0 <HAL_UART_Transmit_IT>
							25);
					buzzer_flag = CorrectInput;
 8000adc:	4b46      	ldr	r3, [pc, #280]	; (8000bf8 <HAL_UART_RxCpltCallback+0x218>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
					buzzerEnterTime = HAL_GetTick();
 8000ae2:	f001 fc25 	bl	8002330 <HAL_GetTick>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a44      	ldr	r2, [pc, #272]	; (8000bfc <HAL_UART_RxCpltCallback+0x21c>)
 8000aea:	6013      	str	r3, [r2, #0]
					PWM_Start();
 8000aec:	f001 f9b0 	bl	8001e50 <PWM_Start>
 8000af0:	e05b      	b.n	8000baa <HAL_UART_RxCpltCallback+0x1ca>
				}
			} else if (i == 10) {
 8000af2:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b0a      	cmp	r3, #10
 8000af8:	d110      	bne.n	8000b1c <HAL_UART_RxCpltCallback+0x13c>
				if (compareStrings(alertOFF, data, 9) == 1) {
 8000afa:	2209      	movs	r2, #9
 8000afc:	4932      	ldr	r1, [pc, #200]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000afe:	4840      	ldr	r0, [pc, #256]	; (8000c00 <HAL_UART_RxCpltCallback+0x220>)
 8000b00:	f7ff ff4a 	bl	8000998 <compareStrings>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d14f      	bne.n	8000baa <HAL_UART_RxCpltCallback+0x1ca>
					alertStatus = 0;
 8000b0a:	4b39      	ldr	r3, [pc, #228]	; (8000bf0 <HAL_UART_RxCpltCallback+0x210>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit_IT(&huart1, "Program Alerts Turned OFF\n",
 8000b10:	221a      	movs	r2, #26
 8000b12:	493c      	ldr	r1, [pc, #240]	; (8000c04 <HAL_UART_RxCpltCallback+0x224>)
 8000b14:	482a      	ldr	r0, [pc, #168]	; (8000bc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000b16:	f006 fb63 	bl	80071e0 <HAL_UART_Transmit_IT>
 8000b1a:	e046      	b.n	8000baa <HAL_UART_RxCpltCallback+0x1ca>
							26);
				}
			} else if (i == 14 && (data[11] - '0') < 6
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b0e      	cmp	r3, #14
 8000b22:	d12d      	bne.n	8000b80 <HAL_UART_RxCpltCallback+0x1a0>
 8000b24:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b26:	7adb      	ldrb	r3, [r3, #11]
 8000b28:	2b35      	cmp	r3, #53	; 0x35
 8000b2a:	d829      	bhi.n	8000b80 <HAL_UART_RxCpltCallback+0x1a0>
					&& (data[11] - '0') > -1) {
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b2e:	7adb      	ldrb	r3, [r3, #11]
 8000b30:	2b2f      	cmp	r3, #47	; 0x2f
 8000b32:	d925      	bls.n	8000b80 <HAL_UART_RxCpltCallback+0x1a0>
				if (compareStrings(setVolume, data, 11) == 1
 8000b34:	220b      	movs	r2, #11
 8000b36:	4924      	ldr	r1, [pc, #144]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b38:	4833      	ldr	r0, [pc, #204]	; (8000c08 <HAL_UART_RxCpltCallback+0x228>)
 8000b3a:	f7ff ff2d 	bl	8000998 <compareStrings>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d131      	bne.n	8000ba8 <HAL_UART_RxCpltCallback+0x1c8>
						&& data[12] == ')') {
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b46:	7b1b      	ldrb	r3, [r3, #12]
 8000b48:	2b29      	cmp	r3, #41	; 0x29
 8000b4a:	d12d      	bne.n	8000ba8 <HAL_UART_RxCpltCallback+0x1c8>
					int v = data[11] - '0';
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b4e:	7adb      	ldrb	r3, [r3, #11]
 8000b50:	3b30      	subs	r3, #48	; 0x30
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
//					_volume = v * 10;
					char massage[24] = "Program Volume Set To  \n";
 8000b54:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <HAL_UART_RxCpltCallback+0x22c>)
 8000b56:	f107 040c 	add.w	r4, r7, #12
 8000b5a:	461d      	mov	r5, r3
 8000b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b64:	e884 0003 	stmia.w	r4, {r0, r1}
					massage[22] = data[11];
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_UART_RxCpltCallback+0x1e8>)
 8000b6a:	7adb      	ldrb	r3, [r3, #11]
 8000b6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
					HAL_UART_Transmit_IT(&huart1, massage, 24);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2218      	movs	r2, #24
 8000b76:	4619      	mov	r1, r3
 8000b78:	4811      	ldr	r0, [pc, #68]	; (8000bc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000b7a:	f006 fb31 	bl	80071e0 <HAL_UART_Transmit_IT>
				if (compareStrings(setVolume, data, 11) == 1
 8000b7e:	e013      	b.n	8000ba8 <HAL_UART_RxCpltCallback+0x1c8>
				}
			} else {
				HAL_UART_Transmit_IT(&huart1, "INVALID INPUT\n", 14);
 8000b80:	220e      	movs	r2, #14
 8000b82:	4923      	ldr	r1, [pc, #140]	; (8000c10 <HAL_UART_RxCpltCallback+0x230>)
 8000b84:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <HAL_UART_RxCpltCallback+0x1e0>)
 8000b86:	f006 fb2b 	bl	80071e0 <HAL_UART_Transmit_IT>
				buzzer_flag = WrongInput;
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_UART_RxCpltCallback+0x218>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
				buzzerEnterTime = HAL_GetTick();
 8000b90:	f001 fbce 	bl	8002330 <HAL_GetTick>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a19      	ldr	r2, [pc, #100]	; (8000bfc <HAL_UART_RxCpltCallback+0x21c>)
 8000b98:	6013      	str	r3, [r2, #0]
				if (alertStatus)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_UART_RxCpltCallback+0x210>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_UART_RxCpltCallback+0x1ca>
					PWM_Start();
 8000ba2:	f001 f955 	bl	8001e50 <PWM_Start>
 8000ba6:	e000      	b.n	8000baa <HAL_UART_RxCpltCallback+0x1ca>
				if (compareStrings(setVolume, data, 11) == 1
 8000ba8:	bf00      	nop
			}

			i = 0;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_UART_RxCpltCallback+0x1e4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	; 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb8:	40013800 	.word	0x40013800
 8000bbc:	2000072c 	.word	0x2000072c
 8000bc0:	200002bc 	.word	0x200002bc
 8000bc4:	2000072d 	.word	0x2000072d
 8000bc8:	200006c8 	.word	0x200006c8
 8000bcc:	2000004c 	.word	0x2000004c
 8000bd0:	20000040 	.word	0x20000040
 8000bd4:	48000800 	.word	0x48000800
 8000bd8:	20000058 	.word	0x20000058
 8000bdc:	20000038 	.word	0x20000038
 8000be0:	08009214 	.word	0x08009214
 8000be4:	20000060 	.word	0x20000060
 8000be8:	0800922c 	.word	0x0800922c
 8000bec:	20000068 	.word	0x20000068
 8000bf0:	2000003c 	.word	0x2000003c
 8000bf4:	08009244 	.word	0x08009244
 8000bf8:	20000048 	.word	0x20000048
 8000bfc:	20000670 	.word	0x20000670
 8000c00:	20000070 	.word	0x20000070
 8000c04:	08009260 	.word	0x08009260
 8000c08:	2000007c 	.word	0x2000007c
 8000c0c:	0800928c 	.word	0x0800928c
 8000c10:	0800927c 	.word	0x0800927c

08000c14 <HAL_ADC_ConvCpltCallback>:
//UART END

//ADC Begin

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b09e      	sub	sp, #120	; 0x78
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c24:	d137      	bne.n	8000c96 <HAL_ADC_ConvCpltCallback+0x82>
	{
		uint32_t value;
		value = HAL_ADC_GetValue(hadc);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f001 fec2 	bl	80029b0 <HAL_ADC_GetValue>
 8000c2c:	6778      	str	r0, [r7, #116]	; 0x74
//		if(value > 3950)
//			value = 4095;
//		value = (value * 100) / 4095;
		char str[100];
		uint32_t step = (float)4095 / (10);
 8000c2e:	f240 1399 	movw	r3, #409	; 0x199
 8000c32:	673b      	str	r3, [r7, #112]	; 0x70
		value = (uint32_t)((float)value / step + 0.5);
 8000c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000c40:	ee07 3a90 	vmov	s15, r3
 8000c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000c4c:	ee16 0a90 	vmov	r0, s13
 8000c50:	f7ff fc8a 	bl	8000568 <__aeabi_f2d>
 8000c54:	f04f 0200 	mov.w	r2, #0
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000c5a:	f7ff fb27 	bl	80002ac <__adddf3>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	460b      	mov	r3, r1
 8000c62:	4610      	mov	r0, r2
 8000c64:	4619      	mov	r1, r3
 8000c66:	f7ff fcd7 	bl	8000618 <__aeabi_d2uiz>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	677b      	str	r3, [r7, #116]	; 0x74
		sprintf(str, "%lu\n",value);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000c74:	490b      	ldr	r1, [pc, #44]	; (8000ca4 <HAL_ADC_ConvCpltCallback+0x90>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f007 ff1a 	bl	8008ab0 <siprintf>
	    HAL_UART_Transmit_IT(&huart1, str, strlen(str));
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff faaf 	bl	80001e4 <strlen>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <HAL_ADC_ConvCpltCallback+0x94>)
 8000c92:	f006 faa5 	bl	80071e0 <HAL_UART_Transmit_IT>
	}
}
 8000c96:	bf00      	nop
 8000c98:	3778      	adds	r7, #120	; 0x78
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	3fe00000 	.word	0x3fe00000
 8000ca4:	080092a4 	.word	0x080092a4
 8000ca8:	200002bc 	.word	0x200002bc

08000cac <display_number>:
//ADC End

void display_number(int led_flag, int _number) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOD,
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	211e      	movs	r1, #30
 8000cba:	4813      	ldr	r0, [pc, #76]	; (8000d08 <display_number+0x5c>)
 8000cbc:	f003 f93e 	bl	8003f3c <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, led[led_flag], DISPLAY_ON);
 8000cc0:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <display_number+0x60>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480e      	ldr	r0, [pc, #56]	; (8000d08 <display_number+0x5c>)
 8000cce:	f003 f935 	bl	8003f3c <HAL_GPIO_WritePin>
	if (_number != 0) {
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d009      	beq.n	8000cec <display_number+0x40>
		HAL_GPIO_WritePin(GPIOD, digits[_number].pattern, GPIO_PIN_SET);
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <display_number+0x64>)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	4413      	add	r3, r2
 8000ce0:	889b      	ldrh	r3, [r3, #4]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4808      	ldr	r0, [pc, #32]	; (8000d08 <display_number+0x5c>)
 8000ce8:	f003 f928 	bl	8003f3c <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(GPIOD, digits[_number].anti_pattern, GPIO_PIN_RESET);
 8000cec:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <display_number+0x64>)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	88db      	ldrh	r3, [r3, #6]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4803      	ldr	r0, [pc, #12]	; (8000d08 <display_number+0x5c>)
 8000cfc:	f003 f91e 	bl	8003f3c <HAL_GPIO_WritePin>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	48000c00 	.word	0x48000c00
 8000d0c:	20000638 	.word	0x20000638
 8000d10:	20000678 	.word	0x20000678

08000d14 <increase>:

void increase(int _head) {
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	carrier[_head] += 1;
 8000d1c:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <increase+0x3c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d24:	1c5a      	adds	r2, r3, #1
 8000d26:	490a      	ldr	r1, [pc, #40]	; (8000d50 <increase+0x3c>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (carrier[_head] == 10) {
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <increase+0x3c>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	2b0a      	cmp	r3, #10
 8000d38:	d104      	bne.n	8000d44 <increase+0x30>
		carrier[_head] = 0;
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <increase+0x3c>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	20000640 	.word	0x20000640

08000d54 <init_display>:

void init_display() {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD,
 8000d58:	2201      	movs	r2, #1
 8000d5a:	211e      	movs	r1, #30
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <init_display+0x14>)
 8000d5e:	f003 f8ed 	bl	8003f3c <HAL_GPIO_WritePin>
	GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_SET);
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	48000c00 	.word	0x48000c00

08000d6c <initTonesDictionary>:

void initTonesDictionary() {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	f5ad 5d0f 	sub.w	sp, sp, #9152	; 0x23c0
 8000d72:	b08c      	sub	sp, #48	; 0x30
 8000d74:	af02      	add	r7, sp, #8
    playlist = initDictionary(10);
 8000d76:	200a      	movs	r0, #10
 8000d78:	f7ff fca2 	bl	80006c0 <initDictionary>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4a38      	ldr	r2, [pc, #224]	; (8000e60 <initTonesDictionary+0xf4>)
 8000d80:	6013      	str	r3, [r2, #0]

    // Example tones
    struct Tone super_mario_bros[]={{2637,306},{0,153},{2637,153},{0,153},{2093,153},{2637,153},{0,153},{3136,153},{0,459},{1586,153},{0,459},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,306},{2093,153},{0,306},{1586,153},{0,306},{1319,153},{0,306},{1760,153},{0,153},{1976,153},{0,153},{1865,153},{1760,153},{0,153},{1586,204},{2637,204},{3136,204},{3520,153},{0,153},{2794,153},{3136,153},{0,153},{2637,153},{0,153},{2093,153},{2349,153},{1976,153},{0,0}};
 8000d82:	f507 530f 	add.w	r3, r7, #9152	; 0x23c0
 8000d86:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000d8a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8000d8e:	4a35      	ldr	r2, [pc, #212]	; (8000e64 <initTonesDictionary+0xf8>)
 8000d90:	4618      	mov	r0, r3
 8000d92:	4611      	mov	r1, r2
 8000d94:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000d98:	461a      	mov	r2, r3
 8000d9a:	f007 fd83 	bl	80088a4 <memcpy>
    struct Tone hedwig_theme[]={{REST,750},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_C5,1124},{NOTE_A4,1124},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_F4,750},{NOTE_GS4,374},{NOTE_D4,2249},{NOTE_D4,374},{NOTE_G4,561},{NOTE_AS4,187},{NOTE_A4,374},{NOTE_G4,750},{NOTE_D5,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_B4,374},{NOTE_G4,2249},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_DS5,750},{NOTE_D5,374},{NOTE_CS5,750},{NOTE_A4,374},{NOTE_AS4,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_D4,374},{NOTE_D5,1700},{REST,150},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_D5,750},{NOTE_AS4,374},{NOTE_F5,750},{NOTE_E5,374},{NOTE_DS5,750},{NOTE_B4,374},{NOTE_DS5,561},{NOTE_D5,187},{NOTE_CS5,374},{NOTE_CS4,750},{NOTE_AS4,374},{NOTE_G4,2249},{0,0}};
 8000d9e:	f507 530f 	add.w	r3, r7, #9152	; 0x23c0
 8000da2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000da6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000daa:	4a2f      	ldr	r2, [pc, #188]	; (8000e68 <initTonesDictionary+0xfc>)
 8000dac:	4618      	mov	r0, r3
 8000dae:	4611      	mov	r1, r2
 8000db0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000db4:	461a      	mov	r2, r3
 8000db6:	f007 fd75 	bl	80088a4 <memcpy>
    struct Tone doom[]={{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_B2,67},{NOTE_D3,67},{NOTE_FS3,67},{NOTE_A3,67},{NOTE_FS3,67},{NOTE_D3,67},{NOTE_B2,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,534},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_DS3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_E3,133},{NOTE_F3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_G3,133},{NOTE_A2,133},{NOTE_A2,133},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_C4,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_A3,67},{NOTE_F3,67},{NOTE_D3,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_CS4,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_B3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_A3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_G3,133},{NOTE_CS3,133},{NOTE_CS3,133},{NOTE_GS3,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_B3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_A3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_G3,133},{NOTE_B2,133},{NOTE_B2,133},{NOTE_F3,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B3,67},{NOTE_G3,67},{NOTE_E3,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_G3,67},{NOTE_B3,67},{NOTE_E4,67},{NOTE_B3,67},{NOTE_G4,67},{NOTE_B4,67},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,534},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_D3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_AS2,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_B2,133},{NOTE_C3,133},{NOTE_E2,133},{NOTE_E2,133},{NOTE_E3,133},{NOTE_E2,133},{NOTE_E2,133},{0,0}};
 8000dba:	f507 539f 	add.w	r3, r7, #5088	; 0x13e0
 8000dbe:	f103 0308 	add.w	r3, r3, #8
 8000dc2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <initTonesDictionary+0x100>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	4611      	mov	r1, r2
 8000dcc:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	f007 fd67 	bl	80088a4 <memcpy>
    struct Tone fur_elise[] = {{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{REST,250},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,188},{NOTE_C5,750},{NOTE_F5,282},{NOTE_E5,94},{NOTE_E5,250},{NOTE_D5,250},{NOTE_AS5,282},{NOTE_A5,94},{NOTE_A5,188},{NOTE_G5,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,250},{NOTE_A4,250},{NOTE_A4,94},{NOTE_G4,94},{NOTE_A4,94},{NOTE_B4,94},{NOTE_C5,750},{NOTE_D5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_E5,188},{NOTE_F5,188},{NOTE_A4,188},{NOTE_C5,750},{NOTE_D5,282},{NOTE_B4,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_G4,94},{NOTE_G5,94},{NOTE_A4,94},{NOTE_G5,94},{NOTE_B4,94},{NOTE_G5,94},{NOTE_C5,94},{NOTE_G5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_E5,94},{NOTE_G5,94},{NOTE_C6,94},{NOTE_B5,94},{NOTE_A5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_D5,94},{NOTE_G5,94},{NOTE_F5,94},{NOTE_D5,94},{NOTE_E5,94},{NOTE_F5,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,94},{NOTE_B4,94},{NOTE_E5,94},{NOTE_DS5,94},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,375},{NOTE_B4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{NOTE_B4,188},{NOTE_C5,188},{NOTE_D5,188},{NOTE_E5,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,375},{NOTE_F4,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_C5,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_E5,188},{NOTE_E6,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_D5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,250},{REST,188},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,250},{REST,188},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,250},{REST,188},{REST,188},{REST,250},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_E5,1125},{NOTE_D5,750},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,750},{NOTE_A4,250},{NOTE_A4,250},{NOTE_C5,250},{NOTE_B4,250},{NOTE_A4,1125},{NOTE_CS5,1125},{NOTE_D5,750},{NOTE_E5,188},{NOTE_F5,188},{NOTE_F5,750},{NOTE_F5,250},{NOTE_F5,1125},{NOTE_DS5,750},{NOTE_D5,188},{NOTE_C5,188},{NOTE_AS4,750},{NOTE_A4,250},{NOTE_GS4,750},{NOTE_G4,250},{NOTE_A4,1125},{NOTE_B4,750},{REST,250},{NOTE_A3,141},{NOTE_C4,141},{NOTE_E4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_D5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_A4,141},{NOTE_C5,141},{NOTE_E5,141},{NOTE_A5,141},{NOTE_C6,141},{NOTE_E6,141},{NOTE_D6,141},{NOTE_C6,141},{NOTE_B5,141},{NOTE_AS5,141},{NOTE_A5,141},{NOTE_GS5,141},{NOTE_G5,141},{NOTE_FS5,141},{NOTE_F5,141},{NOTE_E5,141},{NOTE_DS5,141},{NOTE_D5,141},{NOTE_CS5,141},{NOTE_C5,141},{NOTE_B4,141},{NOTE_AS4,141},{NOTE_A4,141},{NOTE_GS4,141},{NOTE_G4,141},{NOTE_FS4,141},{NOTE_F4,141},{NOTE_E4,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,375},{REST,375},{REST,375},{NOTE_G4,188},{NOTE_F5,188},{NOTE_E5,188},{NOTE_D5,750},{REST,250},{REST,375},{NOTE_E4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_E5,250},{NOTE_E5,250},{NOTE_E6,375},{NOTE_DS5,188},{NOTE_E5,188},{REST,188},{REST,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_GS4,188},{NOTE_B4,188},{NOTE_C5,250},{REST,188},{NOTE_E4,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_DS5,188},{NOTE_E5,188},{NOTE_B4,188},{NOTE_D5,188},{NOTE_C5,188},{NOTE_A4,375},{NOTE_C4,188},{NOTE_E4,188},{NOTE_A4,188},{NOTE_B4,375},{NOTE_E4,188},{NOTE_C5,188},{NOTE_B4,188},{NOTE_A4,1125}};
 8000dd6:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8000dda:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000dde:	4a24      	ldr	r2, [pc, #144]	; (8000e70 <initTonesDictionary+0x104>)
 8000de0:	4618      	mov	r0, r3
 8000de2:	4611      	mov	r1, r2
 8000de4:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8000de8:	461a      	mov	r2, r3
 8000dea:	f007 fd5b 	bl	80088a4 <memcpy>
    // Insert tones into dictionary
    insert(playlist, "super_mario_bros", 0, super_mario_bros, sizeof(super_mario_bros) / sizeof(struct Tone));
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <initTonesDictionary+0xf4>)
 8000df0:	6818      	ldr	r0, [r3, #0]
 8000df2:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8000df6:	f103 0320 	add.w	r3, r3, #32
 8000dfa:	2241      	movs	r2, #65	; 0x41
 8000dfc:	9200      	str	r2, [sp, #0]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	491c      	ldr	r1, [pc, #112]	; (8000e74 <initTonesDictionary+0x108>)
 8000e02:	f7ff fc88 	bl	8000716 <insert>
    insert(playlist, "hedwig_theme", 1, hedwig_theme, sizeof(hedwig_theme) / sizeof(struct Tone));
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <initTonesDictionary+0xf4>)
 8000e08:	6818      	ldr	r0, [r3, #0]
 8000e0a:	f507 53ff 	add.w	r3, r7, #8160	; 0x1fe0
 8000e0e:	f103 0308 	add.w	r3, r3, #8
 8000e12:	223f      	movs	r2, #63	; 0x3f
 8000e14:	9200      	str	r2, [sp, #0]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4917      	ldr	r1, [pc, #92]	; (8000e78 <initTonesDictionary+0x10c>)
 8000e1a:	f7ff fc7c 	bl	8000716 <insert>
    insert(playlist, "doom", 2, doom, sizeof(doom) / sizeof(struct Tone));
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <initTonesDictionary+0xf4>)
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8000e26:	f103 0308 	add.w	r3, r3, #8
 8000e2a:	3b10      	subs	r3, #16
 8000e2c:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8000e30:	9200      	str	r2, [sp, #0]
 8000e32:	2202      	movs	r2, #2
 8000e34:	4911      	ldr	r1, [pc, #68]	; (8000e7c <initTonesDictionary+0x110>)
 8000e36:	f7ff fc6e 	bl	8000716 <insert>
    insert(playlist, "fur_elise", 3, fur_elise, sizeof(fur_elise) / sizeof(struct Tone));
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <initTonesDictionary+0xf4>)
 8000e3c:	6818      	ldr	r0, [r3, #0]
 8000e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e42:	3b28      	subs	r3, #40	; 0x28
 8000e44:	f240 225b 	movw	r2, #603	; 0x25b
 8000e48:	9200      	str	r2, [sp, #0]
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <initTonesDictionary+0x114>)
 8000e4e:	f7ff fc62 	bl	8000716 <insert>




}
 8000e52:	bf00      	nop
 8000e54:	f507 570f 	add.w	r7, r7, #9152	; 0x23c0
 8000e58:	3728      	adds	r7, #40	; 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000630 	.word	0x20000630
 8000e64:	080092e4 	.word	0x080092e4
 8000e68:	080094ec 	.word	0x080094ec
 8000e6c:	080096e4 	.word	0x080096e4
 8000e70:	0800a3f4 	.word	0x0800a3f4
 8000e74:	080092ac 	.word	0x080092ac
 8000e78:	080092c0 	.word	0x080092c0
 8000e7c:	080092d0 	.word	0x080092d0
 8000e80:	080092d8 	.word	0x080092d8

08000e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b096      	sub	sp, #88	; 0x58
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	struct digit _digits[10];
	_digits[0].number = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
	_digits[0].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 8000e8e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e92:	817b      	strh	r3, [r7, #10]
			| GPIO_PIN_15;

	_digits[1].number = 1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
	_digits[1].pattern = GPIO_PIN_12;
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	823b      	strh	r3, [r7, #16]
	_digits[1].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000e9e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ea2:	827b      	strh	r3, [r7, #18]

	_digits[2].number = 2;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	617b      	str	r3, [r7, #20]
	_digits[2].pattern = GPIO_PIN_13;
 8000ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eac:	833b      	strh	r3, [r7, #24]
	_digits[2].anti_pattern = GPIO_PIN_12 | GPIO_PIN_14 | GPIO_PIN_15;
 8000eae:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000eb2:	837b      	strh	r3, [r7, #26]

	_digits[3].number = 3;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	61fb      	str	r3, [r7, #28]
	_digits[3].pattern = GPIO_PIN_12 | GPIO_PIN_13;
 8000eb8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ebc:	843b      	strh	r3, [r7, #32]
	_digits[3].anti_pattern = GPIO_PIN_14 | GPIO_PIN_15;
 8000ebe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ec2:	847b      	strh	r3, [r7, #34]	; 0x22

	_digits[4].number = 4;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
	_digits[4].pattern = GPIO_PIN_14;
 8000ec8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ecc:	853b      	strh	r3, [r7, #40]	; 0x28
	_digits[4].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15;
 8000ece:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000ed2:	857b      	strh	r3, [r7, #42]	; 0x2a

	_digits[5].number = 5;
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
	_digits[5].pattern = GPIO_PIN_12 | GPIO_PIN_14;
 8000ed8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000edc:	863b      	strh	r3, [r7, #48]	; 0x30
	_digits[5].anti_pattern = GPIO_PIN_13 | GPIO_PIN_15;
 8000ede:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ee2:	867b      	strh	r3, [r7, #50]	; 0x32

	_digits[6].number = 6;
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
	_digits[6].pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000ee8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000eec:	873b      	strh	r3, [r7, #56]	; 0x38
	_digits[6].anti_pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000eee:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000ef2:	877b      	strh	r3, [r7, #58]	; 0x3a

	_digits[7].number = 7;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
	_digits[7].pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000ef8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000efc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	_digits[7].anti_pattern = GPIO_PIN_15;
 8000f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	_digits[8].number = 8;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	647b      	str	r3, [r7, #68]	; 0x44
	_digits[8].pattern = GPIO_PIN_15;
 8000f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f10:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	_digits[8].anti_pattern = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8000f14:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000f18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	_digits[9].number = 9;
 8000f1c:	2309      	movs	r3, #9
 8000f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
	_digits[9].pattern = GPIO_PIN_12 | GPIO_PIN_15;
 8000f20:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8000f24:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	_digits[9].anti_pattern = GPIO_PIN_13 | GPIO_PIN_14;
 8000f28:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f2c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	//initialize Global digits structure
	for (int i = 0; i < 10; i++) {
 8000f30:	2300      	movs	r3, #0
 8000f32:	657b      	str	r3, [r7, #84]	; 0x54
 8000f34:	e00f      	b.n	8000f56 <main+0xd2>
		digits[i] = _digits[i];
 8000f36:	492c      	ldr	r1, [pc, #176]	; (8000fe8 <main+0x164>)
 8000f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f3c:	00d2      	lsls	r2, r2, #3
 8000f3e:	3258      	adds	r2, #88	; 0x58
 8000f40:	443a      	add	r2, r7
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	3a54      	subs	r2, #84	; 0x54
 8000f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f4c:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 0; i < 10; i++) {
 8000f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f52:	3301      	adds	r3, #1
 8000f54:	657b      	str	r3, [r7, #84]	; 0x54
 8000f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f58:	2b09      	cmp	r3, #9
 8000f5a:	ddec      	ble.n	8000f36 <main+0xb2>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f001 f98e 	bl	800227c <HAL_Init>

  /* USER CODE BEGIN Init */

	//Set 7-segment PINS
	led[0] = GPIO_PIN_1;
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <main+0x168>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	801a      	strh	r2, [r3, #0]
	led[1] = GPIO_PIN_2;
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <main+0x168>)
 8000f68:	2204      	movs	r2, #4
 8000f6a:	805a      	strh	r2, [r3, #2]
	led[2] = GPIO_PIN_3;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <main+0x168>)
 8000f6e:	2208      	movs	r2, #8
 8000f70:	809a      	strh	r2, [r3, #4]
	led[3] = GPIO_PIN_4;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <main+0x168>)
 8000f74:	2210      	movs	r2, #16
 8000f76:	80da      	strh	r2, [r3, #6]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f78:	f000 f84a 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7c:	f000 faba 	bl	80014f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f80:	f000 f91e 	bl	80011c0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f84:	f000 f95c 	bl	8001240 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000f88:	f000 fa92 	bl	80014b0 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000f8c:	f000 f996 	bl	80012bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f90:	f000 f9e8 	bl	8001364 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000f94:	f000 fa5c 	bl	8001450 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000f98:	f000 f8a2 	bl	80010e0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8000f9c:	4814      	ldr	r0, [pc, #80]	; (8000ff0 <main+0x16c>)
 8000f9e:	f004 ff1b 	bl	8005dd8 <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit_IT(&huart1,
 8000fa2:	222c      	movs	r2, #44	; 0x2c
 8000fa4:	4913      	ldr	r1, [pc, #76]	; (8000ff4 <main+0x170>)
 8000fa6:	4814      	ldr	r0, [pc, #80]	; (8000ff8 <main+0x174>)
 8000fa8:	f006 f91a 	bl	80071e0 <HAL_UART_Transmit_IT>
			"=============\nProgram Running\n=============\n", 44);
	HAL_UART_Receive_IT(&huart1, &d, 1);
 8000fac:	2201      	movs	r2, #1
 8000fae:	4913      	ldr	r1, [pc, #76]	; (8000ffc <main+0x178>)
 8000fb0:	4811      	ldr	r0, [pc, #68]	; (8000ff8 <main+0x174>)
 8000fb2:	f006 f973 	bl	800729c <HAL_UART_Receive_IT>
	initTonesDictionary();
 8000fb6:	f7ff fed9 	bl	8000d6c <initTonesDictionary>
	PWM_Start();
 8000fba:	f000 ff49 	bl	8001e50 <PWM_Start>
	 int toneCount;
	 melody = lookup(playlist, "hedwig_theme", NULL, &toneCount);;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <main+0x17c>)
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	490f      	ldr	r1, [pc, #60]	; (8001004 <main+0x180>)
 8000fc8:	f7ff fbf4 	bl	80007b4 <lookup>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <main+0x184>)
 8000fd0:	6013      	str	r3, [r2, #0]
	 Change_Melody(melody, toneCount);
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <main+0x184>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fffc 	bl	8001fd8 <Change_Melody>

	 HAL_ADC_Start_IT(&hadc1);
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <main+0x188>)
 8000fe2:	f001 fba5 	bl	8002730 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fe6:	e7fe      	b.n	8000fe6 <main+0x162>
 8000fe8:	20000678 	.word	0x20000678
 8000fec:	20000638 	.word	0x20000638
 8000ff0:	20000224 	.word	0x20000224
 8000ff4:	0800b6cc 	.word	0x0800b6cc
 8000ff8:	200002bc 	.word	0x200002bc
 8000ffc:	2000072c 	.word	0x2000072c
 8001000:	20000630 	.word	0x20000630
 8001004:	080092c0 	.word	0x080092c0
 8001008:	20000634 	.word	0x20000634
 800100c:	2000011c 	.word	0x2000011c

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b09e      	sub	sp, #120	; 0x78
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800101a:	2228      	movs	r2, #40	; 0x28
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f007 fc4e 	bl	80088c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	223c      	movs	r2, #60	; 0x3c
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f007 fc40 	bl	80088c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001040:	2303      	movs	r3, #3
 8001042:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001044:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001048:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104e:	2301      	movs	r3, #1
 8001050:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001052:	2310      	movs	r3, #16
 8001054:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001056:	2302      	movs	r3, #2
 8001058:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001060:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001064:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001066:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800106a:	4618      	mov	r0, r3
 800106c:	f003 f98e 	bl	800438c <HAL_RCC_OscConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001076:	f000 fcf7 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107a:	230f      	movs	r3, #15
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107e:	2302      	movs	r3, #2
 8001080:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001090:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001094:	2101      	movs	r1, #1
 8001096:	4618      	mov	r0, r3
 8001098:	f004 f9b6 	bl	8005408 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010a2:	f000 fce1 	bl	8001a68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <SystemClock_Config+0xcc>)
 80010a8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80010ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80010b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4618      	mov	r0, r3
 80010c6:	f004 fbd5 	bl	8005874 <HAL_RCCEx_PeriphCLKConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010d0:	f000 fcca 	bl	8001a68 <Error_Handler>
  }
}
 80010d4:	bf00      	nop
 80010d6:	3778      	adds	r7, #120	; 0x78
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	000210a1 	.word	0x000210a1

080010e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001102:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <MX_ADC1_Init+0xdc>)
 8001104:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001108:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <MX_ADC1_Init+0xdc>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <MX_ADC1_Init+0xdc>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001116:	4b29      	ldr	r3, [pc, #164]	; (80011bc <MX_ADC1_Init+0xdc>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <MX_ADC1_Init+0xdc>)
 800111e:	2201      	movs	r2, #1
 8001120:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <MX_ADC1_Init+0xdc>)
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <MX_ADC1_Init+0xdc>)
 800112c:	2200      	movs	r2, #0
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <MX_ADC1_Init+0xdc>)
 8001132:	2201      	movs	r2, #1
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <MX_ADC1_Init+0xdc>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_ADC1_Init+0xdc>)
 800113e:	2201      	movs	r2, #1
 8001140:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <MX_ADC1_Init+0xdc>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_ADC1_Init+0xdc>)
 800114c:	2204      	movs	r2, #4
 800114e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_ADC1_Init+0xdc>)
 8001152:	2200      	movs	r2, #0
 8001154:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_ADC1_Init+0xdc>)
 8001158:	2200      	movs	r2, #0
 800115a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115c:	4817      	ldr	r0, [pc, #92]	; (80011bc <MX_ADC1_Init+0xdc>)
 800115e:	f001 f907 	bl	8002370 <HAL_ADC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001168:	f000 fc7e 	bl	8001a68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4811      	ldr	r0, [pc, #68]	; (80011bc <MX_ADC1_Init+0xdc>)
 8001178:	f002 fa22 	bl	80035c0 <HAL_ADCEx_MultiModeConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001182:	f000 fc71 	bl	8001a68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001186:	2305      	movs	r3, #5
 8001188:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800118a:	2301      	movs	r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8001192:	2306      	movs	r3, #6
 8001194:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_ADC1_Init+0xdc>)
 80011a4:	f001 ff20 	bl	8002fe8 <HAL_ADC_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80011ae:	f000 fc5b 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2000011c 	.word	0x2000011c

080011c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_I2C1_Init+0x74>)
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <MX_I2C1_Init+0x78>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_I2C1_Init+0x74>)
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <MX_I2C1_Init+0x7c>)
 80011ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <MX_I2C1_Init+0x74>)
 80011d8:	2201      	movs	r2, #1
 80011da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <MX_I2C1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_I2C1_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C1_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fa:	480e      	ldr	r0, [pc, #56]	; (8001234 <MX_I2C1_Init+0x74>)
 80011fc:	f002 fece 	bl	8003f9c <HAL_I2C_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001206:	f000 fc2f 	bl	8001a68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800120a:	2100      	movs	r1, #0
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <MX_I2C1_Init+0x74>)
 800120e:	f002 ff54 	bl	80040ba <HAL_I2CEx_ConfigAnalogFilter>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001218:	f000 fc26 	bl	8001a68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800121c:	2100      	movs	r1, #0
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_I2C1_Init+0x74>)
 8001220:	f002 ff96 	bl	8004150 <HAL_I2CEx_ConfigDigitalFilter>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800122a:	f000 fc1d 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000016c 	.word	0x2000016c
 8001238:	40005400 	.word	0x40005400
 800123c:	2000090e 	.word	0x2000090e

08001240 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <MX_SPI1_Init+0x78>)
 8001248:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_SPI1_Init+0x74>)
 800124c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001250:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_SPI1_Init+0x74>)
 800125a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800125e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_SPI1_Init+0x74>)
 800126e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001272:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001276:	2208      	movs	r2, #8
 8001278:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_SPI1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_SPI1_Init+0x74>)
 800128e:	2207      	movs	r2, #7
 8001290:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_SPI1_Init+0x74>)
 800129a:	2208      	movs	r2, #8
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_SPI1_Init+0x74>)
 80012a0:	f004 fc98 	bl	8005bd4 <HAL_SPI_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012aa:	f000 fbdd 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200001c0 	.word	0x200001c0
 80012b8:	40013000 	.word	0x40013000

080012bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <MX_TIM1_Init+0xa0>)
 80012dc:	4a20      	ldr	r2, [pc, #128]	; (8001360 <MX_TIM1_Init+0xa4>)
 80012de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800-1;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <MX_TIM1_Init+0xa0>)
 80012e2:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80012e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_TIM1_Init+0xa0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5-1;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_TIM1_Init+0xa0>)
 80012f0:	2204      	movs	r2, #4
 80012f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_TIM1_Init+0xa0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_TIM1_Init+0xa0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_TIM1_Init+0xa0>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001306:	4815      	ldr	r0, [pc, #84]	; (800135c <MX_TIM1_Init+0xa0>)
 8001308:	f004 fd0f 	bl	8005d2a <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001312:	f000 fba9 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <MX_TIM1_Init+0xa0>)
 8001324:	f005 f958 	bl	80065d8 <HAL_TIM_ConfigClockSource>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800132e:	f000 fb9b 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_TIM1_Init+0xa0>)
 8001344:	f005 fe60 	bl	8007008 <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800134e:	f000 fb8b 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000224 	.word	0x20000224
 8001360:	40012c00 	.word	0x40012c00

08001364 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08e      	sub	sp, #56	; 0x38
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001384:	463b      	mov	r3, r7
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
 8001392:	615a      	str	r2, [r3, #20]
 8001394:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <MX_TIM2_Init+0xe8>)
 8001398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800139c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800139e:	4b2b      	ldr	r3, [pc, #172]	; (800144c <MX_TIM2_Init+0xe8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <MX_TIM2_Init+0xe8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <MX_TIM2_Init+0xe8>)
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <MX_TIM2_Init+0xe8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <MX_TIM2_Init+0xe8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013be:	4823      	ldr	r0, [pc, #140]	; (800144c <MX_TIM2_Init+0xe8>)
 80013c0:	f004 fcb3 	bl	8005d2a <HAL_TIM_Base_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80013ca:	f000 fb4d 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d8:	4619      	mov	r1, r3
 80013da:	481c      	ldr	r0, [pc, #112]	; (800144c <MX_TIM2_Init+0xe8>)
 80013dc:	f005 f8fc 	bl	80065d8 <HAL_TIM_ConfigClockSource>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80013e6:	f000 fb3f 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013ea:	4818      	ldr	r0, [pc, #96]	; (800144c <MX_TIM2_Init+0xe8>)
 80013ec:	f004 fd5e 	bl	8005eac <HAL_TIM_PWM_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80013f6:	f000 fb37 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4810      	ldr	r0, [pc, #64]	; (800144c <MX_TIM2_Init+0xe8>)
 800140a:	f005 fdfd 	bl	8007008 <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001414:	f000 fb28 	bl	8001a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001418:	2360      	movs	r3, #96	; 0x60
 800141a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	4619      	mov	r1, r3
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <MX_TIM2_Init+0xe8>)
 8001430:	f004 ffbe 	bl	80063b0 <HAL_TIM_PWM_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800143a:	f000 fb15 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_TIM2_Init+0xe8>)
 8001440:	f000 fc40 	bl	8001cc4 <HAL_TIM_MspPostInit>

}
 8001444:	bf00      	nop
 8001446:	3738      	adds	r7, #56	; 0x38
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000270 	.word	0x20000270

08001450 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_USART1_UART_Init+0x58>)
 8001456:	4a15      	ldr	r2, [pc, #84]	; (80014ac <MX_USART1_UART_Init+0x5c>)
 8001458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <MX_USART1_UART_Init+0x58>)
 800145c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_USART1_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_USART1_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_USART1_UART_Init+0x58>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_USART1_UART_Init+0x58>)
 8001476:	220c      	movs	r2, #12
 8001478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_USART1_UART_Init+0x58>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_USART1_UART_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_USART1_UART_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_USART1_UART_Init+0x58>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_USART1_UART_Init+0x58>)
 8001494:	f005 fe56 	bl	8007144 <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800149e:	f000 fae3 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200002bc 	.word	0x200002bc
 80014ac:	40013800 	.word	0x40013800

080014b0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <MX_USB_PCD_Init+0x3c>)
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <MX_USB_PCD_Init+0x40>)
 80014b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_USB_PCD_Init+0x3c>)
 80014bc:	2208      	movs	r2, #8
 80014be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <MX_USB_PCD_Init+0x3c>)
 80014c2:	2202      	movs	r2, #2
 80014c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_USB_PCD_Init+0x3c>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80014cc:	4b07      	ldr	r3, [pc, #28]	; (80014ec <MX_USB_PCD_Init+0x3c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_USB_PCD_Init+0x3c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80014d8:	4804      	ldr	r0, [pc, #16]	; (80014ec <MX_USB_PCD_Init+0x3c>)
 80014da:	f002 fe85 	bl	80041e8 <HAL_PCD_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80014e4:	f000 fac0 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000344 	.word	0x20000344
 80014f0:	40005c00 	.word	0x40005c00

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	; 0x30
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800150a:	4b5e      	ldr	r3, [pc, #376]	; (8001684 <MX_GPIO_Init+0x190>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	4a5d      	ldr	r2, [pc, #372]	; (8001684 <MX_GPIO_Init+0x190>)
 8001510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001514:	6153      	str	r3, [r2, #20]
 8001516:	4b5b      	ldr	r3, [pc, #364]	; (8001684 <MX_GPIO_Init+0x190>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	4b58      	ldr	r3, [pc, #352]	; (8001684 <MX_GPIO_Init+0x190>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a57      	ldr	r2, [pc, #348]	; (8001684 <MX_GPIO_Init+0x190>)
 8001528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800152c:	6153      	str	r3, [r2, #20]
 800152e:	4b55      	ldr	r3, [pc, #340]	; (8001684 <MX_GPIO_Init+0x190>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800153a:	4b52      	ldr	r3, [pc, #328]	; (8001684 <MX_GPIO_Init+0x190>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	4a51      	ldr	r2, [pc, #324]	; (8001684 <MX_GPIO_Init+0x190>)
 8001540:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001544:	6153      	str	r3, [r2, #20]
 8001546:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <MX_GPIO_Init+0x190>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <MX_GPIO_Init+0x190>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a4b      	ldr	r2, [pc, #300]	; (8001684 <MX_GPIO_Init+0x190>)
 8001558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155c:	6153      	str	r3, [r2, #20]
 800155e:	4b49      	ldr	r3, [pc, #292]	; (8001684 <MX_GPIO_Init+0x190>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156a:	4b46      	ldr	r3, [pc, #280]	; (8001684 <MX_GPIO_Init+0x190>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	4a45      	ldr	r2, [pc, #276]	; (8001684 <MX_GPIO_Init+0x190>)
 8001570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001574:	6153      	str	r3, [r2, #20]
 8001576:	4b43      	ldr	r3, [pc, #268]	; (8001684 <MX_GPIO_Init+0x190>)
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b40      	ldr	r3, [pc, #256]	; (8001684 <MX_GPIO_Init+0x190>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a3f      	ldr	r2, [pc, #252]	; (8001684 <MX_GPIO_Init+0x190>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6153      	str	r3, [r2, #20]
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <MX_GPIO_Init+0x190>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	2108      	movs	r1, #8
 800159e:	483a      	ldr	r0, [pc, #232]	; (8001688 <MX_GPIO_Init+0x194>)
 80015a0:	f002 fccc 	bl	8003f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80015a4:	2200      	movs	r2, #0
 80015a6:	f24f 011e 	movw	r1, #61470	; 0xf01e
 80015aa:	4838      	ldr	r0, [pc, #224]	; (800168c <MX_GPIO_Init+0x198>)
 80015ac:	f002 fcc6 	bl	8003f3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80015b0:	2308      	movs	r3, #8
 80015b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4619      	mov	r1, r3
 80015c6:	4830      	ldr	r0, [pc, #192]	; (8001688 <MX_GPIO_Init+0x194>)
 80015c8:	f002 fb3e 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin;
 80015cc:	2330      	movs	r3, #48	; 0x30
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015d0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4829      	ldr	r0, [pc, #164]	; (8001688 <MX_GPIO_Init+0x194>)
 80015e2:	f002 fb31 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80015e6:	2305      	movs	r3, #5
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015ea:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80015ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f002 fb23 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001602:	230a      	movs	r3, #10
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001606:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800160a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800160c:	2302      	movs	r3, #2
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161a:	f002 fb15 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800161e:	f24f 031e 	movw	r3, #61470	; 0xf01e
 8001622:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4815      	ldr	r0, [pc, #84]	; (800168c <MX_GPIO_Init+0x198>)
 8001638:	f002 fb06 	bl	8003c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2006      	movs	r0, #6
 8001642:	f002 fa54 	bl	8003aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001646:	2006      	movs	r0, #6
 8001648:	f002 fa6d 	bl	8003b26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	2007      	movs	r0, #7
 8001652:	f002 fa4c 	bl	8003aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001656:	2007      	movs	r0, #7
 8001658:	f002 fa65 	bl	8003b26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	2008      	movs	r0, #8
 8001662:	f002 fa44 	bl	8003aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001666:	2008      	movs	r0, #8
 8001668:	f002 fa5d 	bl	8003b26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	2009      	movs	r0, #9
 8001672:	f002 fa3c 	bl	8003aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001676:	2009      	movs	r0, #9
 8001678:	f002 fa55 	bl	8003b26 <HAL_NVIC_EnableIRQ>

}
 800167c:	bf00      	nop
 800167e:	3730      	adds	r7, #48	; 0x30
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	48001000 	.word	0x48001000
 800168c:	48000c00 	.word	0x48000c00

08001690 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 800169a:	f000 fe49 	bl	8002330 <HAL_GetTick>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a91      	ldr	r2, [pc, #580]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x258>)
 80016a2:	6013      	str	r3, [r2, #0]
	if ((GPIO_Pin == GPIO_PIN_1) && LED != 4) {
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d116      	bne.n	80016d8 <HAL_GPIO_EXTI_Callback+0x48>
 80016aa:	4b90      	ldr	r3, [pc, #576]	; (80018ec <HAL_GPIO_EXTI_Callback+0x25c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b04      	cmp	r3, #4
 80016b0:	d012      	beq.n	80016d8 <HAL_GPIO_EXTI_Callback+0x48>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80016b2:	4b8d      	ldr	r3, [pc, #564]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x258>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4b8e      	ldr	r3, [pc, #568]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x260>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80016c0:	f240 8150 	bls.w	8001964 <HAL_GPIO_EXTI_Callback+0x2d4>
//			counterInside++;
			increase(LED);
 80016c4:	4b89      	ldr	r3, [pc, #548]	; (80018ec <HAL_GPIO_EXTI_Callback+0x25c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fb23 	bl	8000d14 <increase>
			previousMillis = currentMillis;
 80016ce:	4b86      	ldr	r3, [pc, #536]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x258>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a87      	ldr	r2, [pc, #540]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x260>)
 80016d4:	6013      	str	r3, [r2, #0]
		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80016d6:	e145      	b.n	8001964 <HAL_GPIO_EXTI_Callback+0x2d4>
		}
	} else if ((GPIO_Pin == GPIO_PIN_3)) {
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	2b08      	cmp	r3, #8
 80016dc:	f040 812a 	bne.w	8001934 <HAL_GPIO_EXTI_Callback+0x2a4>

		if ((currentMillis - previousMillis > DEBOUNCE_DELAY)) {
 80016e0:	4b81      	ldr	r3, [pc, #516]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x258>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b82      	ldr	r3, [pc, #520]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x260>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80016ee:	f240 8139 	bls.w	8001964 <HAL_GPIO_EXTI_Callback+0x2d4>
			if (nextTurn < 6)
 80016f2:	4b80      	ldr	r3, [pc, #512]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x264>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	dc04      	bgt.n	8001704 <HAL_GPIO_EXTI_Callback+0x74>
				nextTurn++;
 80016fa:	4b7e      	ldr	r3, [pc, #504]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x264>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a7c      	ldr	r2, [pc, #496]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x264>)
 8001702:	6013      	str	r3, [r2, #0]
			if ((isCorrect == -1) && nextTurn == 6) {
 8001704:	4b7c      	ldr	r3, [pc, #496]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x268>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800170c:	d126      	bne.n	800175c <HAL_GPIO_EXTI_Callback+0xcc>
 800170e:	4b79      	ldr	r3, [pc, #484]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x264>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b06      	cmp	r3, #6
 8001714:	d122      	bne.n	800175c <HAL_GPIO_EXTI_Callback+0xcc>
				for (int i = 0; i < 4; i++) {
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	e007      	b.n	800172c <HAL_GPIO_EXTI_Callback+0x9c>
					carrier[i] = 0;
 800171c:	4a77      	ldr	r2, [pc, #476]	; (80018fc <HAL_GPIO_EXTI_Callback+0x26c>)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2100      	movs	r1, #0
 8001722:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b03      	cmp	r3, #3
 8001730:	ddf4      	ble.n	800171c <HAL_GPIO_EXTI_Callback+0x8c>
				    //password[i] = 0;
				}
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2102      	movs	r1, #2
 8001736:	4872      	ldr	r0, [pc, #456]	; (8001900 <HAL_GPIO_EXTI_Callback+0x270>)
 8001738:	f002 fc00 	bl	8003f3c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2104      	movs	r1, #4
 8001740:	486f      	ldr	r0, [pc, #444]	; (8001900 <HAL_GPIO_EXTI_Callback+0x270>)
 8001742:	f002 fbfb 	bl	8003f3c <HAL_GPIO_WritePin>
				LED = -1;
 8001746:	4b69      	ldr	r3, [pc, #420]	; (80018ec <HAL_GPIO_EXTI_Callback+0x25c>)
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	601a      	str	r2, [r3, #0]
				nextTurn = 0;
 800174e:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x264>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
				blink = 1;
 8001754:	4b6b      	ldr	r3, [pc, #428]	; (8001904 <HAL_GPIO_EXTI_Callback+0x274>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]
				return;
 800175a:	e103      	b.n	8001964 <HAL_GPIO_EXTI_Callback+0x2d4>
			} else if ((isCorrect != 0 && isCorrect != 1)) {
 800175c:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x268>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80bb 	beq.w	80018dc <HAL_GPIO_EXTI_Callback+0x24c>
 8001766:	4b64      	ldr	r3, [pc, #400]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x268>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	f000 80b6 	beq.w	80018dc <HAL_GPIO_EXTI_Callback+0x24c>

				LED += 1;
 8001770:	4b5e      	ldr	r3, [pc, #376]	; (80018ec <HAL_GPIO_EXTI_Callback+0x25c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	4a5d      	ldr	r2, [pc, #372]	; (80018ec <HAL_GPIO_EXTI_Callback+0x25c>)
 8001778:	6013      	str	r3, [r2, #0]
				if (LED == 4) {
 800177a:	4b5c      	ldr	r3, [pc, #368]	; (80018ec <HAL_GPIO_EXTI_Callback+0x25c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b04      	cmp	r3, #4
 8001780:	f040 80ac 	bne.w	80018dc <HAL_GPIO_EXTI_Callback+0x24c>
					int bool = 1;
 8001784:	2301      	movs	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
					for (int i = 0; i < 4; i++) {
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	e061      	b.n	8001852 <HAL_GPIO_EXTI_Callback+0x1c2>
						if (password[i] != carrier[i]) {
 800178e:	4a5e      	ldr	r2, [pc, #376]	; (8001908 <HAL_GPIO_EXTI_Callback+0x278>)
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001796:	4959      	ldr	r1, [pc, #356]	; (80018fc <HAL_GPIO_EXTI_Callback+0x26c>)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d054      	beq.n	800184c <HAL_GPIO_EXTI_Callback+0x1bc>
							bool = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
							logFailed[4] = carrier[0] + '0';
 80017a6:	4b55      	ldr	r3, [pc, #340]	; (80018fc <HAL_GPIO_EXTI_Callback+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	3330      	adds	r3, #48	; 0x30
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	4b56      	ldr	r3, [pc, #344]	; (800190c <HAL_GPIO_EXTI_Callback+0x27c>)
 80017b2:	711a      	strb	r2, [r3, #4]
							logFailed[5] = carrier[1] + '0';
 80017b4:	4b51      	ldr	r3, [pc, #324]	; (80018fc <HAL_GPIO_EXTI_Callback+0x26c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	3330      	adds	r3, #48	; 0x30
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_GPIO_EXTI_Callback+0x27c>)
 80017c0:	715a      	strb	r2, [r3, #5]
							logFailed[6] = carrier[2] + '0';
 80017c2:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <HAL_GPIO_EXTI_Callback+0x26c>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3330      	adds	r3, #48	; 0x30
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4b4f      	ldr	r3, [pc, #316]	; (800190c <HAL_GPIO_EXTI_Callback+0x27c>)
 80017ce:	719a      	strb	r2, [r3, #6]
							logFailed[7] = carrier[3] + '0';
 80017d0:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <HAL_GPIO_EXTI_Callback+0x26c>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3330      	adds	r3, #48	; 0x30
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b4c      	ldr	r3, [pc, #304]	; (800190c <HAL_GPIO_EXTI_Callback+0x27c>)
 80017dc:	71da      	strb	r2, [r3, #7]
							isCorrect = 0;
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x268>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
							if (logStatus)
 80017e4:	4b4a      	ldr	r3, [pc, #296]	; (8001910 <HAL_GPIO_EXTI_Callback+0x280>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <HAL_GPIO_EXTI_Callback+0x166>
								HAL_UART_Transmit_IT(&huart1, logFailed, 18);
 80017ec:	2212      	movs	r2, #18
 80017ee:	4947      	ldr	r1, [pc, #284]	; (800190c <HAL_GPIO_EXTI_Callback+0x27c>)
 80017f0:	4848      	ldr	r0, [pc, #288]	; (8001914 <HAL_GPIO_EXTI_Callback+0x284>)
 80017f2:	f005 fcf5 	bl	80071e0 <HAL_UART_Transmit_IT>
							prevEnterTime = HAL_GetTick();
 80017f6:	f000 fd9b 	bl	8002330 <HAL_GetTick>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4a46      	ldr	r2, [pc, #280]	; (8001918 <HAL_GPIO_EXTI_Callback+0x288>)
 80017fe:	6013      	str	r3, [r2, #0]
							wrongPassCounter++;
 8001800:	4b46      	ldr	r3, [pc, #280]	; (800191c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a45      	ldr	r2, [pc, #276]	; (800191c <HAL_GPIO_EXTI_Callback+0x28c>)
 8001808:	6013      	str	r3, [r2, #0]
							if (wrongPassCounter % 3 == 0)
 800180a:	4b44      	ldr	r3, [pc, #272]	; (800191c <HAL_GPIO_EXTI_Callback+0x28c>)
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	4b44      	ldr	r3, [pc, #272]	; (8001920 <HAL_GPIO_EXTI_Callback+0x290>)
 8001810:	fb83 3201 	smull	r3, r2, r3, r1
 8001814:	17cb      	asrs	r3, r1, #31
 8001816:	1ad2      	subs	r2, r2, r3
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	1aca      	subs	r2, r1, r3
 8001820:	2a00      	cmp	r2, #0
 8001822:	d103      	bne.n	800182c <HAL_GPIO_EXTI_Callback+0x19c>
								buzzer_flag = SuperWrongPass;
 8001824:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_GPIO_EXTI_Callback+0x294>)
 8001826:	2204      	movs	r2, #4
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e002      	b.n	8001832 <HAL_GPIO_EXTI_Callback+0x1a2>
							else
								buzzer_flag = WrongPass;
 800182c:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_GPIO_EXTI_Callback+0x294>)
 800182e:	2203      	movs	r2, #3
 8001830:	701a      	strb	r2, [r3, #0]
							buzzerEnterTime = HAL_GetTick();
 8001832:	f000 fd7d 	bl	8002330 <HAL_GetTick>
 8001836:	4603      	mov	r3, r0
 8001838:	4a3b      	ldr	r2, [pc, #236]	; (8001928 <HAL_GPIO_EXTI_Callback+0x298>)
 800183a:	6013      	str	r3, [r2, #0]
							if (alertStatus)
 800183c:	4b3b      	ldr	r3, [pc, #236]	; (800192c <HAL_GPIO_EXTI_Callback+0x29c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 808e 	beq.w	8001962 <HAL_GPIO_EXTI_Callback+0x2d2>
								PWM_Start();
 8001846:	f000 fb03 	bl	8001e50 <PWM_Start>
							return;
 800184a:	e08a      	b.n	8001962 <HAL_GPIO_EXTI_Callback+0x2d2>
					for (int i = 0; i < 4; i++) {
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	3301      	adds	r3, #1
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	2b03      	cmp	r3, #3
 8001856:	dd9a      	ble.n	800178e <HAL_GPIO_EXTI_Callback+0xfe>
						}
					}
					if (bool) {
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d03e      	beq.n	80018dc <HAL_GPIO_EXTI_Callback+0x24c>
						logCorrect[4] = carrier[0] + '0';
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <HAL_GPIO_EXTI_Callback+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	3330      	adds	r3, #48	; 0x30
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800186a:	711a      	strb	r2, [r3, #4]
						logCorrect[5] = carrier[1] + '0';
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_GPIO_EXTI_Callback+0x26c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	3330      	adds	r3, #48	; 0x30
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001878:	715a      	strb	r2, [r3, #5]
						logCorrect[6] = carrier[2] + '0';
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_GPIO_EXTI_Callback+0x26c>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	3330      	adds	r3, #48	; 0x30
 8001882:	b2da      	uxtb	r2, r3
 8001884:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001886:	719a      	strb	r2, [r3, #6]
						logCorrect[7] = carrier[3] + '0';
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <HAL_GPIO_EXTI_Callback+0x26c>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	3330      	adds	r3, #48	; 0x30
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001894:	71da      	strb	r2, [r3, #7]
						isCorrect = 1;
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x268>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]
						if (logStatus)
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_GPIO_EXTI_Callback+0x280>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_GPIO_EXTI_Callback+0x21e>
							HAL_UART_Transmit_IT(&huart1, logCorrect, 19);
 80018a4:	2213      	movs	r2, #19
 80018a6:	4922      	ldr	r1, [pc, #136]	; (8001930 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80018a8:	481a      	ldr	r0, [pc, #104]	; (8001914 <HAL_GPIO_EXTI_Callback+0x284>)
 80018aa:	f005 fc99 	bl	80071e0 <HAL_UART_Transmit_IT>
						prevEnterTime = HAL_GetTick();
 80018ae:	f000 fd3f 	bl	8002330 <HAL_GetTick>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_GPIO_EXTI_Callback+0x288>)
 80018b6:	6013      	str	r3, [r2, #0]
						buzzer_flag = CorrectPass;
 80018b8:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_GPIO_EXTI_Callback+0x294>)
 80018ba:	2202      	movs	r2, #2
 80018bc:	701a      	strb	r2, [r3, #0]
						buzzerEnterTime = HAL_GetTick();
 80018be:	f000 fd37 	bl	8002330 <HAL_GetTick>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4a18      	ldr	r2, [pc, #96]	; (8001928 <HAL_GPIO_EXTI_Callback+0x298>)
 80018c6:	6013      	str	r3, [r2, #0]
						if (alertStatus)
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_GPIO_EXTI_Callback+0x29c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_GPIO_EXTI_Callback+0x244>
							PWM_Start();
 80018d0:	f000 fabe 	bl	8001e50 <PWM_Start>
						wrongPassCounter = 0;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_GPIO_EXTI_Callback+0x28c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
						return;
 80018da:	e043      	b.n	8001964 <HAL_GPIO_EXTI_Callback+0x2d4>
					}
				}
			}
			previousMillis = currentMillis;
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <HAL_GPIO_EXTI_Callback+0x258>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x260>)
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	e03e      	b.n	8001964 <HAL_GPIO_EXTI_Callback+0x2d4>
 80018e6:	bf00      	nop
 80018e8:	20000658 	.word	0x20000658
 80018ec:	20000674 	.word	0x20000674
 80018f0:	20000654 	.word	0x20000654
 80018f4:	20000664 	.word	0x20000664
 80018f8:	20000040 	.word	0x20000040
 80018fc:	20000640 	.word	0x20000640
 8001900:	48000800 	.word	0x48000800
 8001904:	20000044 	.word	0x20000044
 8001908:	20000000 	.word	0x20000000
 800190c:	20000024 	.word	0x20000024
 8001910:	20000038 	.word	0x20000038
 8001914:	200002bc 	.word	0x200002bc
 8001918:	2000066c 	.word	0x2000066c
 800191c:	20000650 	.word	0x20000650
 8001920:	55555556 	.word	0x55555556
 8001924:	20000048 	.word	0x20000048
 8001928:	20000670 	.word	0x20000670
 800192c:	2000003c 	.word	0x2000003c
 8001930:	20000010 	.word	0x20000010
		}

	} else if (GPIO_Pin == GPIO_PIN_0 && isCorrect == 0) {
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d114      	bne.n	8001964 <HAL_GPIO_EXTI_Callback+0x2d4>
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_GPIO_EXTI_Callback+0x2dc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d110      	bne.n	8001964 <HAL_GPIO_EXTI_Callback+0x2d4>
		blink = 0;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
		isCorrect = -1;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_GPIO_EXTI_Callback+0x2dc>)
 800194a:	f04f 32ff 	mov.w	r2, #4294967295
 800194e:	601a      	str	r2, [r3, #0]
		prevEnterTime = HAL_GetTick();
 8001950:	f000 fcee 	bl	8002330 <HAL_GetTick>
 8001954:	4603      	mov	r3, r0
 8001956:	4a07      	ldr	r2, [pc, #28]	; (8001974 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001958:	6013      	str	r3, [r2, #0]
//		PWM_Stop();
		buzzer_flag = NONE;
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800195c:	2205      	movs	r2, #5
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	e000      	b.n	8001964 <HAL_GPIO_EXTI_Callback+0x2d4>
							return;
 8001962:	bf00      	nop
	}
}
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000040 	.word	0x20000040
 8001970:	20000044 	.word	0x20000044
 8001974:	2000066c 	.word	0x2000066c
 8001978:	20000048 	.word	0x20000048

0800197c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a31      	ldr	r2, [pc, #196]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d15c      	bne.n	8001a48 <HAL_TIM_PeriodElapsedCallback+0xcc>
		if (index == LED && HAL_GetTick() - prevTime < 400) {
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d119      	bne.n	80019ce <HAL_TIM_PeriodElapsedCallback+0x52>
 800199a:	f000 fcc9 	bl	8002330 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	4b2e      	ldr	r3, [pc, #184]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80019aa:	d210      	bcs.n	80019ce <HAL_TIM_PeriodElapsedCallback+0x52>
			display_number(index, carrier[index]);
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	492a      	ldr	r1, [pc, #168]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80019b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4610      	mov	r0, r2
 80019be:	f7ff f975 	bl	8000cac <display_number>
			coolDownTimer = HAL_GetTick();
 80019c2:	f000 fcb5 	bl	8002330 <HAL_GetTick>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e02d      	b.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0xae>
		} else if (index == LED && HAL_GetTick() - prevTime > 900) {
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d116      	bne.n	8001a08 <HAL_TIM_PeriodElapsedCallback+0x8c>
 80019da:	f000 fca9 	bl	8002330 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80019ea:	d90d      	bls.n	8001a08 <HAL_TIM_PeriodElapsedCallback+0x8c>
			//coolDown
			if (HAL_GetTick() - coolDownTimer > 100) {
 80019ec:	f000 fca0 	bl	8002330 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b64      	cmp	r3, #100	; 0x64
 80019fa:	d916      	bls.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0xae>
				prevTime = HAL_GetTick();
 80019fc:	f000 fc98 	bl	8002330 <HAL_GetTick>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001a04:	6013      	str	r3, [r2, #0]
			if (HAL_GetTick() - coolDownTimer > 100) {
 8001a06:	e010      	b.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0xae>
			}
		} else if (index != LED) {
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d00a      	beq.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0xae>
			display_number(index, carrier[index]);
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4910      	ldr	r1, [pc, #64]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001a1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a22:	4619      	mov	r1, r3
 8001a24:	4610      	mov	r0, r2
 8001a26:	f7ff f941 	bl	8000cac <display_number>
		}
		if (index == 4) {
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d105      	bne.n	8001a3e <HAL_TIM_PeriodElapsedCallback+0xc2>
			index = 0;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
			init_display();
 8001a38:	f7ff f98c 	bl	8000d54 <init_display>
//		case SuperWrongPass:
//			PWM_Change_Tone(1000, _volume);
//			break;
//		}
	}
}
 8001a3c:	e004      	b.n	8001a48 <HAL_TIM_PeriodElapsedCallback+0xcc>
			++index;
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3301      	adds	r3, #1
 8001a44:	4a03      	ldr	r2, [pc, #12]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40012c00 	.word	0x40012c00
 8001a54:	20000668 	.word	0x20000668
 8001a58:	20000674 	.word	0x20000674
 8001a5c:	2000065c 	.word	0x2000065c
 8001a60:	20000640 	.word	0x20000640
 8001a64:	20000660 	.word	0x20000660

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a70:	e7fe      	b.n	8001a70 <Error_Handler+0x8>
	...

08001a74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_MspInit+0x44>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_MspInit+0x44>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6193      	str	r3, [r2, #24]
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_MspInit+0x44>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_MspInit+0x44>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_MspInit+0x44>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_MspInit+0x44>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aaa:	2007      	movs	r0, #7
 8001aac:	f002 f814 	bl	8003ad8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000

08001abc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	; 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001adc:	d12b      	bne.n	8001b36 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_ADC_MspInit+0x84>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	4a17      	ldr	r2, [pc, #92]	; (8001b40 <HAL_ADC_MspInit+0x84>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	6153      	str	r3, [r2, #20]
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_ADC_MspInit+0x84>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_ADC_MspInit+0x84>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	4a11      	ldr	r2, [pc, #68]	; (8001b40 <HAL_ADC_MspInit+0x84>)
 8001afc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b00:	6153      	str	r3, [r2, #20]
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_ADC_MspInit+0x84>)
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b0e:	2310      	movs	r3, #16
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b12:	2303      	movs	r3, #3
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4808      	ldr	r0, [pc, #32]	; (8001b44 <HAL_ADC_MspInit+0x88>)
 8001b22:	f002 f891 	bl	8003c48 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2012      	movs	r0, #18
 8001b2c:	f001 ffdf 	bl	8003aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b30:	2012      	movs	r0, #18
 8001b32:	f001 fff8 	bl	8003b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48001400 	.word	0x48001400

08001b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <HAL_I2C_MspInit+0x7c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d127      	bne.n	8001bba <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <HAL_I2C_MspInit+0x80>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <HAL_I2C_MspInit+0x80>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6153      	str	r3, [r2, #20]
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_I2C_MspInit+0x80>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001b82:	23c0      	movs	r3, #192	; 0xc0
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b86:	2312      	movs	r3, #18
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b92:	2304      	movs	r3, #4
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <HAL_I2C_MspInit+0x84>)
 8001b9e:	f002 f853 	bl	8003c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_I2C_MspInit+0x80>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_I2C_MspInit+0x80>)
 8001ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bac:	61d3      	str	r3, [r2, #28]
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_I2C_MspInit+0x80>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40005400 	.word	0x40005400
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	48000400 	.word	0x48000400

08001bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <HAL_SPI_MspInit+0x7c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d128      	bne.n	8001c44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <HAL_SPI_MspInit+0x80>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	4a16      	ldr	r2, [pc, #88]	; (8001c50 <HAL_SPI_MspInit+0x80>)
 8001bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bfc:	6193      	str	r3, [r2, #24]
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_SPI_MspInit+0x80>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_SPI_MspInit+0x80>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4a10      	ldr	r2, [pc, #64]	; (8001c50 <HAL_SPI_MspInit+0x80>)
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	6153      	str	r3, [r2, #20]
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_SPI_MspInit+0x80>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001c22:	23e0      	movs	r3, #224	; 0xe0
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c32:	2305      	movs	r3, #5
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f002 f802 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40013000 	.word	0x40013000
 8001c50:	40021000 	.word	0x40021000

08001c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a16      	ldr	r2, [pc, #88]	; (8001cbc <HAL_TIM_Base_MspInit+0x68>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d114      	bne.n	8001c90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c70:	6193      	str	r3, [r2, #24]
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2019      	movs	r0, #25
 8001c84:	f001 ff33 	bl	8003aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c88:	2019      	movs	r0, #25
 8001c8a:	f001 ff4c 	bl	8003b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c8e:	e010      	b.n	8001cb2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d10b      	bne.n	8001cb2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	61d3      	str	r3, [r2, #28]
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40012c00 	.word	0x40012c00
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce4:	d11d      	bne.n	8001d22 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_TIM_MspPostInit+0x68>)
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_TIM_MspPostInit+0x68>)
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	6153      	str	r3, [r2, #20]
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_TIM_MspPostInit+0x68>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d10:	2301      	movs	r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1e:	f001 ff93 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d22:	bf00      	nop
 8001d24:	3720      	adds	r7, #32
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <HAL_UART_MspInit+0x8c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12f      	bne.n	8001db2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d52:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_UART_MspInit+0x90>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	4a1a      	ldr	r2, [pc, #104]	; (8001dc0 <HAL_UART_MspInit+0x90>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6193      	str	r3, [r2, #24]
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_UART_MspInit+0x90>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_UART_MspInit+0x90>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <HAL_UART_MspInit+0x90>)
 8001d70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d74:	6153      	str	r3, [r2, #20]
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_UART_MspInit+0x90>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d82:	2330      	movs	r3, #48	; 0x30
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d92:	2307      	movs	r3, #7
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <HAL_UART_MspInit+0x94>)
 8001d9e:	f001 ff53 	bl	8003c48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	2025      	movs	r0, #37	; 0x25
 8001da8:	f001 fea1 	bl	8003aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dac:	2025      	movs	r0, #37	; 0x25
 8001dae:	f001 feba 	bl	8003b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	; 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40013800 	.word	0x40013800
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	48000800 	.word	0x48000800

08001dc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <HAL_PCD_MspInit+0x80>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d129      	bne.n	8001e3e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_PCD_MspInit+0x84>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_PCD_MspInit+0x84>)
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	6153      	str	r3, [r2, #20]
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_PCD_MspInit+0x84>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001e02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001e14:	230e      	movs	r3, #14
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e22:	f001 ff11 	bl	8003c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_PCD_MspInit+0x84>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <HAL_PCD_MspInit+0x84>)
 8001e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e30:	61d3      	str	r3, [r2, #28]
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_PCD_MspInit+0x84>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40005c00 	.word	0x40005c00
 8001e4c:	40021000 	.word	0x40021000

08001e50 <PWM_Start>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start() {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <PWM_Start+0x18>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <PWM_Start+0x1c>)
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 f886 	bl	8005f70 <HAL_TIM_PWM_Start>
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000088 	.word	0x20000088
 8001e6c:	20000730 	.word	0x20000730

08001e70 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	460a      	mov	r2, r1
 8001e7a:	80fb      	strh	r3, [r7, #6]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	80bb      	strh	r3, [r7, #4]
	if (pwm_freq == 0 || pwm_freq > 20000) {
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <PWM_Change_Tone+0x20>
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d937      	bls.n	8001f00 <PWM_Change_Tone+0x90>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 8001e90:	4b4e      	ldr	r3, [pc, #312]	; (8001fcc <PWM_Change_Tone+0x15c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d105      	bne.n	8001ea4 <PWM_Change_Tone+0x34>
 8001e98:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea2:	e08e      	b.n	8001fc2 <PWM_Change_Tone+0x152>
 8001ea4:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <PWM_Change_Tone+0x15c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d105      	bne.n	8001eb8 <PWM_Change_Tone+0x48>
 8001eac:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	6393      	str	r3, [r2, #56]	; 0x38
 8001eb6:	e084      	b.n	8001fc2 <PWM_Change_Tone+0x152>
 8001eb8:	4b44      	ldr	r3, [pc, #272]	; (8001fcc <PWM_Change_Tone+0x15c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d105      	bne.n	8001ecc <PWM_Change_Tone+0x5c>
 8001ec0:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001eca:	e07a      	b.n	8001fc2 <PWM_Change_Tone+0x152>
 8001ecc:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <PWM_Change_Tone+0x15c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b0c      	cmp	r3, #12
 8001ed2:	d105      	bne.n	8001ee0 <PWM_Change_Tone+0x70>
 8001ed4:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	2300      	movs	r3, #0
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	e070      	b.n	8001fc2 <PWM_Change_Tone+0x152>
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <PWM_Change_Tone+0x15c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b10      	cmp	r3, #16
 8001ee6:	d105      	bne.n	8001ef4 <PWM_Change_Tone+0x84>
 8001ee8:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef2:	e066      	b.n	8001fc2 <PWM_Change_Tone+0x152>
 8001ef4:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	2300      	movs	r3, #0
 8001efc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001efe:	e060      	b.n	8001fc2 <PWM_Change_Tone+0x152>
	} else {
		const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8001f00:	f003 fbfe 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 8001f04:	61f8      	str	r0, [r7, #28]
		const uint16_t prescaler = 1;
 8001f06:	2301      	movs	r3, #1
 8001f08:	837b      	strh	r3, [r7, #26]
		const uint32_t timer_clock = internal_clock_freq / prescaler;
 8001f0a:	8b7b      	ldrh	r3, [r7, #26]
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
		const uint32_t period_cycles = timer_clock / pwm_freq;
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1c:	613b      	str	r3, [r7, #16]
		const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8001f1e:	88bb      	ldrh	r3, [r7, #4]
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	4a2b      	ldr	r2, [pc, #172]	; (8001fd4 <PWM_Change_Tone+0x164>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	09db      	lsrs	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

		pwm_timer->Instance->PSC = prescaler - 1;
 8001f30:	8b7b      	ldrh	r3, [r7, #26]
 8001f32:	1e5a      	subs	r2, r3, #1
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
		pwm_timer->Instance->ARR = period_cycles - 1;
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	3a01      	subs	r2, #1
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c
		pwm_timer->Instance->EGR = TIM_EGR_UG;
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	615a      	str	r2, [r3, #20]
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <PWM_Change_Tone+0x15c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d105      	bne.n	8001f66 <PWM_Change_Tone+0xf6>
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001f64:	e02d      	b.n	8001fc2 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <PWM_Change_Tone+0x15c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d105      	bne.n	8001f7a <PWM_Change_Tone+0x10a>
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f78:	e023      	b.n	8001fc2 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <PWM_Change_Tone+0x15c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d105      	bne.n	8001f8e <PWM_Change_Tone+0x11e>
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001f8c:	e019      	b.n	8001fc2 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <PWM_Change_Tone+0x15c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d105      	bne.n	8001fa2 <PWM_Change_Tone+0x132>
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001fa0:	e00f      	b.n	8001fc2 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <PWM_Change_Tone+0x15c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d105      	bne.n	8001fb6 <PWM_Change_Tone+0x146>
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001fb4:	e005      	b.n	8001fc2 <PWM_Change_Tone+0x152>
		__HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <PWM_Change_Tone+0x160>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001fc0:	e7ff      	b.n	8001fc2 <PWM_Change_Tone+0x152>
 8001fc2:	bf00      	nop
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000730 	.word	0x20000730
 8001fd0:	20000088 	.word	0x20000088
 8001fd4:	10624dd3 	.word	0x10624dd3

08001fd8 <Change_Melody>:

void Change_Melody(const struct Tone *melody, uint16_t tone_count) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
	melody_ptr = melody;
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <Change_Melody+0x2c>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
	melody_tone_count = tone_count;
 8001fea:	4a07      	ldr	r2, [pc, #28]	; (8002008 <Change_Melody+0x30>)
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	8013      	strh	r3, [r2, #0]
	current_tone_number = 0;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <Change_Melody+0x34>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	801a      	strh	r2, [r3, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000734 	.word	0x20000734
 8002008:	20000738 	.word	0x20000738
 800200c:	2000073a 	.word	0x2000073a

08002010 <Update_Melody>:

void Update_Melody() {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
	if (programState != Paused && programState != IDLE) {
 8002016:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <Update_Melody+0x84>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d035      	beq.n	800208a <Update_Melody+0x7a>
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <Update_Melody+0x84>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d031      	beq.n	800208a <Update_Melody+0x7a>
		if ((HAL_GetTick() > current_tone_end)
 8002026:	f000 f983 	bl	8002330 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <Update_Melody+0x88>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d92a      	bls.n	800208a <Update_Melody+0x7a>
				&& (current_tone_number < melody_tone_count)) {
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <Update_Melody+0x8c>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	b29a      	uxth	r2, r3
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <Update_Melody+0x90>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	429a      	cmp	r2, r3
 8002042:	d222      	bcs.n	800208a <Update_Melody+0x7a>
			const struct Tone active_tone = *(melody_ptr + current_tone_number);
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <Update_Melody+0x94>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <Update_Melody+0x8c>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	441a      	add	r2, r3
 8002052:	463b      	mov	r3, r7
 8002054:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002058:	e883 0003 	stmia.w	r3, {r0, r1}
			PWM_Change_Tone(active_tone.frequency, volume);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <Update_Melody+0x98>)
 8002062:	8812      	ldrh	r2, [r2, #0]
 8002064:	b292      	uxth	r2, r2
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff01 	bl	8001e70 <PWM_Change_Tone>
			current_tone_end = HAL_GetTick() + active_tone.duration;
 800206e:	f000 f95f 	bl	8002330 <HAL_GetTick>
 8002072:	4603      	mov	r3, r0
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	4a07      	ldr	r2, [pc, #28]	; (8002098 <Update_Melody+0x88>)
 800207a:	6013      	str	r3, [r2, #0]
			current_tone_number++;
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <Update_Melody+0x8c>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	3301      	adds	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <Update_Melody+0x8c>)
 8002088:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000049 	.word	0x20000049
 8002098:	2000073c 	.word	0x2000073c
 800209c:	2000073a 	.word	0x2000073a
 80020a0:	20000738 	.word	0x20000738
 80020a4:	20000734 	.word	0x20000734
 80020a8:	2000008c 	.word	0x2000008c

080020ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80020b0:	e7fe      	b.n	80020b0 <NMI_Handler+0x4>

080020b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b6:	e7fe      	b.n	80020b6 <HardFault_Handler+0x4>

080020b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <MemManage_Handler+0x4>

080020be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <BusFault_Handler+0x4>

080020c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <UsageFault_Handler+0x4>

080020ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f8:	f000 f906 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	Update_Melody();
 80020fc:	f7ff ff88 	bl	8002010 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}

08002104 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002108:	2001      	movs	r0, #1
 800210a:	f001 ff2f 	bl	8003f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	if (HAL_GetTick() > last_button_press + 200) {
 800210e:	f000 f90f 	bl	8002330 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <EXTI0_IRQHandler+0x28>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	33c8      	adds	r3, #200	; 0xc8
 800211a:	429a      	cmp	r2, r3
 800211c:	d904      	bls.n	8002128 <EXTI0_IRQHandler+0x24>
		last_button_press = HAL_GetTick();
 800211e:	f000 f907 	bl	8002330 <HAL_GetTick>
 8002122:	4603      	mov	r3, r0
 8002124:	4a01      	ldr	r2, [pc, #4]	; (800212c <EXTI0_IRQHandler+0x28>)
 8002126:	6013      	str	r3, [r2, #0]

	}
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000740 	.word	0x20000740

08002130 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002134:	2002      	movs	r0, #2
 8002136:	f001 ff19 	bl	8003f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}

0800213e <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002142:	2004      	movs	r0, #4
 8002144:	f001 ff12 	bl	8003f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002150:	2008      	movs	r0, #8
 8002152:	f001 ff0b 	bl	8003f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <ADC1_2_IRQHandler+0x10>)
 8002162:	f000 fc33 	bl	80029cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000011c 	.word	0x2000011c

08002170 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002176:	f003 fffb 	bl	8006170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000224 	.word	0x20000224

08002184 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <USART1_IRQHandler+0x10>)
 800218a:	f005 f8cb 	bl	8007324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200002bc 	.word	0x200002bc

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f006 fb3a 	bl	8008840 <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <_sbrk+0x64>)
 80021e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	2000a000 	.word	0x2000a000
 80021f8:	00000400 	.word	0x00000400
 80021fc:	20000744 	.word	0x20000744
 8002200:	20000760 	.word	0x20000760

08002204 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <SystemInit+0x20>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	4a05      	ldr	r2, [pc, #20]	; (8002224 <SystemInit+0x20>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002260 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800222c:	f7ff ffea 	bl	8002204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002230:	480c      	ldr	r0, [pc, #48]	; (8002264 <LoopForever+0x6>)
  ldr r1, =_edata
 8002232:	490d      	ldr	r1, [pc, #52]	; (8002268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002234:	4a0d      	ldr	r2, [pc, #52]	; (800226c <LoopForever+0xe>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002248:	4c0a      	ldr	r4, [pc, #40]	; (8002274 <LoopForever+0x16>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002256:	f006 faf9 	bl	800884c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800225a:	f7fe fe13 	bl	8000e84 <main>

0800225e <LoopForever>:

LoopForever:
    b LoopForever
 800225e:	e7fe      	b.n	800225e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002260:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800226c:	0800b770 	.word	0x0800b770
  ldr r2, =_sbss
 8002270:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002274:	2000075c 	.word	0x2000075c

08002278 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC3_IRQHandler>
	...

0800227c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_Init+0x28>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_Init+0x28>)
 8002286:	f043 0310 	orr.w	r3, r3, #16
 800228a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228c:	2003      	movs	r0, #3
 800228e:	f001 fc23 	bl	8003ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002292:	2000      	movs	r0, #0
 8002294:	f000 f808 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002298:	f7ff fbec 	bl	8001a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000

080022a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_InitTick+0x54>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_InitTick+0x58>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f001 fc3b 	bl	8003b42 <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00e      	b.n	80022f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	d80a      	bhi.n	80022f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	2200      	movs	r2, #0
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f001 fc03 	bl	8003aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <HAL_InitTick+0x5c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000090 	.word	0x20000090
 8002300:	20000098 	.word	0x20000098
 8002304:	20000094 	.word	0x20000094

08002308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000098 	.word	0x20000098
 800232c:	20000748 	.word	0x20000748

08002330 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;  
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	20000748 	.word	0x20000748

08002348 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b09a      	sub	sp, #104	; 0x68
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e1c9      	b.n	8002724 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d176      	bne.n	8002490 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d152      	bne.n	8002450 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fb79 	bl	8001abc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d13b      	bne.n	8002450 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f001 fa47 	bl	800386c <ADC_Disable>
 80023de:	4603      	mov	r3, r0
 80023e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d12f      	bne.n	8002450 <HAL_ADC_Init+0xe0>
 80023f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d12b      	bne.n	8002450 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002400:	f023 0302 	bic.w	r3, r3, #2
 8002404:	f043 0202 	orr.w	r2, r3, #2
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800241a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800242a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800242c:	4b86      	ldr	r3, [pc, #536]	; (8002648 <HAL_ADC_Init+0x2d8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a86      	ldr	r2, [pc, #536]	; (800264c <HAL_ADC_Init+0x2dc>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0c9a      	lsrs	r2, r3, #18
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002442:	e002      	b.n	800244a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	3b01      	subs	r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f9      	bne.n	8002444 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800246c:	d110      	bne.n	8002490 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f023 0312 	bic.w	r3, r3, #18
 8002476:	f043 0210 	orr.w	r2, r3, #16
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	f040 8136 	bne.w	800270a <HAL_ADC_Init+0x39a>
 800249e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f040 8131 	bne.w	800270a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 8129 	bne.w	800270a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024c0:	f043 0202 	orr.w	r2, r3, #2
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024d0:	d004      	beq.n	80024dc <HAL_ADC_Init+0x16c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a5e      	ldr	r2, [pc, #376]	; (8002650 <HAL_ADC_Init+0x2e0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_ADC_Init+0x170>
 80024dc:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <HAL_ADC_Init+0x2e4>)
 80024de:	e000      	b.n	80024e2 <HAL_ADC_Init+0x172>
 80024e0:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <HAL_ADC_Init+0x2e8>)
 80024e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ec:	d102      	bne.n	80024f4 <HAL_ADC_Init+0x184>
 80024ee:	4b58      	ldr	r3, [pc, #352]	; (8002650 <HAL_ADC_Init+0x2e0>)
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	e01a      	b.n	800252a <HAL_ADC_Init+0x1ba>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a55      	ldr	r2, [pc, #340]	; (8002650 <HAL_ADC_Init+0x2e0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d103      	bne.n	8002506 <HAL_ADC_Init+0x196>
 80024fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e011      	b.n	800252a <HAL_ADC_Init+0x1ba>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a54      	ldr	r2, [pc, #336]	; (800265c <HAL_ADC_Init+0x2ec>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d102      	bne.n	8002516 <HAL_ADC_Init+0x1a6>
 8002510:	4b53      	ldr	r3, [pc, #332]	; (8002660 <HAL_ADC_Init+0x2f0>)
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e009      	b.n	800252a <HAL_ADC_Init+0x1ba>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a51      	ldr	r2, [pc, #324]	; (8002660 <HAL_ADC_Init+0x2f0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d102      	bne.n	8002526 <HAL_ADC_Init+0x1b6>
 8002520:	4b4e      	ldr	r3, [pc, #312]	; (800265c <HAL_ADC_Init+0x2ec>)
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e001      	b.n	800252a <HAL_ADC_Init+0x1ba>
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b01      	cmp	r3, #1
 8002536:	d108      	bne.n	800254a <HAL_ADC_Init+0x1da>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_ADC_Init+0x1da>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_ADC_Init+0x1dc>
 800254a:	2300      	movs	r3, #0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d11c      	bne.n	800258a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002550:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	d010      	beq.n	8002578 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_ADC_Init+0x202>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Init+0x202>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_ADC_Init+0x204>
 8002572:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002574:	2b00      	cmp	r3, #0
 8002576:	d108      	bne.n	800258a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	431a      	orrs	r2, r3
 8002586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002588:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7e5b      	ldrb	r3, [r3, #25]
 800258e:	035b      	lsls	r3, r3, #13
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002594:	2a01      	cmp	r2, #1
 8002596:	d002      	beq.n	800259e <HAL_ADC_Init+0x22e>
 8002598:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800259c:	e000      	b.n	80025a0 <HAL_ADC_Init+0x230>
 800259e:	2200      	movs	r2, #0
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025b0:	4313      	orrs	r3, r2
 80025b2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d11b      	bne.n	80025f6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7e5b      	ldrb	r3, [r3, #25]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	3b01      	subs	r3, #1
 80025cc:	045a      	lsls	r2, r3, #17
 80025ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d6:	663b      	str	r3, [r7, #96]	; 0x60
 80025d8:	e00d      	b.n	80025f6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80025e2:	f043 0220 	orr.w	r2, r3, #32
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f043 0201 	orr.w	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d03a      	beq.n	8002674 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a16      	ldr	r2, [pc, #88]	; (800265c <HAL_ADC_Init+0x2ec>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d004      	beq.n	8002612 <HAL_ADC_Init+0x2a2>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <HAL_ADC_Init+0x2f0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d128      	bne.n	8002664 <HAL_ADC_Init+0x2f4>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800261a:	d012      	beq.n	8002642 <HAL_ADC_Init+0x2d2>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002624:	d00a      	beq.n	800263c <HAL_ADC_Init+0x2cc>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800262e:	d002      	beq.n	8002636 <HAL_ADC_Init+0x2c6>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	e018      	b.n	8002668 <HAL_ADC_Init+0x2f8>
 8002636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800263a:	e015      	b.n	8002668 <HAL_ADC_Init+0x2f8>
 800263c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002640:	e012      	b.n	8002668 <HAL_ADC_Init+0x2f8>
 8002642:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002646:	e00f      	b.n	8002668 <HAL_ADC_Init+0x2f8>
 8002648:	20000090 	.word	0x20000090
 800264c:	431bde83 	.word	0x431bde83
 8002650:	50000100 	.word	0x50000100
 8002654:	50000300 	.word	0x50000300
 8002658:	50000700 	.word	0x50000700
 800265c:	50000400 	.word	0x50000400
 8002660:	50000500 	.word	0x50000500
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800266c:	4313      	orrs	r3, r2
 800266e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002670:	4313      	orrs	r3, r2
 8002672:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b00      	cmp	r3, #0
 8002680:	d114      	bne.n	80026ac <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002690:	f023 0302 	bic.w	r3, r3, #2
 8002694:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7e1b      	ldrb	r3, [r3, #24]
 800269a:	039a      	lsls	r2, r3, #14
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4313      	orrs	r3, r2
 80026a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026a8:	4313      	orrs	r3, r2
 80026aa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	4b1e      	ldr	r3, [pc, #120]	; (800272c <HAL_ADC_Init+0x3bc>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80026bc:	430b      	orrs	r3, r1
 80026be:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d10c      	bne.n	80026e2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f023 010f 	bic.w	r1, r3, #15
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
 80026e0:	e007      	b.n	80026f2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 020f 	bic.w	r2, r2, #15
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f023 0303 	bic.w	r3, r3, #3
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
 8002708:	e00a      	b.n	8002720 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f023 0312 	bic.w	r3, r3, #18
 8002712:	f043 0210 	orr.w	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800271a:	2301      	movs	r3, #1
 800271c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002720:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002724:	4618      	mov	r0, r3
 8002726:	3768      	adds	r7, #104	; 0x68
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	fff0c007 	.word	0xfff0c007

08002730 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 8123 	bne.w	8002992 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_ADC_Start_IT+0x2a>
 8002756:	2302      	movs	r3, #2
 8002758:	e11e      	b.n	8002998 <HAL_ADC_Start_IT+0x268>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f001 f81e 	bl	80037a4 <ADC_Enable>
 8002768:	4603      	mov	r3, r0
 800276a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 810a 	bne.w	8002988 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002790:	d004      	beq.n	800279c <HAL_ADC_Start_IT+0x6c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a82      	ldr	r2, [pc, #520]	; (80029a0 <HAL_ADC_Start_IT+0x270>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d106      	bne.n	80027aa <HAL_ADC_Start_IT+0x7a>
 800279c:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <HAL_ADC_Start_IT+0x274>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d010      	beq.n	80027ca <HAL_ADC_Start_IT+0x9a>
 80027a8:	e005      	b.n	80027b6 <HAL_ADC_Start_IT+0x86>
 80027aa:	4b7f      	ldr	r3, [pc, #508]	; (80029a8 <HAL_ADC_Start_IT+0x278>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_ADC_Start_IT+0x9a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027be:	d004      	beq.n	80027ca <HAL_ADC_Start_IT+0x9a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a79      	ldr	r2, [pc, #484]	; (80029ac <HAL_ADC_Start_IT+0x27c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d115      	bne.n	80027f6 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d036      	beq.n	8002852 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80027f4:	e02d      	b.n	8002852 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800280a:	d004      	beq.n	8002816 <HAL_ADC_Start_IT+0xe6>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a63      	ldr	r2, [pc, #396]	; (80029a0 <HAL_ADC_Start_IT+0x270>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10a      	bne.n	800282c <HAL_ADC_Start_IT+0xfc>
 8002816:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e008      	b.n	800283e <HAL_ADC_Start_IT+0x10e>
 800282c:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <HAL_ADC_Start_IT+0x27c>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf14      	ite	ne
 8002838:	2301      	movne	r3, #1
 800283a:	2300      	moveq	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d007      	beq.n	8002852 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800284a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285e:	d106      	bne.n	800286e <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	f023 0206 	bic.w	r2, r3, #6
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
 800286c:	e002      	b.n	8002874 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	221c      	movs	r2, #28
 8002882:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d110      	bne.n	80028ae <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0204 	bic.w	r2, r2, #4
 800289a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0208 	orr.w	r2, r2, #8
 80028aa:	605a      	str	r2, [r3, #4]
          break;
 80028ac:	e008      	b.n	80028c0 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f042 020c 	orr.w	r2, r2, #12
 80028bc:	605a      	str	r2, [r3, #4]
          break;
 80028be:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d107      	bne.n	80028d8 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0210 	bic.w	r2, r2, #16
 80028d6:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e0:	d004      	beq.n	80028ec <HAL_ADC_Start_IT+0x1bc>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a2e      	ldr	r2, [pc, #184]	; (80029a0 <HAL_ADC_Start_IT+0x270>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d106      	bne.n	80028fa <HAL_ADC_Start_IT+0x1ca>
 80028ec:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <HAL_ADC_Start_IT+0x274>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d03e      	beq.n	8002976 <HAL_ADC_Start_IT+0x246>
 80028f8:	e005      	b.n	8002906 <HAL_ADC_Start_IT+0x1d6>
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <HAL_ADC_Start_IT+0x278>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2b00      	cmp	r3, #0
 8002904:	d037      	beq.n	8002976 <HAL_ADC_Start_IT+0x246>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800290e:	d004      	beq.n	800291a <HAL_ADC_Start_IT+0x1ea>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <HAL_ADC_Start_IT+0x270>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d106      	bne.n	8002928 <HAL_ADC_Start_IT+0x1f8>
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_ADC_Start_IT+0x274>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2b05      	cmp	r3, #5
 8002924:	d027      	beq.n	8002976 <HAL_ADC_Start_IT+0x246>
 8002926:	e005      	b.n	8002934 <HAL_ADC_Start_IT+0x204>
 8002928:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <HAL_ADC_Start_IT+0x278>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	2b05      	cmp	r3, #5
 8002932:	d020      	beq.n	8002976 <HAL_ADC_Start_IT+0x246>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800293c:	d004      	beq.n	8002948 <HAL_ADC_Start_IT+0x218>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <HAL_ADC_Start_IT+0x270>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d106      	bne.n	8002956 <HAL_ADC_Start_IT+0x226>
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <HAL_ADC_Start_IT+0x274>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	2b09      	cmp	r3, #9
 8002952:	d010      	beq.n	8002976 <HAL_ADC_Start_IT+0x246>
 8002954:	e005      	b.n	8002962 <HAL_ADC_Start_IT+0x232>
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <HAL_ADC_Start_IT+0x278>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2b09      	cmp	r3, #9
 8002960:	d009      	beq.n	8002976 <HAL_ADC_Start_IT+0x246>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800296a:	d004      	beq.n	8002976 <HAL_ADC_Start_IT+0x246>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0e      	ldr	r2, [pc, #56]	; (80029ac <HAL_ADC_Start_IT+0x27c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10f      	bne.n	8002996 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0204 	orr.w	r2, r2, #4
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	e006      	b.n	8002996 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002990:	e001      	b.n	8002996 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002992:	2302      	movs	r3, #2
 8002994:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	50000100 	.word	0x50000100
 80029a4:	50000300 	.word	0x50000300
 80029a8:	50000700 	.word	0x50000700
 80029ac:	50000400 	.word	0x50000400

080029b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f003 0304 	and.w	r3, r3, #4
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d004      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x38>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80bc 	beq.w	8002b88 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80b6 	beq.w	8002b88 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a3c:	d004      	beq.n	8002a48 <HAL_ADC_IRQHandler+0x7c>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a90      	ldr	r2, [pc, #576]	; (8002c84 <HAL_ADC_IRQHandler+0x2b8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d106      	bne.n	8002a56 <HAL_ADC_IRQHandler+0x8a>
 8002a48:	4b8f      	ldr	r3, [pc, #572]	; (8002c88 <HAL_ADC_IRQHandler+0x2bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d03e      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x106>
 8002a54:	e005      	b.n	8002a62 <HAL_ADC_IRQHandler+0x96>
 8002a56:	4b8d      	ldr	r3, [pc, #564]	; (8002c8c <HAL_ADC_IRQHandler+0x2c0>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d037      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x106>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a6a:	d004      	beq.n	8002a76 <HAL_ADC_IRQHandler+0xaa>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a84      	ldr	r2, [pc, #528]	; (8002c84 <HAL_ADC_IRQHandler+0x2b8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d106      	bne.n	8002a84 <HAL_ADC_IRQHandler+0xb8>
 8002a76:	4b84      	ldr	r3, [pc, #528]	; (8002c88 <HAL_ADC_IRQHandler+0x2bc>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 031f 	and.w	r3, r3, #31
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	d027      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x106>
 8002a82:	e005      	b.n	8002a90 <HAL_ADC_IRQHandler+0xc4>
 8002a84:	4b81      	ldr	r3, [pc, #516]	; (8002c8c <HAL_ADC_IRQHandler+0x2c0>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	2b05      	cmp	r3, #5
 8002a8e:	d020      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x106>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a98:	d004      	beq.n	8002aa4 <HAL_ADC_IRQHandler+0xd8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a79      	ldr	r2, [pc, #484]	; (8002c84 <HAL_ADC_IRQHandler+0x2b8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d106      	bne.n	8002ab2 <HAL_ADC_IRQHandler+0xe6>
 8002aa4:	4b78      	ldr	r3, [pc, #480]	; (8002c88 <HAL_ADC_IRQHandler+0x2bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	2b09      	cmp	r3, #9
 8002aae:	d010      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x106>
 8002ab0:	e005      	b.n	8002abe <HAL_ADC_IRQHandler+0xf2>
 8002ab2:	4b76      	ldr	r3, [pc, #472]	; (8002c8c <HAL_ADC_IRQHandler+0x2c0>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	2b09      	cmp	r3, #9
 8002abc:	d009      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x106>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac6:	d004      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x106>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a70      	ldr	r2, [pc, #448]	; (8002c90 <HAL_ADC_IRQHandler+0x2c4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d104      	bne.n	8002adc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	e00f      	b.n	8002afc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae4:	d004      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x124>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a66      	ldr	r2, [pc, #408]	; (8002c84 <HAL_ADC_IRQHandler+0x2b8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d102      	bne.n	8002af6 <HAL_ADC_IRQHandler+0x12a>
 8002af0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002af4:	e000      	b.n	8002af8 <HAL_ADC_IRQHandler+0x12c>
 8002af6:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <HAL_ADC_IRQHandler+0x2c4>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d137      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d132      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d02d      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11a      	bne.n	8002b62 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 020c 	bic.w	r2, r2, #12
 8002b3a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d112      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b60:	e00b      	b.n	8002b7a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f043 0210 	orr.w	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe f84a 	bl	8000c14 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	220c      	movs	r2, #12
 8002b86:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <HAL_ADC_IRQHandler+0x1d0>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 8138 	beq.w	8002e18 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8132 	beq.w	8002e18 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc8:	d004      	beq.n	8002bd4 <HAL_ADC_IRQHandler+0x208>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2d      	ldr	r2, [pc, #180]	; (8002c84 <HAL_ADC_IRQHandler+0x2b8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d106      	bne.n	8002be2 <HAL_ADC_IRQHandler+0x216>
 8002bd4:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <HAL_ADC_IRQHandler+0x2bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d03e      	beq.n	8002c5e <HAL_ADC_IRQHandler+0x292>
 8002be0:	e005      	b.n	8002bee <HAL_ADC_IRQHandler+0x222>
 8002be2:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <HAL_ADC_IRQHandler+0x2c0>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d037      	beq.n	8002c5e <HAL_ADC_IRQHandler+0x292>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf6:	d004      	beq.n	8002c02 <HAL_ADC_IRQHandler+0x236>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <HAL_ADC_IRQHandler+0x2b8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d106      	bne.n	8002c10 <HAL_ADC_IRQHandler+0x244>
 8002c02:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_ADC_IRQHandler+0x2bc>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d027      	beq.n	8002c5e <HAL_ADC_IRQHandler+0x292>
 8002c0e:	e005      	b.n	8002c1c <HAL_ADC_IRQHandler+0x250>
 8002c10:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <HAL_ADC_IRQHandler+0x2c0>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d020      	beq.n	8002c5e <HAL_ADC_IRQHandler+0x292>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c24:	d004      	beq.n	8002c30 <HAL_ADC_IRQHandler+0x264>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a16      	ldr	r2, [pc, #88]	; (8002c84 <HAL_ADC_IRQHandler+0x2b8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d106      	bne.n	8002c3e <HAL_ADC_IRQHandler+0x272>
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_ADC_IRQHandler+0x2bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2b09      	cmp	r3, #9
 8002c3a:	d010      	beq.n	8002c5e <HAL_ADC_IRQHandler+0x292>
 8002c3c:	e005      	b.n	8002c4a <HAL_ADC_IRQHandler+0x27e>
 8002c3e:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <HAL_ADC_IRQHandler+0x2c0>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 031f 	and.w	r3, r3, #31
 8002c46:	2b09      	cmp	r3, #9
 8002c48:	d009      	beq.n	8002c5e <HAL_ADC_IRQHandler+0x292>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c52:	d004      	beq.n	8002c5e <HAL_ADC_IRQHandler+0x292>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <HAL_ADC_IRQHandler+0x2c4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d104      	bne.n	8002c68 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e018      	b.n	8002c9a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c70:	d004      	beq.n	8002c7c <HAL_ADC_IRQHandler+0x2b0>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a03      	ldr	r2, [pc, #12]	; (8002c84 <HAL_ADC_IRQHandler+0x2b8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d10b      	bne.n	8002c94 <HAL_ADC_IRQHandler+0x2c8>
 8002c7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c80:	e009      	b.n	8002c96 <HAL_ADC_IRQHandler+0x2ca>
 8002c82:	bf00      	nop
 8002c84:	50000100 	.word	0x50000100
 8002c88:	50000300 	.word	0x50000300
 8002c8c:	50000700 	.word	0x50000700
 8002c90:	50000400 	.word	0x50000400
 8002c94:	4b92      	ldr	r3, [pc, #584]	; (8002ee0 <HAL_ADC_IRQHandler+0x514>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 80b0 	bne.w	8002e0a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00d      	beq.n	8002cd0 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 80a3 	bne.w	8002e0a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 809d 	bne.w	8002e0a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8097 	beq.w	8002e0a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce4:	d004      	beq.n	8002cf0 <HAL_ADC_IRQHandler+0x324>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a7e      	ldr	r2, [pc, #504]	; (8002ee4 <HAL_ADC_IRQHandler+0x518>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d106      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x332>
 8002cf0:	4b7d      	ldr	r3, [pc, #500]	; (8002ee8 <HAL_ADC_IRQHandler+0x51c>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d03e      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x3ae>
 8002cfc:	e005      	b.n	8002d0a <HAL_ADC_IRQHandler+0x33e>
 8002cfe:	4b7b      	ldr	r3, [pc, #492]	; (8002eec <HAL_ADC_IRQHandler+0x520>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d037      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x3ae>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d12:	d004      	beq.n	8002d1e <HAL_ADC_IRQHandler+0x352>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a72      	ldr	r2, [pc, #456]	; (8002ee4 <HAL_ADC_IRQHandler+0x518>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d106      	bne.n	8002d2c <HAL_ADC_IRQHandler+0x360>
 8002d1e:	4b72      	ldr	r3, [pc, #456]	; (8002ee8 <HAL_ADC_IRQHandler+0x51c>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d027      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x3ae>
 8002d2a:	e005      	b.n	8002d38 <HAL_ADC_IRQHandler+0x36c>
 8002d2c:	4b6f      	ldr	r3, [pc, #444]	; (8002eec <HAL_ADC_IRQHandler+0x520>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d020      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x3ae>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d40:	d004      	beq.n	8002d4c <HAL_ADC_IRQHandler+0x380>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a67      	ldr	r2, [pc, #412]	; (8002ee4 <HAL_ADC_IRQHandler+0x518>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d106      	bne.n	8002d5a <HAL_ADC_IRQHandler+0x38e>
 8002d4c:	4b66      	ldr	r3, [pc, #408]	; (8002ee8 <HAL_ADC_IRQHandler+0x51c>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2b07      	cmp	r3, #7
 8002d56:	d010      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x3ae>
 8002d58:	e005      	b.n	8002d66 <HAL_ADC_IRQHandler+0x39a>
 8002d5a:	4b64      	ldr	r3, [pc, #400]	; (8002eec <HAL_ADC_IRQHandler+0x520>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	2b07      	cmp	r3, #7
 8002d64:	d009      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x3ae>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6e:	d004      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x3ae>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a5a      	ldr	r2, [pc, #360]	; (8002ee0 <HAL_ADC_IRQHandler+0x514>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d104      	bne.n	8002d84 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e00f      	b.n	8002da4 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d8c:	d004      	beq.n	8002d98 <HAL_ADC_IRQHandler+0x3cc>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a54      	ldr	r2, [pc, #336]	; (8002ee4 <HAL_ADC_IRQHandler+0x518>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d102      	bne.n	8002d9e <HAL_ADC_IRQHandler+0x3d2>
 8002d98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d9c:	e000      	b.n	8002da0 <HAL_ADC_IRQHandler+0x3d4>
 8002d9e:	4b50      	ldr	r3, [pc, #320]	; (8002ee0 <HAL_ADC_IRQHandler+0x514>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d12d      	bne.n	8002e0a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11a      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dca:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d112      	bne.n	8002e0a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
 8002df0:	e00b      	b.n	8002e0a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f043 0210 	orr.w	r2, r3, #16
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f8c4 	bl	8002f98 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2260      	movs	r2, #96	; 0x60
 8002e16:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d011      	beq.n	8002e46 <HAL_ADC_IRQHandler+0x47a>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00c      	beq.n	8002e46 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff fa85 	bl	8002348 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2280      	movs	r2, #128	; 0x80
 8002e44:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d012      	beq.n	8002e76 <HAL_ADC_IRQHandler+0x4aa>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8aa 	bl	8002fc0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e74:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d012      	beq.n	8002ea6 <HAL_ADC_IRQHandler+0x4da>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00d      	beq.n	8002ea6 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f89c 	bl	8002fd4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d04f      	beq.n	8002f50 <HAL_ADC_IRQHandler+0x584>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d04a      	beq.n	8002f50 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d102      	bne.n	8002ec8 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	e02d      	b.n	8002f24 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed0:	d004      	beq.n	8002edc <HAL_ADC_IRQHandler+0x510>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a03      	ldr	r2, [pc, #12]	; (8002ee4 <HAL_ADC_IRQHandler+0x518>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d109      	bne.n	8002ef0 <HAL_ADC_IRQHandler+0x524>
 8002edc:	4b02      	ldr	r3, [pc, #8]	; (8002ee8 <HAL_ADC_IRQHandler+0x51c>)
 8002ede:	e008      	b.n	8002ef2 <HAL_ADC_IRQHandler+0x526>
 8002ee0:	50000400 	.word	0x50000400
 8002ee4:	50000100 	.word	0x50000100
 8002ee8:	50000300 	.word	0x50000300
 8002eec:	50000700 	.word	0x50000700
 8002ef0:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_ADC_IRQHandler+0x5c8>)
 8002ef2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d10a      	bne.n	8002f24 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002f0e:	2301      	movs	r3, #1
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	e007      	b.n	8002f24 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002f20:	2301      	movs	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d10e      	bne.n	8002f48 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f043 0202 	orr.w	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff fa0a 	bl	800235c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d018      	beq.n	8002f8c <HAL_ADC_IRQHandler+0x5c0>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	f043 0208 	orr.w	r2, r3, #8
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f84:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f810 	bl	8002fac <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002f8c:	bf00      	nop
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	50000700 	.word	0x50000700

08002f98 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b09b      	sub	sp, #108	; 0x6c
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_ADC_ConfigChannel+0x22>
 8003006:	2302      	movs	r3, #2
 8003008:	e2ca      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x5b8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	f040 82ae 	bne.w	800357e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b04      	cmp	r3, #4
 8003028:	d81c      	bhi.n	8003064 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	461a      	mov	r2, r3
 800303e:	231f      	movs	r3, #31
 8003040:	4093      	lsls	r3, r2
 8003042:	43db      	mvns	r3, r3
 8003044:	4019      	ands	r1, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa00 f203 	lsl.w	r2, r0, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
 8003062:	e063      	b.n	800312c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b09      	cmp	r3, #9
 800306a:	d81e      	bhi.n	80030aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	4413      	add	r3, r2
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	3b1e      	subs	r3, #30
 8003080:	221f      	movs	r2, #31
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	4019      	ands	r1, r3
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	3b1e      	subs	r3, #30
 800309c:	fa00 f203 	lsl.w	r2, r0, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	635a      	str	r2, [r3, #52]	; 0x34
 80030a8:	e040      	b.n	800312c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b0e      	cmp	r3, #14
 80030b0:	d81e      	bhi.n	80030f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	3b3c      	subs	r3, #60	; 0x3c
 80030c6:	221f      	movs	r2, #31
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	4019      	ands	r1, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	3b3c      	subs	r3, #60	; 0x3c
 80030e2:	fa00 f203 	lsl.w	r2, r0, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	639a      	str	r2, [r3, #56]	; 0x38
 80030ee:	e01d      	b.n	800312c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	3b5a      	subs	r3, #90	; 0x5a
 8003104:	221f      	movs	r2, #31
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	4019      	ands	r1, r3
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	3b5a      	subs	r3, #90	; 0x5a
 8003120:	fa00 f203 	lsl.w	r2, r0, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b00      	cmp	r3, #0
 8003138:	f040 80e5 	bne.w	8003306 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b09      	cmp	r3, #9
 8003142:	d91c      	bls.n	800317e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6999      	ldr	r1, [r3, #24]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	3b1e      	subs	r3, #30
 8003156:	2207      	movs	r2, #7
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	4019      	ands	r1, r3
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6898      	ldr	r0, [r3, #8]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	3b1e      	subs	r3, #30
 8003170:	fa00 f203 	lsl.w	r2, r0, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	619a      	str	r2, [r3, #24]
 800317c:	e019      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6959      	ldr	r1, [r3, #20]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4413      	add	r3, r2
 800318e:	2207      	movs	r2, #7
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	4019      	ands	r1, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6898      	ldr	r0, [r3, #8]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4413      	add	r3, r2
 80031a6:	fa00 f203 	lsl.w	r2, r0, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	08db      	lsrs	r3, r3, #3
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d84f      	bhi.n	8003274 <HAL_ADC_ConfigChannel+0x28c>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <HAL_ADC_ConfigChannel+0x1f4>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	080031ed 	.word	0x080031ed
 80031e0:	0800320f 	.word	0x0800320f
 80031e4:	08003231 	.word	0x08003231
 80031e8:	08003253 	.word	0x08003253
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031f2:	4b9a      	ldr	r3, [pc, #616]	; (800345c <HAL_ADC_ConfigChannel+0x474>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	0691      	lsls	r1, r2, #26
 80031fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031fe:	430a      	orrs	r2, r1
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800320a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800320c:	e07e      	b.n	800330c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003214:	4b91      	ldr	r3, [pc, #580]	; (800345c <HAL_ADC_ConfigChannel+0x474>)
 8003216:	4013      	ands	r3, r2
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	0691      	lsls	r1, r2, #26
 800321e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003220:	430a      	orrs	r2, r1
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800322c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800322e:	e06d      	b.n	800330c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003236:	4b89      	ldr	r3, [pc, #548]	; (800345c <HAL_ADC_ConfigChannel+0x474>)
 8003238:	4013      	ands	r3, r2
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	0691      	lsls	r1, r2, #26
 8003240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003242:	430a      	orrs	r2, r1
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800324e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003250:	e05c      	b.n	800330c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003258:	4b80      	ldr	r3, [pc, #512]	; (800345c <HAL_ADC_ConfigChannel+0x474>)
 800325a:	4013      	ands	r3, r2
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	0691      	lsls	r1, r2, #26
 8003262:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003264:	430a      	orrs	r2, r1
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003270:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003272:	e04b      	b.n	800330c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	069b      	lsls	r3, r3, #26
 8003284:	429a      	cmp	r2, r3
 8003286:	d107      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003296:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800329e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	069b      	lsls	r3, r3, #26
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d107      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032ba:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	069b      	lsls	r3, r3, #26
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d107      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032de:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	069b      	lsls	r3, r3, #26
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d10a      	bne.n	800330a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003302:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003304:	e001      	b.n	800330a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003306:	bf00      	nop
 8003308:	e000      	b.n	800330c <HAL_ADC_ConfigChannel+0x324>
      break;
 800330a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d108      	bne.n	800332c <HAL_ADC_ConfigChannel+0x344>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x344>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_ADC_ConfigChannel+0x346>
 800332c:	2300      	movs	r3, #0
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 8130 	bne.w	8003594 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d00f      	beq.n	800335c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2201      	movs	r2, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	400a      	ands	r2, r1
 8003356:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800335a:	e049      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2201      	movs	r2, #1
 800336a:	409a      	lsls	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b09      	cmp	r3, #9
 800337c:	d91c      	bls.n	80033b8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6999      	ldr	r1, [r3, #24]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4613      	mov	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4413      	add	r3, r2
 800338e:	3b1b      	subs	r3, #27
 8003390:	2207      	movs	r2, #7
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	4019      	ands	r1, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6898      	ldr	r0, [r3, #8]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	3b1b      	subs	r3, #27
 80033aa:	fa00 f203 	lsl.w	r2, r0, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	619a      	str	r2, [r3, #24]
 80033b6:	e01b      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6959      	ldr	r1, [r3, #20]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	2207      	movs	r2, #7
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	4019      	ands	r1, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6898      	ldr	r0, [r3, #8]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	fa00 f203 	lsl.w	r2, r0, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f8:	d004      	beq.n	8003404 <HAL_ADC_ConfigChannel+0x41c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a18      	ldr	r2, [pc, #96]	; (8003460 <HAL_ADC_ConfigChannel+0x478>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d101      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x420>
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_ADC_ConfigChannel+0x47c>)
 8003406:	e000      	b.n	800340a <HAL_ADC_ConfigChannel+0x422>
 8003408:	4b17      	ldr	r3, [pc, #92]	; (8003468 <HAL_ADC_ConfigChannel+0x480>)
 800340a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b10      	cmp	r3, #16
 8003412:	d105      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003424:	2b11      	cmp	r3, #17
 8003426:	d105      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003438:	2b12      	cmp	r3, #18
 800343a:	f040 80ab 	bne.w	8003594 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800343e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003446:	2b00      	cmp	r3, #0
 8003448:	f040 80a4 	bne.w	8003594 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003454:	d10a      	bne.n	800346c <HAL_ADC_ConfigChannel+0x484>
 8003456:	4b02      	ldr	r3, [pc, #8]	; (8003460 <HAL_ADC_ConfigChannel+0x478>)
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e022      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x4ba>
 800345c:	83fff000 	.word	0x83fff000
 8003460:	50000100 	.word	0x50000100
 8003464:	50000300 	.word	0x50000300
 8003468:	50000700 	.word	0x50000700
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a4e      	ldr	r2, [pc, #312]	; (80035ac <HAL_ADC_ConfigChannel+0x5c4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d103      	bne.n	800347e <HAL_ADC_ConfigChannel+0x496>
 8003476:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e011      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x4ba>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a4b      	ldr	r2, [pc, #300]	; (80035b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d102      	bne.n	800348e <HAL_ADC_ConfigChannel+0x4a6>
 8003488:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <HAL_ADC_ConfigChannel+0x5cc>)
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e009      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x4ba>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a48      	ldr	r2, [pc, #288]	; (80035b4 <HAL_ADC_ConfigChannel+0x5cc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d102      	bne.n	800349e <HAL_ADC_ConfigChannel+0x4b6>
 8003498:	4b45      	ldr	r3, [pc, #276]	; (80035b0 <HAL_ADC_ConfigChannel+0x5c8>)
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	e001      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x4ba>
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d108      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x4da>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x4da>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x4dc>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d150      	bne.n	800356a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d010      	beq.n	80034f0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d107      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x502>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x502>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_ADC_ConfigChannel+0x504>
 80034ea:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d13c      	bne.n	800356a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b10      	cmp	r3, #16
 80034f6:	d11d      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x54c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003500:	d118      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800350a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800350c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <HAL_ADC_ConfigChannel+0x5d0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2a      	ldr	r2, [pc, #168]	; (80035bc <HAL_ADC_ConfigChannel+0x5d4>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	0c9a      	lsrs	r2, r3, #18
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003524:	e002      	b.n	800352c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3b01      	subs	r3, #1
 800352a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f9      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003532:	e02e      	b.n	8003592 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b11      	cmp	r3, #17
 800353a:	d10b      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x56c>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003544:	d106      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800354e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003550:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003552:	e01e      	b.n	8003592 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b12      	cmp	r3, #18
 800355a:	d11a      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800355c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003566:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003568:	e013      	b.n	8003592 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800357c:	e00a      	b.n	8003594 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003590:	e000      	b.n	8003594 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003592:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800359c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	376c      	adds	r7, #108	; 0x6c
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	50000100 	.word	0x50000100
 80035b0:	50000400 	.word	0x50000400
 80035b4:	50000500 	.word	0x50000500
 80035b8:	20000090 	.word	0x20000090
 80035bc:	431bde83 	.word	0x431bde83

080035c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b099      	sub	sp, #100	; 0x64
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d8:	d102      	bne.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80035da:	4b6d      	ldr	r3, [pc, #436]	; (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	e01a      	b.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a6a      	ldr	r2, [pc, #424]	; (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d103      	bne.n	80035f2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80035ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	e011      	b.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a67      	ldr	r2, [pc, #412]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d102      	bne.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035fc:	4b66      	ldr	r3, [pc, #408]	; (8003798 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	e009      	b.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a64      	ldr	r2, [pc, #400]	; (8003798 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d102      	bne.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800360c:	4b61      	ldr	r3, [pc, #388]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	e001      	b.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0b0      	b.n	8003782 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800362a:	2302      	movs	r3, #2
 800362c:	e0a9      	b.n	8003782 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	f040 808d 	bne.w	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 8086 	bne.w	8003760 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800365c:	d004      	beq.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a4b      	ldr	r2, [pc, #300]	; (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003668:	4b4c      	ldr	r3, [pc, #304]	; (800379c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800366a:	e000      	b.n	800366e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800366c:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800366e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d040      	beq.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800368a:	035b      	lsls	r3, r3, #13
 800368c:	430b      	orrs	r3, r1
 800368e:	431a      	orrs	r2, r3
 8003690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003692:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d108      	bne.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80036b4:	2300      	movs	r3, #0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d15c      	bne.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d107      	bne.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80036d6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d14b      	bne.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80036dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036e4:	f023 030f 	bic.w	r3, r3, #15
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	6811      	ldr	r1, [r2, #0]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	6892      	ldr	r2, [r2, #8]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	431a      	orrs	r2, r3
 80036f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036f8:	e03c      	b.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003704:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d108      	bne.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003726:	2300      	movs	r3, #0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d123      	bne.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003748:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800374a:	2b00      	cmp	r3, #0
 800374c:	d112      	bne.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800374e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003756:	f023 030f 	bic.w	r3, r3, #15
 800375a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800375c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800375e:	e009      	b.n	8003774 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f043 0220 	orr.w	r2, r3, #32
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003772:	e000      	b.n	8003776 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003774:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800377e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003782:	4618      	mov	r0, r3
 8003784:	3764      	adds	r7, #100	; 0x64
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	50000100 	.word	0x50000100
 8003794:	50000400 	.word	0x50000400
 8003798:	50000500 	.word	0x50000500
 800379c:	50000300 	.word	0x50000300
 80037a0:	50000700 	.word	0x50000700

080037a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d108      	bne.n	80037d0 <ADC_Enable+0x2c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <ADC_Enable+0x2c>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <ADC_Enable+0x2e>
 80037d0:	2300      	movs	r3, #0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d143      	bne.n	800385e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	4b22      	ldr	r3, [pc, #136]	; (8003868 <ADC_Enable+0xc4>)
 80037de:	4013      	ands	r3, r2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00d      	beq.n	8003800 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f043 0210 	orr.w	r2, r3, #16
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	f043 0201 	orr.w	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e02f      	b.n	8003860 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003810:	f7fe fd8e 	bl	8002330 <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003816:	e01b      	b.n	8003850 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003818:	f7fe fd8a 	bl	8002330 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d914      	bls.n	8003850 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d00d      	beq.n	8003850 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	f043 0210 	orr.w	r2, r3, #16
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	f043 0201 	orr.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e007      	b.n	8003860 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b01      	cmp	r3, #1
 800385c:	d1dc      	bne.n	8003818 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	8000003f 	.word	0x8000003f

0800386c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d108      	bne.n	8003898 <ADC_Disable+0x2c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <ADC_Disable+0x2c>
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <ADC_Disable+0x2e>
 8003898:	2300      	movs	r3, #0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d047      	beq.n	800392e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 030d 	and.w	r3, r3, #13
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10f      	bne.n	80038cc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0202 	orr.w	r2, r2, #2
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2203      	movs	r2, #3
 80038c2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80038c4:	f7fe fd34 	bl	8002330 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038ca:	e029      	b.n	8003920 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	f043 0210 	orr.w	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038dc:	f043 0201 	orr.w	r2, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e023      	b.n	8003930 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038e8:	f7fe fd22 	bl	8002330 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d914      	bls.n	8003920 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b01      	cmp	r3, #1
 8003902:	d10d      	bne.n	8003920 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f043 0210 	orr.w	r2, r3, #16
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f043 0201 	orr.w	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e007      	b.n	8003930 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d0dc      	beq.n	80038e8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <__NVIC_SetPriorityGrouping+0x44>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003954:	4013      	ands	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396a:	4a04      	ldr	r2, [pc, #16]	; (800397c <__NVIC_SetPriorityGrouping+0x44>)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	60d3      	str	r3, [r2, #12]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <__NVIC_GetPriorityGrouping+0x18>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	f003 0307 	and.w	r3, r3, #7
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	db0b      	blt.n	80039c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	f003 021f 	and.w	r2, r3, #31
 80039b4:	4907      	ldr	r1, [pc, #28]	; (80039d4 <__NVIC_EnableIRQ+0x38>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2001      	movs	r0, #1
 80039be:	fa00 f202 	lsl.w	r2, r0, r2
 80039c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000e100 	.word	0xe000e100

080039d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	6039      	str	r1, [r7, #0]
 80039e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	db0a      	blt.n	8003a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	490c      	ldr	r1, [pc, #48]	; (8003a24 <__NVIC_SetPriority+0x4c>)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	0112      	lsls	r2, r2, #4
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	440b      	add	r3, r1
 80039fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a00:	e00a      	b.n	8003a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4908      	ldr	r1, [pc, #32]	; (8003a28 <__NVIC_SetPriority+0x50>)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	3b04      	subs	r3, #4
 8003a10:	0112      	lsls	r2, r2, #4
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	440b      	add	r3, r1
 8003a16:	761a      	strb	r2, [r3, #24]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000e100 	.word	0xe000e100
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f1c3 0307 	rsb	r3, r3, #7
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	bf28      	it	cs
 8003a4a:	2304      	movcs	r3, #4
 8003a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2b06      	cmp	r3, #6
 8003a54:	d902      	bls.n	8003a5c <NVIC_EncodePriority+0x30>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3b03      	subs	r3, #3
 8003a5a:	e000      	b.n	8003a5e <NVIC_EncodePriority+0x32>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	401a      	ands	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a74:	f04f 31ff 	mov.w	r1, #4294967295
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7e:	43d9      	mvns	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	4313      	orrs	r3, r2
         );
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3724      	adds	r7, #36	; 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa4:	d301      	bcc.n	8003aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e00f      	b.n	8003aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <SysTick_Config+0x40>)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ab2:	210f      	movs	r1, #15
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	f7ff ff8e 	bl	80039d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <SysTick_Config+0x40>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ac2:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <SysTick_Config+0x40>)
 8003ac4:	2207      	movs	r2, #7
 8003ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	e000e010 	.word	0xe000e010

08003ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff29 	bl	8003938 <__NVIC_SetPriorityGrouping>
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	4603      	mov	r3, r0
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b00:	f7ff ff3e 	bl	8003980 <__NVIC_GetPriorityGrouping>
 8003b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	6978      	ldr	r0, [r7, #20]
 8003b0c:	f7ff ff8e 	bl	8003a2c <NVIC_EncodePriority>
 8003b10:	4602      	mov	r2, r0
 8003b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff5d 	bl	80039d8 <__NVIC_SetPriority>
}
 8003b1e:	bf00      	nop
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ff31 	bl	800399c <__NVIC_EnableIRQ>
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff ffa2 	bl	8003a94 <SysTick_Config>
 8003b50:	4603      	mov	r3, r0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d008      	beq.n	8003b7e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2204      	movs	r2, #4
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e020      	b.n	8003bc0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 020e 	bic.w	r2, r2, #14
 8003b8c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d005      	beq.n	8003bee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2204      	movs	r2, #4
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	e027      	b.n	8003c3e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 020e 	bic.w	r2, r2, #14
 8003bfc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0201 	bic.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	2101      	movs	r1, #1
 8003c18:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
    } 
  }
  return status;
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c56:	e154      	b.n	8003f02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	4013      	ands	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8146 	beq.w	8003efc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d005      	beq.n	8003c88 <HAL_GPIO_Init+0x40>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d130      	bne.n	8003cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2203      	movs	r2, #3
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0201 	and.w	r2, r3, #1
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d017      	beq.n	8003d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	2203      	movs	r2, #3
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d123      	bne.n	8003d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	08da      	lsrs	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3208      	adds	r2, #8
 8003d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	220f      	movs	r2, #15
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4013      	ands	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	08da      	lsrs	r2, r3, #3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3208      	adds	r2, #8
 8003d74:	6939      	ldr	r1, [r7, #16]
 8003d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	2203      	movs	r2, #3
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 0203 	and.w	r2, r3, #3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80a0 	beq.w	8003efc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dbc:	4b58      	ldr	r3, [pc, #352]	; (8003f20 <HAL_GPIO_Init+0x2d8>)
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	4a57      	ldr	r2, [pc, #348]	; (8003f20 <HAL_GPIO_Init+0x2d8>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6193      	str	r3, [r2, #24]
 8003dc8:	4b55      	ldr	r3, [pc, #340]	; (8003f20 <HAL_GPIO_Init+0x2d8>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dd4:	4a53      	ldr	r2, [pc, #332]	; (8003f24 <HAL_GPIO_Init+0x2dc>)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3302      	adds	r3, #2
 8003ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	220f      	movs	r2, #15
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dfe:	d019      	beq.n	8003e34 <HAL_GPIO_Init+0x1ec>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a49      	ldr	r2, [pc, #292]	; (8003f28 <HAL_GPIO_Init+0x2e0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <HAL_GPIO_Init+0x1e8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a48      	ldr	r2, [pc, #288]	; (8003f2c <HAL_GPIO_Init+0x2e4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00d      	beq.n	8003e2c <HAL_GPIO_Init+0x1e4>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a47      	ldr	r2, [pc, #284]	; (8003f30 <HAL_GPIO_Init+0x2e8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d007      	beq.n	8003e28 <HAL_GPIO_Init+0x1e0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a46      	ldr	r2, [pc, #280]	; (8003f34 <HAL_GPIO_Init+0x2ec>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <HAL_GPIO_Init+0x1dc>
 8003e20:	2304      	movs	r3, #4
 8003e22:	e008      	b.n	8003e36 <HAL_GPIO_Init+0x1ee>
 8003e24:	2305      	movs	r3, #5
 8003e26:	e006      	b.n	8003e36 <HAL_GPIO_Init+0x1ee>
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e004      	b.n	8003e36 <HAL_GPIO_Init+0x1ee>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e002      	b.n	8003e36 <HAL_GPIO_Init+0x1ee>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_GPIO_Init+0x1ee>
 8003e34:	2300      	movs	r3, #0
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	f002 0203 	and.w	r2, r2, #3
 8003e3c:	0092      	lsls	r2, r2, #2
 8003e3e:	4093      	lsls	r3, r2
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e46:	4937      	ldr	r1, [pc, #220]	; (8003f24 <HAL_GPIO_Init+0x2dc>)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e54:	4b38      	ldr	r3, [pc, #224]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e78:	4a2f      	ldr	r2, [pc, #188]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e7e:	4b2e      	ldr	r3, [pc, #184]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ea2:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ea8:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ecc:	4a1a      	ldr	r2, [pc, #104]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ed2:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ef6:	4a10      	ldr	r2, [pc, #64]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	3301      	adds	r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f47f aea3 	bne.w	8003c58 <HAL_GPIO_Init+0x10>
  }
}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40010000 	.word	0x40010000
 8003f28:	48000400 	.word	0x48000400
 8003f2c:	48000800 	.word	0x48000800
 8003f30:	48000c00 	.word	0x48000c00
 8003f34:	48001000 	.word	0x48001000
 8003f38:	40010400 	.word	0x40010400

08003f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f4c:	787b      	ldrb	r3, [r7, #1]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f58:	e002      	b.n	8003f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f5a:	887a      	ldrh	r2, [r7, #2]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f76:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f78:	695a      	ldr	r2, [r3, #20]
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d006      	beq.n	8003f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f82:	4a05      	ldr	r2, [pc, #20]	; (8003f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd fb80 	bl	8001690 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40010400 	.word	0x40010400

08003f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e081      	b.n	80040b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fd fdc0 	bl	8001b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2224      	movs	r2, #36	; 0x24
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ffc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d107      	bne.n	8004016 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	e006      	b.n	8004024 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004022:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d104      	bne.n	8004036 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004034:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004048:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004058:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69d9      	ldr	r1, [r3, #28]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1a      	ldr	r2, [r3, #32]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d138      	bne.n	8004142 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040da:	2302      	movs	r3, #2
 80040dc:	e032      	b.n	8004144 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2224      	movs	r2, #36	; 0x24
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800410c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	e000      	b.n	8004144 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004142:	2302      	movs	r3, #2
  }
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b20      	cmp	r3, #32
 8004164:	d139      	bne.n	80041da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004170:	2302      	movs	r3, #2
 8004172:	e033      	b.n	80041dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2224      	movs	r2, #36	; 0x24
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0201 	bic.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0201 	orr.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	e000      	b.n	80041dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ea:	b08b      	sub	sp, #44	; 0x2c
 80041ec:	af06      	add	r7, sp, #24
 80041ee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e0c4      	b.n	8004384 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fd fdda 	bl	8001dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2203      	movs	r2, #3
 8004218:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f004 fad1 	bl	80087c8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	e040      	b.n	80042ae <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	440b      	add	r3, r1
 800423c:	3301      	adds	r3, #1
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	440b      	add	r3, r1
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	440b      	add	r3, r1
 8004266:	3303      	adds	r3, #3
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800426c:	7bfa      	ldrb	r2, [r7, #15]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	440b      	add	r3, r1
 800427a:	3338      	adds	r3, #56	; 0x38
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	440b      	add	r3, r1
 800428e:	333c      	adds	r3, #60	; 0x3c
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	440b      	add	r3, r1
 80042a2:	3340      	adds	r3, #64	; 0x40
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	3301      	adds	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
 80042ae:	7bfa      	ldrb	r2, [r7, #15]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d3b9      	bcc.n	800422c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b8:	2300      	movs	r3, #0
 80042ba:	73fb      	strb	r3, [r7, #15]
 80042bc:	e044      	b.n	8004348 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042be:	7bfa      	ldrb	r2, [r7, #15]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	440b      	add	r3, r1
 80042cc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042d4:	7bfa      	ldrb	r2, [r7, #15]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	440b      	add	r3, r1
 80042e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042e6:	7bfa      	ldrb	r2, [r7, #15]
 80042e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	440b      	add	r3, r1
 80042f8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004300:	7bfa      	ldrb	r2, [r7, #15]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	440b      	add	r3, r1
 800430e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004316:	7bfa      	ldrb	r2, [r7, #15]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	440b      	add	r3, r1
 8004324:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800432c:	7bfa      	ldrb	r2, [r7, #15]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	440b      	add	r3, r1
 800433a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	3301      	adds	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	429a      	cmp	r2, r3
 8004350:	d3b5      	bcc.n	80042be <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	687e      	ldr	r6, [r7, #4]
 800435a:	466d      	mov	r5, sp
 800435c:	f106 0410 	add.w	r4, r6, #16
 8004360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	1d33      	adds	r3, r6, #4
 800436a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800436c:	6838      	ldr	r0, [r7, #0]
 800436e:	f004 fa46 	bl	80087fe <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800438c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004392:	af00      	add	r7, sp, #0
 8004394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004398:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800439c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800439e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f001 b823 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 817d 	beq.w	80046c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80043c8:	4bbc      	ldr	r3, [pc, #752]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 030c 	and.w	r3, r3, #12
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d00c      	beq.n	80043ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043d4:	4bb9      	ldr	r3, [pc, #740]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 030c 	and.w	r3, r3, #12
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d15c      	bne.n	800449a <HAL_RCC_OscConfig+0x10e>
 80043e0:	4bb6      	ldr	r3, [pc, #728]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ec:	d155      	bne.n	800449a <HAL_RCC_OscConfig+0x10e>
 80043ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043f2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004402:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d102      	bne.n	8004420 <HAL_RCC_OscConfig+0x94>
 800441a:	4ba8      	ldr	r3, [pc, #672]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	e015      	b.n	800444c <HAL_RCC_OscConfig+0xc0>
 8004420:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004424:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004428:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800442c:	fa93 f3a3 	rbit	r3, r3
 8004430:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004438:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800443c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004440:	fa93 f3a3 	rbit	r3, r3
 8004444:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004448:	4b9c      	ldr	r3, [pc, #624]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004450:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004454:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004458:	fa92 f2a2 	rbit	r2, r2
 800445c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004460:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004464:	fab2 f282 	clz	r2, r2
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	f042 0220 	orr.w	r2, r2, #32
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	f002 021f 	and.w	r2, r2, #31
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f202 	lsl.w	r2, r1, r2
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 811f 	beq.w	80046c0 <HAL_RCC_OscConfig+0x334>
 8004482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 8116 	bne.w	80046c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f000 bfaf 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044aa:	d106      	bne.n	80044ba <HAL_RCC_OscConfig+0x12e>
 80044ac:	4b83      	ldr	r3, [pc, #524]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a82      	ldr	r2, [pc, #520]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e036      	b.n	8004528 <HAL_RCC_OscConfig+0x19c>
 80044ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x158>
 80044ca:	4b7c      	ldr	r3, [pc, #496]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a7b      	ldr	r2, [pc, #492]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b79      	ldr	r3, [pc, #484]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a78      	ldr	r2, [pc, #480]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e021      	b.n	8004528 <HAL_RCC_OscConfig+0x19c>
 80044e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f4:	d10c      	bne.n	8004510 <HAL_RCC_OscConfig+0x184>
 80044f6:	4b71      	ldr	r3, [pc, #452]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a70      	ldr	r2, [pc, #448]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80044fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b6e      	ldr	r3, [pc, #440]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6d      	ldr	r2, [pc, #436]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e00b      	b.n	8004528 <HAL_RCC_OscConfig+0x19c>
 8004510:	4b6a      	ldr	r3, [pc, #424]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a69      	ldr	r2, [pc, #420]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	4b67      	ldr	r3, [pc, #412]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a66      	ldr	r2, [pc, #408]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004526:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004528:	4b64      	ldr	r3, [pc, #400]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	f023 020f 	bic.w	r2, r3, #15
 8004530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004534:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	495f      	ldr	r1, [pc, #380]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 800453e:	4313      	orrs	r3, r2
 8004540:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d059      	beq.n	8004606 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004552:	f7fd feed 	bl	8002330 <HAL_GetTick>
 8004556:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800455c:	f7fd fee8 	bl	8002330 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b64      	cmp	r3, #100	; 0x64
 800456a:	d902      	bls.n	8004572 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	f000 bf43 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004576:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800457e:	fa93 f3a3 	rbit	r3, r3
 8004582:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004586:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d102      	bne.n	80045a4 <HAL_RCC_OscConfig+0x218>
 800459e:	4b47      	ldr	r3, [pc, #284]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	e015      	b.n	80045d0 <HAL_RCC_OscConfig+0x244>
 80045a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80045b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80045c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80045cc:	4b3b      	ldr	r3, [pc, #236]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80045d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80045dc:	fa92 f2a2 	rbit	r2, r2
 80045e0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80045e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f002 021f 	and.w	r2, r2, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ab      	beq.n	800455c <HAL_RCC_OscConfig+0x1d0>
 8004604:	e05d      	b.n	80046c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004606:	f7fd fe93 	bl	8002330 <HAL_GetTick>
 800460a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	e00a      	b.n	8004626 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004610:	f7fd fe8e 	bl	8002330 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b64      	cmp	r3, #100	; 0x64
 800461e:	d902      	bls.n	8004626 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	f000 bee9 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800462a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800463a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463e:	fab3 f383 	clz	r3, r3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d102      	bne.n	8004658 <HAL_RCC_OscConfig+0x2cc>
 8004652:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	e015      	b.n	8004684 <HAL_RCC_OscConfig+0x2f8>
 8004658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800465c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004660:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800466c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004670:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004674:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004680:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <HAL_RCC_OscConfig+0x330>)
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004688:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800468c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004690:	fa92 f2a2 	rbit	r2, r2
 8004694:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004698:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800469c:	fab2 f282 	clz	r2, r2
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	f042 0220 	orr.w	r2, r2, #32
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	f002 021f 	and.w	r2, r2, #31
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f202 	lsl.w	r2, r1, r2
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1ab      	bne.n	8004610 <HAL_RCC_OscConfig+0x284>
 80046b8:	e003      	b.n	80046c2 <HAL_RCC_OscConfig+0x336>
 80046ba:	bf00      	nop
 80046bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 817d 	beq.w	80049d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046d8:	4ba6      	ldr	r3, [pc, #664]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 030c 	and.w	r3, r3, #12
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00b      	beq.n	80046fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046e4:	4ba3      	ldr	r3, [pc, #652]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d172      	bne.n	80047d6 <HAL_RCC_OscConfig+0x44a>
 80046f0:	4ba0      	ldr	r3, [pc, #640]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d16c      	bne.n	80047d6 <HAL_RCC_OscConfig+0x44a>
 80046fc:	2302      	movs	r3, #2
 80046fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800470e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	d102      	bne.n	800472c <HAL_RCC_OscConfig+0x3a0>
 8004726:	4b93      	ldr	r3, [pc, #588]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	e013      	b.n	8004754 <HAL_RCC_OscConfig+0x3c8>
 800472c:	2302      	movs	r3, #2
 800472e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004736:	fa93 f3a3 	rbit	r3, r3
 800473a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800473e:	2302      	movs	r3, #2
 8004740:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004744:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004750:	4b88      	ldr	r3, [pc, #544]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	2202      	movs	r2, #2
 8004756:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800475a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800475e:	fa92 f2a2 	rbit	r2, r2
 8004762:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004766:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800476a:	fab2 f282 	clz	r2, r2
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	f042 0220 	orr.w	r2, r2, #32
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	f002 021f 	and.w	r2, r2, #31
 800477a:	2101      	movs	r1, #1
 800477c:	fa01 f202 	lsl.w	r2, r1, r2
 8004780:	4013      	ands	r3, r2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <HAL_RCC_OscConfig+0x410>
 8004786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d002      	beq.n	800479c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f000 be2e 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479c:	4b75      	ldr	r3, [pc, #468]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	21f8      	movs	r1, #248	; 0xf8
 80047b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80047ba:	fa91 f1a1 	rbit	r1, r1
 80047be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80047c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80047c6:	fab1 f181 	clz	r1, r1
 80047ca:	b2c9      	uxtb	r1, r1
 80047cc:	408b      	lsls	r3, r1
 80047ce:	4969      	ldr	r1, [pc, #420]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d4:	e0fd      	b.n	80049d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8088 	beq.w	80048f8 <HAL_RCC_OscConfig+0x56c>
 80047e8:	2301      	movs	r3, #1
 80047ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80047fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004808:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	461a      	mov	r2, r3
 8004810:	2301      	movs	r3, #1
 8004812:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7fd fd8c 	bl	8002330 <HAL_GetTick>
 8004818:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481c:	e00a      	b.n	8004834 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481e:	f7fd fd87 	bl	8002330 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	f000 bde2 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004834:	2302      	movs	r3, #2
 8004836:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800483e:	fa93 f3a3 	rbit	r3, r3
 8004842:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004846:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484a:	fab3 f383 	clz	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	d102      	bne.n	8004864 <HAL_RCC_OscConfig+0x4d8>
 800485e:	4b45      	ldr	r3, [pc, #276]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	e013      	b.n	800488c <HAL_RCC_OscConfig+0x500>
 8004864:	2302      	movs	r3, #2
 8004866:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800486e:	fa93 f3a3 	rbit	r3, r3
 8004872:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004876:	2302      	movs	r3, #2
 8004878:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800487c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004888:	4b3a      	ldr	r3, [pc, #232]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	2202      	movs	r2, #2
 800488e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004892:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004896:	fa92 f2a2 	rbit	r2, r2
 800489a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800489e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80048a2:	fab2 f282 	clz	r2, r2
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	f042 0220 	orr.w	r2, r2, #32
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	f002 021f 	and.w	r2, r2, #31
 80048b2:	2101      	movs	r1, #1
 80048b4:	fa01 f202 	lsl.w	r2, r1, r2
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0af      	beq.n	800481e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048be:	4b2d      	ldr	r3, [pc, #180]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	21f8      	movs	r1, #248	; 0xf8
 80048d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80048dc:	fa91 f1a1 	rbit	r1, r1
 80048e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80048e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80048e8:	fab1 f181 	clz	r1, r1
 80048ec:	b2c9      	uxtb	r1, r1
 80048ee:	408b      	lsls	r3, r1
 80048f0:	4920      	ldr	r1, [pc, #128]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
 80048f6:	e06c      	b.n	80049d2 <HAL_RCC_OscConfig+0x646>
 80048f8:	2301      	movs	r3, #1
 80048fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800490a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004918:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	461a      	mov	r2, r3
 8004920:	2300      	movs	r3, #0
 8004922:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fd fd04 	bl	8002330 <HAL_GetTick>
 8004928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800492c:	e00a      	b.n	8004944 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800492e:	f7fd fcff 	bl	8002330 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d902      	bls.n	8004944 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	f000 bd5a 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004944:	2302      	movs	r3, #2
 8004946:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f043 0301 	orr.w	r3, r3, #1
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d104      	bne.n	8004978 <HAL_RCC_OscConfig+0x5ec>
 800496e:	4b01      	ldr	r3, [pc, #4]	; (8004974 <HAL_RCC_OscConfig+0x5e8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	e015      	b.n	80049a0 <HAL_RCC_OscConfig+0x614>
 8004974:	40021000 	.word	0x40021000
 8004978:	2302      	movs	r3, #2
 800497a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800498a:	2302      	movs	r3, #2
 800498c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004990:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004994:	fa93 f3a3 	rbit	r3, r3
 8004998:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800499c:	4bc8      	ldr	r3, [pc, #800]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	2202      	movs	r2, #2
 80049a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80049a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80049aa:	fa92 f2a2 	rbit	r2, r2
 80049ae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80049b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80049b6:	fab2 f282 	clz	r2, r2
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	f042 0220 	orr.w	r2, r2, #32
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	f002 021f 	and.w	r2, r2, #31
 80049c6:	2101      	movs	r1, #1
 80049c8:	fa01 f202 	lsl.w	r2, r1, r2
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1ad      	bne.n	800492e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8110 	beq.w	8004c08 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d079      	beq.n	8004aec <HAL_RCC_OscConfig+0x760>
 80049f8:	2301      	movs	r3, #1
 80049fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a0e:	fab3 f383 	clz	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	4bab      	ldr	r3, [pc, #684]	; (8004cc4 <HAL_RCC_OscConfig+0x938>)
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	2301      	movs	r3, #1
 8004a20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a22:	f7fd fc85 	bl	8002330 <HAL_GetTick>
 8004a26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a2c:	f7fd fc80 	bl	8002330 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d902      	bls.n	8004a42 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	f000 bcdb 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004a42:	2302      	movs	r3, #2
 8004a44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a4c:	fa93 f3a3 	rbit	r3, r3
 8004a50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	fa93 f2a3 	rbit	r2, r3
 8004a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a80:	2202      	movs	r2, #2
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	fa93 f2a3 	rbit	r2, r3
 8004a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9c:	4b88      	ldr	r3, [pc, #544]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004aa8:	2102      	movs	r1, #2
 8004aaa:	6019      	str	r1, [r3, #0]
 8004aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	fa93 f1a3 	rbit	r1, r3
 8004aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ac2:	6019      	str	r1, [r3, #0]
  return result;
 8004ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	fab3 f383 	clz	r3, r3
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2101      	movs	r1, #1
 8004ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0a0      	beq.n	8004a2c <HAL_RCC_OscConfig+0x6a0>
 8004aea:	e08d      	b.n	8004c08 <HAL_RCC_OscConfig+0x87c>
 8004aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004af4:	2201      	movs	r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	fa93 f2a3 	rbit	r2, r3
 8004b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b0e:	601a      	str	r2, [r3, #0]
  return result;
 8004b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b18:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1a:	fab3 f383 	clz	r3, r3
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	4b68      	ldr	r3, [pc, #416]	; (8004cc4 <HAL_RCC_OscConfig+0x938>)
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2e:	f7fd fbff 	bl	8002330 <HAL_GetTick>
 8004b32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b36:	e00a      	b.n	8004b4e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b38:	f7fd fbfa 	bl	8002330 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d902      	bls.n	8004b4e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	f000 bc55 	b.w	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b56:	2202      	movs	r2, #2
 8004b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	fa93 f2a3 	rbit	r2, r3
 8004b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	fa93 f2a3 	rbit	r2, r3
 8004b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	fa93 f2a3 	rbit	r2, r3
 8004bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004bb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bba:	4b41      	ldr	r3, [pc, #260]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	6019      	str	r1, [r3, #0]
 8004bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	fa93 f1a3 	rbit	r1, r3
 8004bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bdc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004be0:	6019      	str	r1, [r3, #0]
  return result;
 8004be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	fab3 f383 	clz	r3, r3
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d197      	bne.n	8004b38 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 81a1 	beq.w	8004f60 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c24:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d116      	bne.n	8004c5e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c30:	4b23      	ldr	r3, [pc, #140]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	4a22      	ldr	r2, [pc, #136]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	61d3      	str	r3, [r2, #28]
 8004c3c:	4b20      	ldr	r3, [pc, #128]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c48:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c52:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004c56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <HAL_RCC_OscConfig+0x93c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d11a      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c6a:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <HAL_RCC_OscConfig+0x93c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a16      	ldr	r2, [pc, #88]	; (8004cc8 <HAL_RCC_OscConfig+0x93c>)
 8004c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c76:	f7fd fb5b 	bl	8002330 <HAL_GetTick>
 8004c7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7e:	e009      	b.n	8004c94 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c80:	f7fd fb56 	bl	8002330 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b64      	cmp	r3, #100	; 0x64
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e3b1      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <HAL_RCC_OscConfig+0x93c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0ef      	beq.n	8004c80 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d10d      	bne.n	8004ccc <HAL_RCC_OscConfig+0x940>
 8004cb0:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	4a02      	ldr	r2, [pc, #8]	; (8004cc0 <HAL_RCC_OscConfig+0x934>)
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	6213      	str	r3, [r2, #32]
 8004cbc:	e03c      	b.n	8004d38 <HAL_RCC_OscConfig+0x9ac>
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	10908120 	.word	0x10908120
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10c      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x96a>
 8004cdc:	4bc1      	ldr	r3, [pc, #772]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	4ac0      	ldr	r2, [pc, #768]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	6213      	str	r3, [r2, #32]
 8004ce8:	4bbe      	ldr	r3, [pc, #760]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	4abd      	ldr	r2, [pc, #756]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004cee:	f023 0304 	bic.w	r3, r3, #4
 8004cf2:	6213      	str	r3, [r2, #32]
 8004cf4:	e020      	b.n	8004d38 <HAL_RCC_OscConfig+0x9ac>
 8004cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x994>
 8004d06:	4bb7      	ldr	r3, [pc, #732]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4ab6      	ldr	r2, [pc, #728]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d0c:	f043 0304 	orr.w	r3, r3, #4
 8004d10:	6213      	str	r3, [r2, #32]
 8004d12:	4bb4      	ldr	r3, [pc, #720]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	4ab3      	ldr	r2, [pc, #716]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6213      	str	r3, [r2, #32]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0x9ac>
 8004d20:	4bb0      	ldr	r3, [pc, #704]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	4aaf      	ldr	r2, [pc, #700]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	6213      	str	r3, [r2, #32]
 8004d2c:	4bad      	ldr	r3, [pc, #692]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	4aac      	ldr	r2, [pc, #688]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004d32:	f023 0304 	bic.w	r3, r3, #4
 8004d36:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8081 	beq.w	8004e4c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4a:	f7fd faf1 	bl	8002330 <HAL_GetTick>
 8004d4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d52:	e00b      	b.n	8004d6c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d54:	f7fd faec 	bl	8002330 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e345      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d74:	2202      	movs	r2, #2
 8004d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	fa93 f2a3 	rbit	r2, r3
 8004d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d98:	2202      	movs	r2, #2
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004da0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	fa93 f2a3 	rbit	r2, r3
 8004daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004db2:	601a      	str	r2, [r3, #0]
  return result;
 8004db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004dbc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f043 0302 	orr.w	r3, r3, #2
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RCC_OscConfig+0xa4c>
 8004dd2:	4b84      	ldr	r3, [pc, #528]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	e013      	b.n	8004e00 <HAL_RCC_OscConfig+0xa74>
 8004dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ddc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004de0:	2202      	movs	r2, #2
 8004de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	fa93 f2a3 	rbit	r2, r3
 8004df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	4b79      	ldr	r3, [pc, #484]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e04:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004e08:	2102      	movs	r1, #2
 8004e0a:	6011      	str	r1, [r2, #0]
 8004e0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e10:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	fa92 f1a2 	rbit	r1, r2
 8004e1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e1e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e22:	6011      	str	r1, [r2, #0]
  return result;
 8004e24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e28:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	fab2 f282 	clz	r2, r2
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	f002 021f 	and.w	r2, r2, #31
 8004e3e:	2101      	movs	r1, #1
 8004e40:	fa01 f202 	lsl.w	r2, r1, r2
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d084      	beq.n	8004d54 <HAL_RCC_OscConfig+0x9c8>
 8004e4a:	e07f      	b.n	8004f4c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4c:	f7fd fa70 	bl	8002330 <HAL_GetTick>
 8004e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e54:	e00b      	b.n	8004e6e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e56:	f7fd fa6b 	bl	8002330 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e2c4      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e76:	2202      	movs	r2, #2
 8004e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	fa93 f2a3 	rbit	r2, r3
 8004e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	fa93 f2a3 	rbit	r2, r3
 8004eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004eb4:	601a      	str	r2, [r3, #0]
  return result;
 8004eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004ebe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f043 0302 	orr.w	r3, r3, #2
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d102      	bne.n	8004eda <HAL_RCC_OscConfig+0xb4e>
 8004ed4:	4b43      	ldr	r3, [pc, #268]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	e013      	b.n	8004f02 <HAL_RCC_OscConfig+0xb76>
 8004eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ede:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	fa93 f2a3 	rbit	r2, r3
 8004ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ef8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	4b39      	ldr	r3, [pc, #228]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	6011      	str	r1, [r2, #0]
 8004f0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	fa92 f1a2 	rbit	r1, r2
 8004f1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f20:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f24:	6011      	str	r1, [r2, #0]
  return result;
 8004f26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f2a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	fab2 f282 	clz	r2, r2
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	f002 021f 	and.w	r2, r2, #31
 8004f40:	2101      	movs	r1, #1
 8004f42:	fa01 f202 	lsl.w	r2, r1, r2
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d184      	bne.n	8004e56 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d105      	bne.n	8004f60 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f54:	4b23      	ldr	r3, [pc, #140]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8242 	beq.w	80053f6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f72:	4b1c      	ldr	r3, [pc, #112]	; (8004fe4 <HAL_RCC_OscConfig+0xc58>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f003 030c 	and.w	r3, r3, #12
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	f000 8213 	beq.w	80053a6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	f040 8162 	bne.w	8005256 <HAL_RCC_OscConfig+0xeca>
 8004f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f96:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004f9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	fa93 f2a3 	rbit	r2, r3
 8004fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004fb6:	601a      	str	r2, [r3, #0]
  return result;
 8004fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004fc0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd8:	f7fd f9aa 	bl	8002330 <HAL_GetTick>
 8004fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fe0:	e00c      	b.n	8004ffc <HAL_RCC_OscConfig+0xc70>
 8004fe2:	bf00      	nop
 8004fe4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fd f9a2 	bl	8002330 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e1fd      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
 8004ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005000:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	fa93 f2a3 	rbit	r2, r3
 8005018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800501c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005020:	601a      	str	r2, [r3, #0]
  return result;
 8005022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005026:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800502a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800502c:	fab3 f383 	clz	r3, r3
 8005030:	b2db      	uxtb	r3, r3
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	b2db      	uxtb	r3, r3
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	d102      	bne.n	8005046 <HAL_RCC_OscConfig+0xcba>
 8005040:	4bb0      	ldr	r3, [pc, #704]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	e027      	b.n	8005096 <HAL_RCC_OscConfig+0xd0a>
 8005046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800504e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005058:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	fa93 f2a3 	rbit	r2, r3
 8005062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005066:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005070:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	fa93 f2a3 	rbit	r2, r3
 8005088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	4b9c      	ldr	r3, [pc, #624]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800509a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800509e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050a2:	6011      	str	r1, [r2, #0]
 80050a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050a8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80050ac:	6812      	ldr	r2, [r2, #0]
 80050ae:	fa92 f1a2 	rbit	r1, r2
 80050b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050ba:	6011      	str	r1, [r2, #0]
  return result;
 80050bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	fab2 f282 	clz	r2, r2
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	f042 0220 	orr.w	r2, r2, #32
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	f002 021f 	and.w	r2, r2, #31
 80050d6:	2101      	movs	r1, #1
 80050d8:	fa01 f202 	lsl.w	r2, r1, r2
 80050dc:	4013      	ands	r3, r2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d182      	bne.n	8004fe8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050e2:	4b88      	ldr	r3, [pc, #544]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80050f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	430b      	orrs	r3, r1
 8005104:	497f      	ldr	r1, [pc, #508]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 8005106:	4313      	orrs	r3, r2
 8005108:	604b      	str	r3, [r1, #4]
 800510a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800510e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005112:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005116:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	fa93 f2a3 	rbit	r2, r3
 8005126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800512e:	601a      	str	r2, [r3, #0]
  return result;
 8005130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005134:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005138:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800513a:	fab3 f383 	clz	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005144:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	461a      	mov	r2, r3
 800514c:	2301      	movs	r3, #1
 800514e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005150:	f7fd f8ee 	bl	8002330 <HAL_GetTick>
 8005154:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005158:	e009      	b.n	800516e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800515a:	f7fd f8e9 	bl	8002330 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b02      	cmp	r3, #2
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e144      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
 800516e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005172:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005176:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800517a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005180:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	fa93 f2a3 	rbit	r2, r3
 800518a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005192:	601a      	str	r2, [r3, #0]
  return result;
 8005194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005198:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800519c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800519e:	fab3 f383 	clz	r3, r3
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d102      	bne.n	80051b8 <HAL_RCC_OscConfig+0xe2c>
 80051b2:	4b54      	ldr	r3, [pc, #336]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	e027      	b.n	8005208 <HAL_RCC_OscConfig+0xe7c>
 80051b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	fa93 f2a3 	rbit	r2, r3
 80051d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80051e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	fa93 f2a3 	rbit	r2, r3
 80051fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	4b3f      	ldr	r3, [pc, #252]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800520c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005210:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005214:	6011      	str	r1, [r2, #0]
 8005216:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800521a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	fa92 f1a2 	rbit	r1, r2
 8005224:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005228:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800522c:	6011      	str	r1, [r2, #0]
  return result;
 800522e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005232:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	fab2 f282 	clz	r2, r2
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	f042 0220 	orr.w	r2, r2, #32
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	f002 021f 	and.w	r2, r2, #31
 8005248:	2101      	movs	r1, #1
 800524a:	fa01 f202 	lsl.w	r2, r1, r2
 800524e:	4013      	ands	r3, r2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d082      	beq.n	800515a <HAL_RCC_OscConfig+0xdce>
 8005254:	e0cf      	b.n	80053f6 <HAL_RCC_OscConfig+0x106a>
 8005256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800525e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005268:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	fa93 f2a3 	rbit	r2, r3
 8005272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005276:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800527a:	601a      	str	r2, [r3, #0]
  return result;
 800527c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005280:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005284:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005286:	fab3 f383 	clz	r3, r3
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005290:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	461a      	mov	r2, r3
 8005298:	2300      	movs	r3, #0
 800529a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529c:	f7fd f848 	bl	8002330 <HAL_GetTick>
 80052a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052a4:	e009      	b.n	80052ba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a6:	f7fd f843 	bl	8002330 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e09e      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
 80052ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	fa93 f2a3 	rbit	r2, r3
 80052d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052da:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052de:	601a      	str	r2, [r3, #0]
  return result;
 80052e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80052e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ea:	fab3 f383 	clz	r3, r3
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d104      	bne.n	8005308 <HAL_RCC_OscConfig+0xf7c>
 80052fe:	4b01      	ldr	r3, [pc, #4]	; (8005304 <HAL_RCC_OscConfig+0xf78>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	e029      	b.n	8005358 <HAL_RCC_OscConfig+0xfcc>
 8005304:	40021000 	.word	0x40021000
 8005308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	fa93 f2a3 	rbit	r2, r3
 8005324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005328:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005332:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005340:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	fa93 f2a3 	rbit	r2, r3
 800534a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	4b2b      	ldr	r3, [pc, #172]	; (8005404 <HAL_RCC_OscConfig+0x1078>)
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800535c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005360:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005364:	6011      	str	r1, [r2, #0]
 8005366:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800536a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	fa92 f1a2 	rbit	r1, r2
 8005374:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005378:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800537c:	6011      	str	r1, [r2, #0]
  return result;
 800537e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005382:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	fab2 f282 	clz	r2, r2
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	f042 0220 	orr.w	r2, r2, #32
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	f002 021f 	and.w	r2, r2, #31
 8005398:	2101      	movs	r1, #1
 800539a:	fa01 f202 	lsl.w	r2, r1, r2
 800539e:	4013      	ands	r3, r2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d180      	bne.n	80052a6 <HAL_RCC_OscConfig+0xf1a>
 80053a4:	e027      	b.n	80053f6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e01e      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80053ba:	4b12      	ldr	r3, [pc, #72]	; (8005404 <HAL_RCC_OscConfig+0x1078>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80053ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d10b      	bne.n	80053f2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80053da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80053de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80053e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d001      	beq.n	80053f6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40021000 	.word	0x40021000

08005408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b09e      	sub	sp, #120	; 0x78
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e162      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005420:	4b90      	ldr	r3, [pc, #576]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d910      	bls.n	8005450 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542e:	4b8d      	ldr	r3, [pc, #564]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f023 0207 	bic.w	r2, r3, #7
 8005436:	498b      	ldr	r1, [pc, #556]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	4313      	orrs	r3, r2
 800543c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543e:	4b89      	ldr	r3, [pc, #548]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d001      	beq.n	8005450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e14a      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800545c:	4b82      	ldr	r3, [pc, #520]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	497f      	ldr	r1, [pc, #508]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 800546a:	4313      	orrs	r3, r2
 800546c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 80dc 	beq.w	8005634 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d13c      	bne.n	80054fe <HAL_RCC_ClockConfig+0xf6>
 8005484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005488:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800548c:	fa93 f3a3 	rbit	r3, r3
 8005490:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005494:	fab3 f383 	clz	r3, r3
 8005498:	b2db      	uxtb	r3, r3
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f043 0301 	orr.w	r3, r3, #1
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d102      	bne.n	80054ae <HAL_RCC_ClockConfig+0xa6>
 80054a8:	4b6f      	ldr	r3, [pc, #444]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	e00f      	b.n	80054ce <HAL_RCC_ClockConfig+0xc6>
 80054ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054b6:	fa93 f3a3 	rbit	r3, r3
 80054ba:	667b      	str	r3, [r7, #100]	; 0x64
 80054bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054c0:	663b      	str	r3, [r7, #96]	; 0x60
 80054c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c4:	fa93 f3a3 	rbit	r3, r3
 80054c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ca:	4b67      	ldr	r3, [pc, #412]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80054d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054d6:	fa92 f2a2 	rbit	r2, r2
 80054da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80054dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054de:	fab2 f282 	clz	r2, r2
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	f042 0220 	orr.w	r2, r2, #32
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	f002 021f 	and.w	r2, r2, #31
 80054ee:	2101      	movs	r1, #1
 80054f0:	fa01 f202 	lsl.w	r2, r1, r2
 80054f4:	4013      	ands	r3, r2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d17b      	bne.n	80055f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e0f3      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d13c      	bne.n	8005580 <HAL_RCC_ClockConfig+0x178>
 8005506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800550a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550e:	fa93 f3a3 	rbit	r3, r3
 8005512:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b01      	cmp	r3, #1
 8005528:	d102      	bne.n	8005530 <HAL_RCC_ClockConfig+0x128>
 800552a:	4b4f      	ldr	r3, [pc, #316]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	e00f      	b.n	8005550 <HAL_RCC_ClockConfig+0x148>
 8005530:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005534:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005538:	fa93 f3a3 	rbit	r3, r3
 800553c:	647b      	str	r3, [r7, #68]	; 0x44
 800553e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005542:	643b      	str	r3, [r7, #64]	; 0x40
 8005544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005546:	fa93 f3a3 	rbit	r3, r3
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800554c:	4b46      	ldr	r3, [pc, #280]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005554:	63ba      	str	r2, [r7, #56]	; 0x38
 8005556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005558:	fa92 f2a2 	rbit	r2, r2
 800555c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800555e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005560:	fab2 f282 	clz	r2, r2
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	f042 0220 	orr.w	r2, r2, #32
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	f002 021f 	and.w	r2, r2, #31
 8005570:	2101      	movs	r1, #1
 8005572:	fa01 f202 	lsl.w	r2, r1, r2
 8005576:	4013      	ands	r3, r2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d13a      	bne.n	80055f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0b2      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
 8005580:	2302      	movs	r3, #2
 8005582:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	fa93 f3a3 	rbit	r3, r3
 800558a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558e:	fab3 f383 	clz	r3, r3
 8005592:	b2db      	uxtb	r3, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	b2db      	uxtb	r3, r3
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d102      	bne.n	80055a8 <HAL_RCC_ClockConfig+0x1a0>
 80055a2:	4b31      	ldr	r3, [pc, #196]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	e00d      	b.n	80055c4 <HAL_RCC_ClockConfig+0x1bc>
 80055a8:	2302      	movs	r3, #2
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	fa93 f3a3 	rbit	r3, r3
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
 80055b4:	2302      	movs	r3, #2
 80055b6:	623b      	str	r3, [r7, #32]
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	fa93 f3a3 	rbit	r3, r3
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	4b29      	ldr	r3, [pc, #164]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2202      	movs	r2, #2
 80055c6:	61ba      	str	r2, [r7, #24]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	fa92 f2a2 	rbit	r2, r2
 80055ce:	617a      	str	r2, [r7, #20]
  return result;
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	fab2 f282 	clz	r2, r2
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	f042 0220 	orr.w	r2, r2, #32
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	f002 021f 	and.w	r2, r2, #31
 80055e2:	2101      	movs	r1, #1
 80055e4:	fa01 f202 	lsl.w	r2, r1, r2
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e079      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055f2:	4b1d      	ldr	r3, [pc, #116]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f023 0203 	bic.w	r2, r3, #3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	491a      	ldr	r1, [pc, #104]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 8005600:	4313      	orrs	r3, r2
 8005602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005604:	f7fc fe94 	bl	8002330 <HAL_GetTick>
 8005608:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560a:	e00a      	b.n	8005622 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560c:	f7fc fe90 	bl	8002330 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	f241 3288 	movw	r2, #5000	; 0x1388
 800561a:	4293      	cmp	r3, r2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e061      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005622:	4b11      	ldr	r3, [pc, #68]	; (8005668 <HAL_RCC_ClockConfig+0x260>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f003 020c 	and.w	r2, r3, #12
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	429a      	cmp	r2, r3
 8005632:	d1eb      	bne.n	800560c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d214      	bcs.n	800566c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005642:	4b08      	ldr	r3, [pc, #32]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 0207 	bic.w	r2, r3, #7
 800564a:	4906      	ldr	r1, [pc, #24]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005652:	4b04      	ldr	r3, [pc, #16]	; (8005664 <HAL_RCC_ClockConfig+0x25c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	429a      	cmp	r2, r3
 800565e:	d005      	beq.n	800566c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e040      	b.n	80056e6 <HAL_RCC_ClockConfig+0x2de>
 8005664:	40022000 	.word	0x40022000
 8005668:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005678:	4b1d      	ldr	r3, [pc, #116]	; (80056f0 <HAL_RCC_ClockConfig+0x2e8>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	491a      	ldr	r1, [pc, #104]	; (80056f0 <HAL_RCC_ClockConfig+0x2e8>)
 8005686:	4313      	orrs	r3, r2
 8005688:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005696:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <HAL_RCC_ClockConfig+0x2e8>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	4912      	ldr	r1, [pc, #72]	; (80056f0 <HAL_RCC_ClockConfig+0x2e8>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056aa:	f000 f829 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 80056ae:	4601      	mov	r1, r0
 80056b0:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <HAL_RCC_ClockConfig+0x2e8>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b8:	22f0      	movs	r2, #240	; 0xf0
 80056ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	fa92 f2a2 	rbit	r2, r2
 80056c2:	60fa      	str	r2, [r7, #12]
  return result;
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	fab2 f282 	clz	r2, r2
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	40d3      	lsrs	r3, r2
 80056ce:	4a09      	ldr	r2, [pc, #36]	; (80056f4 <HAL_RCC_ClockConfig+0x2ec>)
 80056d0:	5cd3      	ldrb	r3, [r2, r3]
 80056d2:	fa21 f303 	lsr.w	r3, r1, r3
 80056d6:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <HAL_RCC_ClockConfig+0x2f0>)
 80056d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80056da:	4b08      	ldr	r3, [pc, #32]	; (80056fc <HAL_RCC_ClockConfig+0x2f4>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fc fde2 	bl	80022a8 <HAL_InitTick>
  
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3778      	adds	r7, #120	; 0x78
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40021000 	.word	0x40021000
 80056f4:	0800b6fc 	.word	0x0800b6fc
 80056f8:	20000090 	.word	0x20000090
 80056fc:	20000094 	.word	0x20000094

08005700 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005700:	b480      	push	{r7}
 8005702:	b08b      	sub	sp, #44	; 0x2c
 8005704:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
 800570a:	2300      	movs	r3, #0
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	2300      	movs	r3, #0
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800571a:	4b29      	ldr	r3, [pc, #164]	; (80057c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b04      	cmp	r3, #4
 8005728:	d002      	beq.n	8005730 <HAL_RCC_GetSysClockFreq+0x30>
 800572a:	2b08      	cmp	r3, #8
 800572c:	d003      	beq.n	8005736 <HAL_RCC_GetSysClockFreq+0x36>
 800572e:	e03c      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005730:	4b24      	ldr	r3, [pc, #144]	; (80057c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005732:	623b      	str	r3, [r7, #32]
      break;
 8005734:	e03c      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800573c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005740:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	fa92 f2a2 	rbit	r2, r2
 8005748:	607a      	str	r2, [r7, #4]
  return result;
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	fab2 f282 	clz	r2, r2
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	40d3      	lsrs	r3, r2
 8005754:	4a1c      	ldr	r2, [pc, #112]	; (80057c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005756:	5cd3      	ldrb	r3, [r2, r3]
 8005758:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800575a:	4b19      	ldr	r3, [pc, #100]	; (80057c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	220f      	movs	r2, #15
 8005764:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	fa92 f2a2 	rbit	r2, r2
 800576c:	60fa      	str	r2, [r7, #12]
  return result;
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	fab2 f282 	clz	r2, r2
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	40d3      	lsrs	r3, r2
 8005778:	4a14      	ldr	r2, [pc, #80]	; (80057cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800577a:	5cd3      	ldrb	r3, [r2, r3]
 800577c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d008      	beq.n	800579a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005788:	4a0e      	ldr	r2, [pc, #56]	; (80057c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
 8005798:	e004      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800579e:	fb02 f303 	mul.w	r3, r2, r3
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	623b      	str	r3, [r7, #32]
      break;
 80057a8:	e002      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057ac:	623b      	str	r3, [r7, #32]
      break;
 80057ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057b0:	6a3b      	ldr	r3, [r7, #32]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	372c      	adds	r7, #44	; 0x2c
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000
 80057c4:	007a1200 	.word	0x007a1200
 80057c8:	0800b714 	.word	0x0800b714
 80057cc:	0800b724 	.word	0x0800b724
 80057d0:	003d0900 	.word	0x003d0900

080057d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d8:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057da:	681b      	ldr	r3, [r3, #0]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	20000090 	.word	0x20000090

080057ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80057f2:	f7ff ffef 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 80057f6:	4601      	mov	r1, r0
 80057f8:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005800:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005804:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	fa92 f2a2 	rbit	r2, r2
 800580c:	603a      	str	r2, [r7, #0]
  return result;
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	fab2 f282 	clz	r2, r2
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	40d3      	lsrs	r3, r2
 8005818:	4a04      	ldr	r2, [pc, #16]	; (800582c <HAL_RCC_GetPCLK1Freq+0x40>)
 800581a:	5cd3      	ldrb	r3, [r2, r3]
 800581c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005820:	4618      	mov	r0, r3
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40021000 	.word	0x40021000
 800582c:	0800b70c 	.word	0x0800b70c

08005830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005836:	f7ff ffcd 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 800583a:	4601      	mov	r1, r0
 800583c:	4b0b      	ldr	r3, [pc, #44]	; (800586c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005844:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005848:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	fa92 f2a2 	rbit	r2, r2
 8005850:	603a      	str	r2, [r7, #0]
  return result;
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	fab2 f282 	clz	r2, r2
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	40d3      	lsrs	r3, r2
 800585c:	4a04      	ldr	r2, [pc, #16]	; (8005870 <HAL_RCC_GetPCLK2Freq+0x40>)
 800585e:	5cd3      	ldrb	r3, [r2, r3]
 8005860:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40021000 	.word	0x40021000
 8005870:	0800b70c 	.word	0x0800b70c

08005874 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b092      	sub	sp, #72	; 0x48
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005884:	2300      	movs	r3, #0
 8005886:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 80d4 	beq.w	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005898:	4b4e      	ldr	r3, [pc, #312]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10e      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a4:	4b4b      	ldr	r3, [pc, #300]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	4a4a      	ldr	r2, [pc, #296]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ae:	61d3      	str	r3, [r2, #28]
 80058b0:	4b48      	ldr	r3, [pc, #288]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b8:	60bb      	str	r3, [r7, #8]
 80058ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c2:	4b45      	ldr	r3, [pc, #276]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d118      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ce:	4b42      	ldr	r3, [pc, #264]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a41      	ldr	r2, [pc, #260]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058da:	f7fc fd29 	bl	8002330 <HAL_GetTick>
 80058de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e0:	e008      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e2:	f7fc fd25 	bl	8002330 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b64      	cmp	r3, #100	; 0x64
 80058ee:	d901      	bls.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e169      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f4:	4b38      	ldr	r3, [pc, #224]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005900:	4b34      	ldr	r3, [pc, #208]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005908:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800590a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8084 	beq.w	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800591c:	429a      	cmp	r2, r3
 800591e:	d07c      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005920:	4b2c      	ldr	r3, [pc, #176]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800592a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800592e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	fa93 f3a3 	rbit	r3, r3
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800593a:	fab3 f383 	clz	r3, r3
 800593e:	b2db      	uxtb	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	4b26      	ldr	r3, [pc, #152]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005944:	4413      	add	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	461a      	mov	r2, r3
 800594a:	2301      	movs	r3, #1
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005952:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	fa93 f3a3 	rbit	r3, r3
 800595a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800595e:	fab3 f383 	clz	r3, r3
 8005962:	b2db      	uxtb	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	461a      	mov	r2, r3
 800596e:	2300      	movs	r3, #0
 8005970:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005972:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005976:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d04b      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005982:	f7fc fcd5 	bl	8002330 <HAL_GetTick>
 8005986:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005988:	e00a      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800598a:	f7fc fcd1 	bl	8002330 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	f241 3288 	movw	r2, #5000	; 0x1388
 8005998:	4293      	cmp	r3, r2
 800599a:	d901      	bls.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e113      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80059a0:	2302      	movs	r3, #2
 80059a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	fa93 f3a3 	rbit	r3, r3
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24
 80059ac:	2302      	movs	r3, #2
 80059ae:	623b      	str	r3, [r7, #32]
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	fa93 f3a3 	rbit	r3, r3
 80059b6:	61fb      	str	r3, [r7, #28]
  return result;
 80059b8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ba:	fab3 f383 	clz	r3, r3
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f043 0302 	orr.w	r3, r3, #2
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d108      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80059ce:	4b01      	ldr	r3, [pc, #4]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	e00d      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40007000 	.word	0x40007000
 80059dc:	10908100 	.word	0x10908100
 80059e0:	2302      	movs	r3, #2
 80059e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	fa93 f3a3 	rbit	r3, r3
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	4b78      	ldr	r3, [pc, #480]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	2202      	movs	r2, #2
 80059f2:	613a      	str	r2, [r7, #16]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	fa92 f2a2 	rbit	r2, r2
 80059fa:	60fa      	str	r2, [r7, #12]
  return result;
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	fab2 f282 	clz	r2, r2
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	f002 021f 	and.w	r2, r2, #31
 8005a0e:	2101      	movs	r1, #1
 8005a10:	fa01 f202 	lsl.w	r2, r1, r2
 8005a14:	4013      	ands	r3, r2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0b7      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005a1a:	4b6d      	ldr	r3, [pc, #436]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	496a      	ldr	r1, [pc, #424]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d105      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a34:	4b66      	ldr	r3, [pc, #408]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	4a65      	ldr	r2, [pc, #404]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d008      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a4c:	4b60      	ldr	r3, [pc, #384]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a50:	f023 0203 	bic.w	r2, r3, #3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	495d      	ldr	r1, [pc, #372]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d008      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a6a:	4b59      	ldr	r3, [pc, #356]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	4956      	ldr	r1, [pc, #344]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a88:	4b51      	ldr	r3, [pc, #324]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	494e      	ldr	r1, [pc, #312]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d008      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aa6:	4b4a      	ldr	r3, [pc, #296]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	f023 0210 	bic.w	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	4947      	ldr	r1, [pc, #284]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005ac4:	4b42      	ldr	r3, [pc, #264]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	493f      	ldr	r1, [pc, #252]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d008      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ae2:	4b3b      	ldr	r3, [pc, #236]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	f023 0220 	bic.w	r2, r3, #32
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	4938      	ldr	r1, [pc, #224]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b00:	4b33      	ldr	r3, [pc, #204]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	4930      	ldr	r1, [pc, #192]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0310 	and.w	r3, r3, #16
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d008      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b1e:	4b2c      	ldr	r3, [pc, #176]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	4929      	ldr	r1, [pc, #164]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d008      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b3c:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	4921      	ldr	r1, [pc, #132]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b5a:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	491a      	ldr	r1, [pc, #104]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d008      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005b78:	4b15      	ldr	r3, [pc, #84]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	4912      	ldr	r1, [pc, #72]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b96:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	490b      	ldr	r1, [pc, #44]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d008      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc0:	4903      	ldr	r1, [pc, #12]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3748      	adds	r7, #72	; 0x48
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40021000 	.word	0x40021000

08005bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e09d      	b.n	8005d22 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d108      	bne.n	8005c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bf6:	d009      	beq.n	8005c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	61da      	str	r2, [r3, #28]
 8005bfe:	e005      	b.n	8005c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fb ffd2 	bl	8001bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c4c:	d902      	bls.n	8005c54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e002      	b.n	8005c5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c62:	d007      	beq.n	8005c74 <HAL_SPI_Init+0xa0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c6c:	d002      	beq.n	8005c74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb6:	ea42 0103 	orr.w	r1, r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	0c1b      	lsrs	r3, r3, #16
 8005cd0:	f003 0204 	and.w	r2, r3, #4
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005cf0:	ea42 0103 	orr.w	r1, r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69da      	ldr	r2, [r3, #28]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e049      	b.n	8005dd0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d106      	bne.n	8005d56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7fb ff7f 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3304      	adds	r3, #4
 8005d66:	4619      	mov	r1, r3
 8005d68:	4610      	mov	r0, r2
 8005d6a:	f000 fd27 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d001      	beq.n	8005df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e04a      	b.n	8005e86 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d018      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x6c>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1a:	d013      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x6c>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1d      	ldr	r2, [pc, #116]	; (8005e98 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00e      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x6c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1c      	ldr	r2, [pc, #112]	; (8005e9c <HAL_TIM_Base_Start_IT+0xc4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d009      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x6c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1a      	ldr	r2, [pc, #104]	; (8005ea0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_TIM_Base_Start_IT+0x6c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a19      	ldr	r2, [pc, #100]	; (8005ea4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d115      	bne.n	8005e70 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b06      	cmp	r3, #6
 8005e54:	d015      	beq.n	8005e82 <HAL_TIM_Base_Start_IT+0xaa>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d011      	beq.n	8005e82 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f042 0201 	orr.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6e:	e008      	b.n	8005e82 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	e000      	b.n	8005e84 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40000400 	.word	0x40000400
 8005e9c:	40000800 	.word	0x40000800
 8005ea0:	40013400 	.word	0x40013400
 8005ea4:	40014000 	.word	0x40014000
 8005ea8:	00010007 	.word	0x00010007

08005eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e049      	b.n	8005f52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f841 	bl	8005f5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f000 fc66 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <HAL_TIM_PWM_Start+0x24>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	bf14      	ite	ne
 8005f8c:	2301      	movne	r3, #1
 8005f8e:	2300      	moveq	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	e03c      	b.n	800600e <HAL_TIM_PWM_Start+0x9e>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d109      	bne.n	8005fae <HAL_TIM_PWM_Start+0x3e>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	bf14      	ite	ne
 8005fa6:	2301      	movne	r3, #1
 8005fa8:	2300      	moveq	r3, #0
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	e02f      	b.n	800600e <HAL_TIM_PWM_Start+0x9e>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d109      	bne.n	8005fc8 <HAL_TIM_PWM_Start+0x58>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	e022      	b.n	800600e <HAL_TIM_PWM_Start+0x9e>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b0c      	cmp	r3, #12
 8005fcc:	d109      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0x72>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	bf14      	ite	ne
 8005fda:	2301      	movne	r3, #1
 8005fdc:	2300      	moveq	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	e015      	b.n	800600e <HAL_TIM_PWM_Start+0x9e>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d109      	bne.n	8005ffc <HAL_TIM_PWM_Start+0x8c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	bf14      	ite	ne
 8005ff4:	2301      	movne	r3, #1
 8005ff6:	2300      	moveq	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	e008      	b.n	800600e <HAL_TIM_PWM_Start+0x9e>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e097      	b.n	8006146 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d104      	bne.n	8006026 <HAL_TIM_PWM_Start+0xb6>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006024:	e023      	b.n	800606e <HAL_TIM_PWM_Start+0xfe>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b04      	cmp	r3, #4
 800602a:	d104      	bne.n	8006036 <HAL_TIM_PWM_Start+0xc6>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006034:	e01b      	b.n	800606e <HAL_TIM_PWM_Start+0xfe>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b08      	cmp	r3, #8
 800603a:	d104      	bne.n	8006046 <HAL_TIM_PWM_Start+0xd6>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006044:	e013      	b.n	800606e <HAL_TIM_PWM_Start+0xfe>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b0c      	cmp	r3, #12
 800604a:	d104      	bne.n	8006056 <HAL_TIM_PWM_Start+0xe6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006054:	e00b      	b.n	800606e <HAL_TIM_PWM_Start+0xfe>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b10      	cmp	r3, #16
 800605a:	d104      	bne.n	8006066 <HAL_TIM_PWM_Start+0xf6>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006064:	e003      	b.n	800606e <HAL_TIM_PWM_Start+0xfe>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2201      	movs	r2, #1
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 ffa0 	bl	8006fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a33      	ldr	r2, [pc, #204]	; (8006150 <HAL_TIM_PWM_Start+0x1e0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <HAL_TIM_PWM_Start+0x13e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a32      	ldr	r2, [pc, #200]	; (8006154 <HAL_TIM_PWM_Start+0x1e4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00e      	beq.n	80060ae <HAL_TIM_PWM_Start+0x13e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a30      	ldr	r2, [pc, #192]	; (8006158 <HAL_TIM_PWM_Start+0x1e8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d009      	beq.n	80060ae <HAL_TIM_PWM_Start+0x13e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a2f      	ldr	r2, [pc, #188]	; (800615c <HAL_TIM_PWM_Start+0x1ec>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <HAL_TIM_PWM_Start+0x13e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_TIM_PWM_Start+0x1f0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d101      	bne.n	80060b2 <HAL_TIM_PWM_Start+0x142>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <HAL_TIM_PWM_Start+0x144>
 80060b2:	2300      	movs	r3, #0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d007      	beq.n	80060c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a20      	ldr	r2, [pc, #128]	; (8006150 <HAL_TIM_PWM_Start+0x1e0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d018      	beq.n	8006104 <HAL_TIM_PWM_Start+0x194>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060da:	d013      	beq.n	8006104 <HAL_TIM_PWM_Start+0x194>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a20      	ldr	r2, [pc, #128]	; (8006164 <HAL_TIM_PWM_Start+0x1f4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <HAL_TIM_PWM_Start+0x194>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1f      	ldr	r2, [pc, #124]	; (8006168 <HAL_TIM_PWM_Start+0x1f8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <HAL_TIM_PWM_Start+0x194>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a17      	ldr	r2, [pc, #92]	; (8006154 <HAL_TIM_PWM_Start+0x1e4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIM_PWM_Start+0x194>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a16      	ldr	r2, [pc, #88]	; (8006158 <HAL_TIM_PWM_Start+0x1e8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d115      	bne.n	8006130 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	4b18      	ldr	r3, [pc, #96]	; (800616c <HAL_TIM_PWM_Start+0x1fc>)
 800610c:	4013      	ands	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b06      	cmp	r3, #6
 8006114:	d015      	beq.n	8006142 <HAL_TIM_PWM_Start+0x1d2>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611c:	d011      	beq.n	8006142 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0201 	orr.w	r2, r2, #1
 800612c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612e:	e008      	b.n	8006142 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f042 0201 	orr.w	r2, r2, #1
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	e000      	b.n	8006144 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006142:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40012c00 	.word	0x40012c00
 8006154:	40013400 	.word	0x40013400
 8006158:	40014000 	.word	0x40014000
 800615c:	40014400 	.word	0x40014400
 8006160:	40014800 	.word	0x40014800
 8006164:	40000400 	.word	0x40000400
 8006168:	40000800 	.word	0x40000800
 800616c:	00010007 	.word	0x00010007

08006170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b02      	cmp	r3, #2
 8006184:	d122      	bne.n	80061cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b02      	cmp	r3, #2
 8006192:	d11b      	bne.n	80061cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f06f 0202 	mvn.w	r2, #2
 800619c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fae3 	bl	800677e <HAL_TIM_IC_CaptureCallback>
 80061b8:	e005      	b.n	80061c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fad5 	bl	800676a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fae6 	bl	8006792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d122      	bne.n	8006220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d11b      	bne.n	8006220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0204 	mvn.w	r2, #4
 80061f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2202      	movs	r2, #2
 80061f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fab9 	bl	800677e <HAL_TIM_IC_CaptureCallback>
 800620c:	e005      	b.n	800621a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 faab 	bl	800676a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fabc 	bl	8006792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b08      	cmp	r3, #8
 800622c:	d122      	bne.n	8006274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b08      	cmp	r3, #8
 800623a:	d11b      	bne.n	8006274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0208 	mvn.w	r2, #8
 8006244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2204      	movs	r2, #4
 800624a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fa8f 	bl	800677e <HAL_TIM_IC_CaptureCallback>
 8006260:	e005      	b.n	800626e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fa81 	bl	800676a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fa92 	bl	8006792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	2b10      	cmp	r3, #16
 8006280:	d122      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b10      	cmp	r3, #16
 800628e:	d11b      	bne.n	80062c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0210 	mvn.w	r2, #16
 8006298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2208      	movs	r2, #8
 800629e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa65 	bl	800677e <HAL_TIM_IC_CaptureCallback>
 80062b4:	e005      	b.n	80062c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fa57 	bl	800676a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fa68 	bl	8006792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d10e      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d107      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f06f 0201 	mvn.w	r2, #1
 80062ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fb fb44 	bl	800197c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d10e      	bne.n	8006320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630c:	2b80      	cmp	r3, #128	; 0x80
 800630e:	d107      	bne.n	8006320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fefe 	bl	800711c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800632e:	d10e      	bne.n	800634e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633a:	2b80      	cmp	r3, #128	; 0x80
 800633c:	d107      	bne.n	800634e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fef1 	bl	8007130 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d10e      	bne.n	800637a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	d107      	bne.n	800637a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 fa16 	bl	80067a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b20      	cmp	r3, #32
 8006386:	d10e      	bne.n	80063a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b20      	cmp	r3, #32
 8006394:	d107      	bne.n	80063a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f06f 0220 	mvn.w	r2, #32
 800639e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 feb1 	bl	8007108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063a6:	bf00      	nop
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e0ff      	b.n	80065ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b14      	cmp	r3, #20
 80063da:	f200 80f0 	bhi.w	80065be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063de:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	08006439 	.word	0x08006439
 80063e8:	080065bf 	.word	0x080065bf
 80063ec:	080065bf 	.word	0x080065bf
 80063f0:	080065bf 	.word	0x080065bf
 80063f4:	08006479 	.word	0x08006479
 80063f8:	080065bf 	.word	0x080065bf
 80063fc:	080065bf 	.word	0x080065bf
 8006400:	080065bf 	.word	0x080065bf
 8006404:	080064bb 	.word	0x080064bb
 8006408:	080065bf 	.word	0x080065bf
 800640c:	080065bf 	.word	0x080065bf
 8006410:	080065bf 	.word	0x080065bf
 8006414:	080064fb 	.word	0x080064fb
 8006418:	080065bf 	.word	0x080065bf
 800641c:	080065bf 	.word	0x080065bf
 8006420:	080065bf 	.word	0x080065bf
 8006424:	0800653d 	.word	0x0800653d
 8006428:	080065bf 	.word	0x080065bf
 800642c:	080065bf 	.word	0x080065bf
 8006430:	080065bf 	.word	0x080065bf
 8006434:	0800657d 	.word	0x0800657d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fa4c 	bl	80068dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0208 	orr.w	r2, r2, #8
 8006452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0204 	bic.w	r2, r2, #4
 8006462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6999      	ldr	r1, [r3, #24]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	619a      	str	r2, [r3, #24]
      break;
 8006476:	e0a5      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fabc 	bl	80069fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6999      	ldr	r1, [r3, #24]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	021a      	lsls	r2, r3, #8
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	619a      	str	r2, [r3, #24]
      break;
 80064b8:	e084      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fb25 	bl	8006b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0208 	orr.w	r2, r2, #8
 80064d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0204 	bic.w	r2, r2, #4
 80064e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69d9      	ldr	r1, [r3, #28]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	61da      	str	r2, [r3, #28]
      break;
 80064f8:	e064      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fb8d 	bl	8006c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69d9      	ldr	r1, [r3, #28]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	021a      	lsls	r2, r3, #8
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	61da      	str	r2, [r3, #28]
      break;
 800653a:	e043      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fbd6 	bl	8006cf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0208 	orr.w	r2, r2, #8
 8006556:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0204 	bic.w	r2, r2, #4
 8006566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800657a:	e023      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fc1a 	bl	8006dbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	021a      	lsls	r2, r3, #8
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065bc:	e002      	b.n	80065c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	75fb      	strb	r3, [r7, #23]
      break;
 80065c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop

080065d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_TIM_ConfigClockSource+0x1c>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e0b6      	b.n	8006762 <HAL_TIM_ConfigClockSource+0x18a>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006612:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800661e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006630:	d03e      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0xd8>
 8006632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006636:	f200 8087 	bhi.w	8006748 <HAL_TIM_ConfigClockSource+0x170>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800663e:	f000 8086 	beq.w	800674e <HAL_TIM_ConfigClockSource+0x176>
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006646:	d87f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006648:	2b70      	cmp	r3, #112	; 0x70
 800664a:	d01a      	beq.n	8006682 <HAL_TIM_ConfigClockSource+0xaa>
 800664c:	2b70      	cmp	r3, #112	; 0x70
 800664e:	d87b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006650:	2b60      	cmp	r3, #96	; 0x60
 8006652:	d050      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x11e>
 8006654:	2b60      	cmp	r3, #96	; 0x60
 8006656:	d877      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006658:	2b50      	cmp	r3, #80	; 0x50
 800665a:	d03c      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0xfe>
 800665c:	2b50      	cmp	r3, #80	; 0x50
 800665e:	d873      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	d058      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x13e>
 8006664:	2b40      	cmp	r3, #64	; 0x40
 8006666:	d86f      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006668:	2b30      	cmp	r3, #48	; 0x30
 800666a:	d064      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15e>
 800666c:	2b30      	cmp	r3, #48	; 0x30
 800666e:	d86b      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006670:	2b20      	cmp	r3, #32
 8006672:	d060      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15e>
 8006674:	2b20      	cmp	r3, #32
 8006676:	d867      	bhi.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
 8006678:	2b00      	cmp	r3, #0
 800667a:	d05c      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15e>
 800667c:	2b10      	cmp	r3, #16
 800667e:	d05a      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0x15e>
 8006680:	e062      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6818      	ldr	r0, [r3, #0]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6899      	ldr	r1, [r3, #8]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f000 fc73 	bl	8006f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	609a      	str	r2, [r3, #8]
      break;
 80066ae:	e04f      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6818      	ldr	r0, [r3, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	6899      	ldr	r1, [r3, #8]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f000 fc5c 	bl	8006f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066d2:	609a      	str	r2, [r3, #8]
      break;
 80066d4:	e03c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 fbd0 	bl	8006e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2150      	movs	r1, #80	; 0x50
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fc29 	bl	8006f46 <TIM_ITRx_SetConfig>
      break;
 80066f4:	e02c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	461a      	mov	r2, r3
 8006704:	f000 fbef 	bl	8006ee6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2160      	movs	r1, #96	; 0x60
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fc19 	bl	8006f46 <TIM_ITRx_SetConfig>
      break;
 8006714:	e01c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	6859      	ldr	r1, [r3, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	461a      	mov	r2, r3
 8006724:	f000 fbb0 	bl	8006e88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2140      	movs	r1, #64	; 0x40
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fc09 	bl	8006f46 <TIM_ITRx_SetConfig>
      break;
 8006734:	e00c      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4619      	mov	r1, r3
 8006740:	4610      	mov	r0, r2
 8006742:	f000 fc00 	bl	8006f46 <TIM_ITRx_SetConfig>
      break;
 8006746:	e003      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	73fb      	strb	r3, [r7, #15]
      break;
 800674c:	e000      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800674e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006760:	7bfb      	ldrb	r3, [r7, #15]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a3c      	ldr	r2, [pc, #240]	; (80068c0 <TIM_Base_SetConfig+0x104>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00f      	beq.n	80067f4 <TIM_Base_SetConfig+0x38>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067da:	d00b      	beq.n	80067f4 <TIM_Base_SetConfig+0x38>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a39      	ldr	r2, [pc, #228]	; (80068c4 <TIM_Base_SetConfig+0x108>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d007      	beq.n	80067f4 <TIM_Base_SetConfig+0x38>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a38      	ldr	r2, [pc, #224]	; (80068c8 <TIM_Base_SetConfig+0x10c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d003      	beq.n	80067f4 <TIM_Base_SetConfig+0x38>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a37      	ldr	r2, [pc, #220]	; (80068cc <TIM_Base_SetConfig+0x110>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d108      	bne.n	8006806 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a2d      	ldr	r2, [pc, #180]	; (80068c0 <TIM_Base_SetConfig+0x104>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d01b      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006814:	d017      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a2a      	ldr	r2, [pc, #168]	; (80068c4 <TIM_Base_SetConfig+0x108>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a29      	ldr	r2, [pc, #164]	; (80068c8 <TIM_Base_SetConfig+0x10c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00f      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a28      	ldr	r2, [pc, #160]	; (80068cc <TIM_Base_SetConfig+0x110>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00b      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a27      	ldr	r2, [pc, #156]	; (80068d0 <TIM_Base_SetConfig+0x114>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d007      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a26      	ldr	r2, [pc, #152]	; (80068d4 <TIM_Base_SetConfig+0x118>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d003      	beq.n	8006846 <TIM_Base_SetConfig+0x8a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a25      	ldr	r2, [pc, #148]	; (80068d8 <TIM_Base_SetConfig+0x11c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d108      	bne.n	8006858 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a10      	ldr	r2, [pc, #64]	; (80068c0 <TIM_Base_SetConfig+0x104>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00f      	beq.n	80068a4 <TIM_Base_SetConfig+0xe8>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a11      	ldr	r2, [pc, #68]	; (80068cc <TIM_Base_SetConfig+0x110>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00b      	beq.n	80068a4 <TIM_Base_SetConfig+0xe8>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a10      	ldr	r2, [pc, #64]	; (80068d0 <TIM_Base_SetConfig+0x114>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d007      	beq.n	80068a4 <TIM_Base_SetConfig+0xe8>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a0f      	ldr	r2, [pc, #60]	; (80068d4 <TIM_Base_SetConfig+0x118>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_Base_SetConfig+0xe8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a0e      	ldr	r2, [pc, #56]	; (80068d8 <TIM_Base_SetConfig+0x11c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d103      	bne.n	80068ac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	615a      	str	r2, [r3, #20]
}
 80068b2:	bf00      	nop
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40012c00 	.word	0x40012c00
 80068c4:	40000400 	.word	0x40000400
 80068c8:	40000800 	.word	0x40000800
 80068cc:	40013400 	.word	0x40013400
 80068d0:	40014000 	.word	0x40014000
 80068d4:	40014400 	.word	0x40014400
 80068d8:	40014800 	.word	0x40014800

080068dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	f023 0201 	bic.w	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800690a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0303 	bic.w	r3, r3, #3
 8006916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f023 0302 	bic.w	r3, r3, #2
 8006928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a2c      	ldr	r2, [pc, #176]	; (80069e8 <TIM_OC1_SetConfig+0x10c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00f      	beq.n	800695c <TIM_OC1_SetConfig+0x80>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a2b      	ldr	r2, [pc, #172]	; (80069ec <TIM_OC1_SetConfig+0x110>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00b      	beq.n	800695c <TIM_OC1_SetConfig+0x80>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a2a      	ldr	r2, [pc, #168]	; (80069f0 <TIM_OC1_SetConfig+0x114>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d007      	beq.n	800695c <TIM_OC1_SetConfig+0x80>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a29      	ldr	r2, [pc, #164]	; (80069f4 <TIM_OC1_SetConfig+0x118>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_OC1_SetConfig+0x80>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a28      	ldr	r2, [pc, #160]	; (80069f8 <TIM_OC1_SetConfig+0x11c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d10c      	bne.n	8006976 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f023 0308 	bic.w	r3, r3, #8
 8006962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f023 0304 	bic.w	r3, r3, #4
 8006974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a1b      	ldr	r2, [pc, #108]	; (80069e8 <TIM_OC1_SetConfig+0x10c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00f      	beq.n	800699e <TIM_OC1_SetConfig+0xc2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1a      	ldr	r2, [pc, #104]	; (80069ec <TIM_OC1_SetConfig+0x110>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00b      	beq.n	800699e <TIM_OC1_SetConfig+0xc2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a19      	ldr	r2, [pc, #100]	; (80069f0 <TIM_OC1_SetConfig+0x114>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d007      	beq.n	800699e <TIM_OC1_SetConfig+0xc2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a18      	ldr	r2, [pc, #96]	; (80069f4 <TIM_OC1_SetConfig+0x118>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d003      	beq.n	800699e <TIM_OC1_SetConfig+0xc2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a17      	ldr	r2, [pc, #92]	; (80069f8 <TIM_OC1_SetConfig+0x11c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d111      	bne.n	80069c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	621a      	str	r2, [r3, #32]
}
 80069dc:	bf00      	nop
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40013400 	.word	0x40013400
 80069f0:	40014000 	.word	0x40014000
 80069f4:	40014400 	.word	0x40014400
 80069f8:	40014800 	.word	0x40014800

080069fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f023 0210 	bic.w	r2, r3, #16
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 0320 	bic.w	r3, r3, #32
 8006a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a28      	ldr	r2, [pc, #160]	; (8006afc <TIM_OC2_SetConfig+0x100>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_OC2_SetConfig+0x6c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a27      	ldr	r2, [pc, #156]	; (8006b00 <TIM_OC2_SetConfig+0x104>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d10d      	bne.n	8006a84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a1d      	ldr	r2, [pc, #116]	; (8006afc <TIM_OC2_SetConfig+0x100>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00f      	beq.n	8006aac <TIM_OC2_SetConfig+0xb0>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a1c      	ldr	r2, [pc, #112]	; (8006b00 <TIM_OC2_SetConfig+0x104>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00b      	beq.n	8006aac <TIM_OC2_SetConfig+0xb0>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1b      	ldr	r2, [pc, #108]	; (8006b04 <TIM_OC2_SetConfig+0x108>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <TIM_OC2_SetConfig+0xb0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a1a      	ldr	r2, [pc, #104]	; (8006b08 <TIM_OC2_SetConfig+0x10c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_OC2_SetConfig+0xb0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <TIM_OC2_SetConfig+0x110>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d113      	bne.n	8006ad4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ab2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40012c00 	.word	0x40012c00
 8006b00:	40013400 	.word	0x40013400
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40014400 	.word	0x40014400
 8006b0c:	40014800 	.word	0x40014800

08006b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a27      	ldr	r2, [pc, #156]	; (8006c0c <TIM_OC3_SetConfig+0xfc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d003      	beq.n	8006b7a <TIM_OC3_SetConfig+0x6a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a26      	ldr	r2, [pc, #152]	; (8006c10 <TIM_OC3_SetConfig+0x100>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d10d      	bne.n	8006b96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b94:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <TIM_OC3_SetConfig+0xfc>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00f      	beq.n	8006bbe <TIM_OC3_SetConfig+0xae>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a1b      	ldr	r2, [pc, #108]	; (8006c10 <TIM_OC3_SetConfig+0x100>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00b      	beq.n	8006bbe <TIM_OC3_SetConfig+0xae>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1a      	ldr	r2, [pc, #104]	; (8006c14 <TIM_OC3_SetConfig+0x104>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d007      	beq.n	8006bbe <TIM_OC3_SetConfig+0xae>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a19      	ldr	r2, [pc, #100]	; (8006c18 <TIM_OC3_SetConfig+0x108>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <TIM_OC3_SetConfig+0xae>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a18      	ldr	r2, [pc, #96]	; (8006c1c <TIM_OC3_SetConfig+0x10c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d113      	bne.n	8006be6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	621a      	str	r2, [r3, #32]
}
 8006c00:	bf00      	nop
 8006c02:	371c      	adds	r7, #28
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	40012c00 	.word	0x40012c00
 8006c10:	40013400 	.word	0x40013400
 8006c14:	40014000 	.word	0x40014000
 8006c18:	40014400 	.word	0x40014400
 8006c1c:	40014800 	.word	0x40014800

08006c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	021b      	lsls	r3, r3, #8
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	031b      	lsls	r3, r3, #12
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a18      	ldr	r2, [pc, #96]	; (8006ce0 <TIM_OC4_SetConfig+0xc0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00f      	beq.n	8006ca4 <TIM_OC4_SetConfig+0x84>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a17      	ldr	r2, [pc, #92]	; (8006ce4 <TIM_OC4_SetConfig+0xc4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00b      	beq.n	8006ca4 <TIM_OC4_SetConfig+0x84>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a16      	ldr	r2, [pc, #88]	; (8006ce8 <TIM_OC4_SetConfig+0xc8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d007      	beq.n	8006ca4 <TIM_OC4_SetConfig+0x84>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a15      	ldr	r2, [pc, #84]	; (8006cec <TIM_OC4_SetConfig+0xcc>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_OC4_SetConfig+0x84>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a14      	ldr	r2, [pc, #80]	; (8006cf0 <TIM_OC4_SetConfig+0xd0>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d109      	bne.n	8006cb8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006caa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	019b      	lsls	r3, r3, #6
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40012c00 	.word	0x40012c00
 8006ce4:	40013400 	.word	0x40013400
 8006ce8:	40014000 	.word	0x40014000
 8006cec:	40014400 	.word	0x40014400
 8006cf0:	40014800 	.word	0x40014800

08006cf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	041b      	lsls	r3, r3, #16
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <TIM_OC5_SetConfig+0xb4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00f      	beq.n	8006d6e <TIM_OC5_SetConfig+0x7a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a16      	ldr	r2, [pc, #88]	; (8006dac <TIM_OC5_SetConfig+0xb8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00b      	beq.n	8006d6e <TIM_OC5_SetConfig+0x7a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a15      	ldr	r2, [pc, #84]	; (8006db0 <TIM_OC5_SetConfig+0xbc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d007      	beq.n	8006d6e <TIM_OC5_SetConfig+0x7a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a14      	ldr	r2, [pc, #80]	; (8006db4 <TIM_OC5_SetConfig+0xc0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d003      	beq.n	8006d6e <TIM_OC5_SetConfig+0x7a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <TIM_OC5_SetConfig+0xc4>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d109      	bne.n	8006d82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	621a      	str	r2, [r3, #32]
}
 8006d9c:	bf00      	nop
 8006d9e:	371c      	adds	r7, #28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	40012c00 	.word	0x40012c00
 8006dac:	40013400 	.word	0x40013400
 8006db0:	40014000 	.word	0x40014000
 8006db4:	40014400 	.word	0x40014400
 8006db8:	40014800 	.word	0x40014800

08006dbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	021b      	lsls	r3, r3, #8
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	051b      	lsls	r3, r3, #20
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <TIM_OC6_SetConfig+0xb8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00f      	beq.n	8006e38 <TIM_OC6_SetConfig+0x7c>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <TIM_OC6_SetConfig+0xbc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00b      	beq.n	8006e38 <TIM_OC6_SetConfig+0x7c>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a16      	ldr	r2, [pc, #88]	; (8006e7c <TIM_OC6_SetConfig+0xc0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d007      	beq.n	8006e38 <TIM_OC6_SetConfig+0x7c>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a15      	ldr	r2, [pc, #84]	; (8006e80 <TIM_OC6_SetConfig+0xc4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC6_SetConfig+0x7c>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a14      	ldr	r2, [pc, #80]	; (8006e84 <TIM_OC6_SetConfig+0xc8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d109      	bne.n	8006e4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	029b      	lsls	r3, r3, #10
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40012c00 	.word	0x40012c00
 8006e78:	40013400 	.word	0x40013400
 8006e7c:	40014000 	.word	0x40014000
 8006e80:	40014400 	.word	0x40014400
 8006e84:	40014800 	.word	0x40014800

08006e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	f023 0201 	bic.w	r2, r3, #1
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	011b      	lsls	r3, r3, #4
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f023 030a 	bic.w	r3, r3, #10
 8006ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	621a      	str	r2, [r3, #32]
}
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b087      	sub	sp, #28
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	f023 0210 	bic.w	r2, r3, #16
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	031b      	lsls	r3, r3, #12
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	621a      	str	r2, [r3, #32]
}
 8006f3a:	bf00      	nop
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f043 0307 	orr.w	r3, r3, #7
 8006f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	609a      	str	r2, [r3, #8]
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	021a      	lsls	r2, r3, #8
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	609a      	str	r2, [r3, #8]
}
 8006fb0:	bf00      	nop
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	2201      	movs	r2, #1
 8006fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a1a      	ldr	r2, [r3, #32]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	43db      	mvns	r3, r3
 8006fde:	401a      	ands	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a1a      	ldr	r2, [r3, #32]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f003 031f 	and.w	r3, r3, #31
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
	...

08007008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800701c:	2302      	movs	r3, #2
 800701e:	e063      	b.n	80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a2b      	ldr	r2, [pc, #172]	; (80070f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a2a      	ldr	r2, [pc, #168]	; (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d108      	bne.n	8007066 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800705a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1b      	ldr	r2, [pc, #108]	; (80070f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d018      	beq.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007092:	d013      	beq.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a18      	ldr	r2, [pc, #96]	; (80070fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00e      	beq.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a17      	ldr	r2, [pc, #92]	; (8007100 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d009      	beq.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a12      	ldr	r2, [pc, #72]	; (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d004      	beq.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a13      	ldr	r2, [pc, #76]	; (8007104 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d10c      	bne.n	80070d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	40012c00 	.word	0x40012c00
 80070f8:	40013400 	.word	0x40013400
 80070fc:	40000400 	.word	0x40000400
 8007100:	40000800 	.word	0x40000800
 8007104:	40014000 	.word	0x40014000

08007108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e040      	b.n	80071d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fa fde2 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2224      	movs	r2, #36	; 0x24
 8007170:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0201 	bic.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fbd4 	bl	8007930 <UART_SetConfig>
 8007188:	4603      	mov	r3, r0
 800718a:	2b01      	cmp	r3, #1
 800718c:	d101      	bne.n	8007192 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e022      	b.n	80071d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fd9c 	bl	8007cd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0201 	orr.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fe23 	bl	8007e1c <UART_CheckIdleState>
 80071d6:	4603      	mov	r3, r0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b08b      	sub	sp, #44	; 0x2c
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	4613      	mov	r3, r2
 80071ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071f2:	2b20      	cmp	r3, #32
 80071f4:	d147      	bne.n	8007286 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <HAL_UART_Transmit_IT+0x22>
 80071fc:	88fb      	ldrh	r3, [r7, #6]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e040      	b.n	8007288 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	88fa      	ldrh	r2, [r7, #6]
 8007210:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	88fa      	ldrh	r2, [r7, #6]
 8007218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2221      	movs	r2, #33	; 0x21
 800722e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007238:	d107      	bne.n	800724a <HAL_UART_Transmit_IT+0x6a>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d103      	bne.n	800724a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4a13      	ldr	r2, [pc, #76]	; (8007294 <HAL_UART_Transmit_IT+0xb4>)
 8007246:	66da      	str	r2, [r3, #108]	; 0x6c
 8007248:	e002      	b.n	8007250 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4a12      	ldr	r2, [pc, #72]	; (8007298 <HAL_UART_Transmit_IT+0xb8>)
 800724e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	613b      	str	r3, [r7, #16]
   return(result);
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007264:	627b      	str	r3, [r7, #36]	; 0x24
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	623b      	str	r3, [r7, #32]
 8007270:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	69f9      	ldr	r1, [r7, #28]
 8007274:	6a3a      	ldr	r2, [r7, #32]
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	61bb      	str	r3, [r7, #24]
   return(result);
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e6      	bne.n	8007250 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	e000      	b.n	8007288 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007286:	2302      	movs	r3, #2
  }
}
 8007288:	4618      	mov	r0, r3
 800728a:	372c      	adds	r7, #44	; 0x2c
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	08008351 	.word	0x08008351
 8007298:	08008299 	.word	0x08008299

0800729c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08a      	sub	sp, #40	; 0x28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d132      	bne.n	800731a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_UART_Receive_IT+0x24>
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e02b      	b.n	800731c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d018      	beq.n	800730a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	613b      	str	r3, [r7, #16]
   return(result);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	623b      	str	r3, [r7, #32]
 80072f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fa:	69f9      	ldr	r1, [r7, #28]
 80072fc:	6a3a      	ldr	r2, [r7, #32]
 80072fe:	e841 2300 	strex	r3, r2, [r1]
 8007302:	61bb      	str	r3, [r7, #24]
   return(result);
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1e6      	bne.n	80072d8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	461a      	mov	r2, r3
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fe93 	bl	800803c <UART_Start_Receive_IT>
 8007316:	4603      	mov	r3, r0
 8007318:	e000      	b.n	800731c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800731a:	2302      	movs	r3, #2
  }
}
 800731c:	4618      	mov	r0, r3
 800731e:	3728      	adds	r7, #40	; 0x28
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b0ba      	sub	sp, #232	; 0xe8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800734a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800734e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007352:	4013      	ands	r3, r2
 8007354:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800735c:	2b00      	cmp	r3, #0
 800735e:	d115      	bne.n	800738c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00f      	beq.n	800738c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800736c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007370:	f003 0320 	and.w	r3, r3, #32
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 82ab 	beq.w	80078d8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	4798      	blx	r3
      }
      return;
 800738a:	e2a5      	b.n	80078d8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800738c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 8117 	beq.w	80075c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d106      	bne.n	80073b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80073a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80073a6:	4b85      	ldr	r3, [pc, #532]	; (80075bc <HAL_UART_IRQHandler+0x298>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 810a 	beq.w	80075c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d011      	beq.n	80073e0 <HAL_UART_IRQHandler+0xbc>
 80073bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00b      	beq.n	80073e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2201      	movs	r2, #1
 80073ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d6:	f043 0201 	orr.w	r2, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d011      	beq.n	8007410 <HAL_UART_IRQHandler+0xec>
 80073ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00b      	beq.n	8007410 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2202      	movs	r2, #2
 80073fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007406:	f043 0204 	orr.w	r2, r3, #4
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	d011      	beq.n	8007440 <HAL_UART_IRQHandler+0x11c>
 800741c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00b      	beq.n	8007440 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2204      	movs	r2, #4
 800742e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007436:	f043 0202 	orr.w	r2, r3, #2
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007444:	f003 0308 	and.w	r3, r3, #8
 8007448:	2b00      	cmp	r3, #0
 800744a:	d017      	beq.n	800747c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800744c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007450:	f003 0320 	and.w	r3, r3, #32
 8007454:	2b00      	cmp	r3, #0
 8007456:	d105      	bne.n	8007464 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800745c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00b      	beq.n	800747c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2208      	movs	r2, #8
 800746a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007472:	f043 0208 	orr.w	r2, r3, #8
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800747c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007484:	2b00      	cmp	r3, #0
 8007486:	d012      	beq.n	80074ae <HAL_UART_IRQHandler+0x18a>
 8007488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800748c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00c      	beq.n	80074ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800749c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074a4:	f043 0220 	orr.w	r2, r3, #32
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8211 	beq.w	80078dc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80074ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00d      	beq.n	80074e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ca:	f003 0320 	and.w	r3, r3, #32
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d007      	beq.n	80074e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f6:	2b40      	cmp	r3, #64	; 0x40
 80074f8:	d005      	beq.n	8007506 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007502:	2b00      	cmp	r3, #0
 8007504:	d04f      	beq.n	80075a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fe4c 	bl	80081a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d141      	bne.n	800759e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3308      	adds	r3, #8
 8007520:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3308      	adds	r3, #8
 8007542:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007546:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800754a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007552:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800755e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1d9      	bne.n	800751a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800756a:	2b00      	cmp	r3, #0
 800756c:	d013      	beq.n	8007596 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007572:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <HAL_UART_IRQHandler+0x29c>)
 8007574:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800757a:	4618      	mov	r0, r3
 800757c:	f7fc fb26 	bl	8003bcc <HAL_DMA_Abort_IT>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d017      	beq.n	80075b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800758a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007590:	4610      	mov	r0, r2
 8007592:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007594:	e00f      	b.n	80075b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f9b4 	bl	8007904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759c:	e00b      	b.n	80075b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f9b0 	bl	8007904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a4:	e007      	b.n	80075b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f9ac 	bl	8007904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80075b4:	e192      	b.n	80078dc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b6:	bf00      	nop
    return;
 80075b8:	e190      	b.n	80078dc <HAL_UART_IRQHandler+0x5b8>
 80075ba:	bf00      	nop
 80075bc:	04000120 	.word	0x04000120
 80075c0:	0800826d 	.word	0x0800826d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	f040 814b 	bne.w	8007864 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d2:	f003 0310 	and.w	r3, r3, #16
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 8144 	beq.w	8007864 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e0:	f003 0310 	and.w	r3, r3, #16
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 813d 	beq.w	8007864 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2210      	movs	r2, #16
 80075f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fc:	2b40      	cmp	r3, #64	; 0x40
 80075fe:	f040 80b5 	bne.w	800776c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800760e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 8164 	beq.w	80078e0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800761e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007622:	429a      	cmp	r2, r3
 8007624:	f080 815c 	bcs.w	80078e0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800762e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	2b20      	cmp	r3, #32
 800763a:	f000 8086 	beq.w	800774a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007652:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800765a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800766c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007674:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1da      	bne.n	800763e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3308      	adds	r3, #8
 800768e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007692:	e853 3f00 	ldrex	r3, [r3]
 8007696:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800769a:	f023 0301 	bic.w	r3, r3, #1
 800769e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076b8:	e841 2300 	strex	r3, r2, [r1]
 80076bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1e1      	bne.n	8007688 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3308      	adds	r3, #8
 80076ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ce:	e853 3f00 	ldrex	r3, [r3]
 80076d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3308      	adds	r3, #8
 80076e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076f0:	e841 2300 	strex	r3, r2, [r1]
 80076f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1e3      	bne.n	80076c4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2220      	movs	r2, #32
 8007700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800771a:	f023 0310 	bic.w	r3, r3, #16
 800771e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800772c:	65bb      	str	r3, [r7, #88]	; 0x58
 800772e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007732:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800773a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e4      	bne.n	800770a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007744:	4618      	mov	r0, r3
 8007746:	f7fc fa08 	bl	8003b5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800775c:	b29b      	uxth	r3, r3
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	b29b      	uxth	r3, r3
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f8d7 	bl	8007918 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800776a:	e0b9      	b.n	80078e0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007778:	b29b      	uxth	r3, r3
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007786:	b29b      	uxth	r3, r3
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 80ab 	beq.w	80078e4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800778e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80a6 	beq.w	80078e4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	461a      	mov	r2, r3
 80077b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077ba:	647b      	str	r3, [r7, #68]	; 0x44
 80077bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e4      	bne.n	8007798 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3308      	adds	r3, #8
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	623b      	str	r3, [r7, #32]
   return(result);
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	f023 0301 	bic.w	r3, r3, #1
 80077e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3308      	adds	r3, #8
 80077ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80077f2:	633a      	str	r2, [r7, #48]	; 0x30
 80077f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e3      	bne.n	80077ce <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2220      	movs	r2, #32
 800780a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	60fb      	str	r3, [r7, #12]
   return(result);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 0310 	bic.w	r3, r3, #16
 800782e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800783c:	61fb      	str	r3, [r7, #28]
 800783e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	69b9      	ldr	r1, [r7, #24]
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	617b      	str	r3, [r7, #20]
   return(result);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e4      	bne.n	800781a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007856:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f85b 	bl	8007918 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007862:	e03f      	b.n	80078e4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00e      	beq.n	800788e <HAL_UART_IRQHandler+0x56a>
 8007870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d008      	beq.n	800788e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 ff94 	bl	80087b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800788c:	e02d      	b.n	80078ea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800788e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00e      	beq.n	80078b8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800789a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d008      	beq.n	80078b8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d01c      	beq.n	80078e8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	4798      	blx	r3
    }
    return;
 80078b6:	e017      	b.n	80078e8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d012      	beq.n	80078ea <HAL_UART_IRQHandler+0x5c6>
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00c      	beq.n	80078ea <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fd9d 	bl	8008410 <UART_EndTransmit_IT>
    return;
 80078d6:	e008      	b.n	80078ea <HAL_UART_IRQHandler+0x5c6>
      return;
 80078d8:	bf00      	nop
 80078da:	e006      	b.n	80078ea <HAL_UART_IRQHandler+0x5c6>
    return;
 80078dc:	bf00      	nop
 80078de:	e004      	b.n	80078ea <HAL_UART_IRQHandler+0x5c6>
      return;
 80078e0:	bf00      	nop
 80078e2:	e002      	b.n	80078ea <HAL_UART_IRQHandler+0x5c6>
      return;
 80078e4:	bf00      	nop
 80078e6:	e000      	b.n	80078ea <HAL_UART_IRQHandler+0x5c6>
    return;
 80078e8:	bf00      	nop
  }

}
 80078ea:	37e8      	adds	r7, #232	; 0xe8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	69db      	ldr	r3, [r3, #28]
 8007950:	4313      	orrs	r3, r2
 8007952:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800795e:	f023 030c 	bic.w	r3, r3, #12
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6812      	ldr	r2, [r2, #0]
 8007966:	6979      	ldr	r1, [r7, #20]
 8007968:	430b      	orrs	r3, r1
 800796a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4aa7      	ldr	r2, [pc, #668]	; (8007c48 <UART_SetConfig+0x318>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d120      	bne.n	80079f2 <UART_SetConfig+0xc2>
 80079b0:	4ba6      	ldr	r3, [pc, #664]	; (8007c4c <UART_SetConfig+0x31c>)
 80079b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d817      	bhi.n	80079ec <UART_SetConfig+0xbc>
 80079bc:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <UART_SetConfig+0x94>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	080079d5 	.word	0x080079d5
 80079c8:	080079e1 	.word	0x080079e1
 80079cc:	080079e7 	.word	0x080079e7
 80079d0:	080079db 	.word	0x080079db
 80079d4:	2301      	movs	r3, #1
 80079d6:	77fb      	strb	r3, [r7, #31]
 80079d8:	e0b5      	b.n	8007b46 <UART_SetConfig+0x216>
 80079da:	2302      	movs	r3, #2
 80079dc:	77fb      	strb	r3, [r7, #31]
 80079de:	e0b2      	b.n	8007b46 <UART_SetConfig+0x216>
 80079e0:	2304      	movs	r3, #4
 80079e2:	77fb      	strb	r3, [r7, #31]
 80079e4:	e0af      	b.n	8007b46 <UART_SetConfig+0x216>
 80079e6:	2308      	movs	r3, #8
 80079e8:	77fb      	strb	r3, [r7, #31]
 80079ea:	e0ac      	b.n	8007b46 <UART_SetConfig+0x216>
 80079ec:	2310      	movs	r3, #16
 80079ee:	77fb      	strb	r3, [r7, #31]
 80079f0:	e0a9      	b.n	8007b46 <UART_SetConfig+0x216>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a96      	ldr	r2, [pc, #600]	; (8007c50 <UART_SetConfig+0x320>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d124      	bne.n	8007a46 <UART_SetConfig+0x116>
 80079fc:	4b93      	ldr	r3, [pc, #588]	; (8007c4c <UART_SetConfig+0x31c>)
 80079fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a08:	d011      	beq.n	8007a2e <UART_SetConfig+0xfe>
 8007a0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a0e:	d817      	bhi.n	8007a40 <UART_SetConfig+0x110>
 8007a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a14:	d011      	beq.n	8007a3a <UART_SetConfig+0x10a>
 8007a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a1a:	d811      	bhi.n	8007a40 <UART_SetConfig+0x110>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <UART_SetConfig+0xf8>
 8007a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a24:	d006      	beq.n	8007a34 <UART_SetConfig+0x104>
 8007a26:	e00b      	b.n	8007a40 <UART_SetConfig+0x110>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	e08b      	b.n	8007b46 <UART_SetConfig+0x216>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	77fb      	strb	r3, [r7, #31]
 8007a32:	e088      	b.n	8007b46 <UART_SetConfig+0x216>
 8007a34:	2304      	movs	r3, #4
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	e085      	b.n	8007b46 <UART_SetConfig+0x216>
 8007a3a:	2308      	movs	r3, #8
 8007a3c:	77fb      	strb	r3, [r7, #31]
 8007a3e:	e082      	b.n	8007b46 <UART_SetConfig+0x216>
 8007a40:	2310      	movs	r3, #16
 8007a42:	77fb      	strb	r3, [r7, #31]
 8007a44:	e07f      	b.n	8007b46 <UART_SetConfig+0x216>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a82      	ldr	r2, [pc, #520]	; (8007c54 <UART_SetConfig+0x324>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d124      	bne.n	8007a9a <UART_SetConfig+0x16a>
 8007a50:	4b7e      	ldr	r3, [pc, #504]	; (8007c4c <UART_SetConfig+0x31c>)
 8007a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007a58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007a5c:	d011      	beq.n	8007a82 <UART_SetConfig+0x152>
 8007a5e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007a62:	d817      	bhi.n	8007a94 <UART_SetConfig+0x164>
 8007a64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a68:	d011      	beq.n	8007a8e <UART_SetConfig+0x15e>
 8007a6a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007a6e:	d811      	bhi.n	8007a94 <UART_SetConfig+0x164>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <UART_SetConfig+0x14c>
 8007a74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a78:	d006      	beq.n	8007a88 <UART_SetConfig+0x158>
 8007a7a:	e00b      	b.n	8007a94 <UART_SetConfig+0x164>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	77fb      	strb	r3, [r7, #31]
 8007a80:	e061      	b.n	8007b46 <UART_SetConfig+0x216>
 8007a82:	2302      	movs	r3, #2
 8007a84:	77fb      	strb	r3, [r7, #31]
 8007a86:	e05e      	b.n	8007b46 <UART_SetConfig+0x216>
 8007a88:	2304      	movs	r3, #4
 8007a8a:	77fb      	strb	r3, [r7, #31]
 8007a8c:	e05b      	b.n	8007b46 <UART_SetConfig+0x216>
 8007a8e:	2308      	movs	r3, #8
 8007a90:	77fb      	strb	r3, [r7, #31]
 8007a92:	e058      	b.n	8007b46 <UART_SetConfig+0x216>
 8007a94:	2310      	movs	r3, #16
 8007a96:	77fb      	strb	r3, [r7, #31]
 8007a98:	e055      	b.n	8007b46 <UART_SetConfig+0x216>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a6e      	ldr	r2, [pc, #440]	; (8007c58 <UART_SetConfig+0x328>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d124      	bne.n	8007aee <UART_SetConfig+0x1be>
 8007aa4:	4b69      	ldr	r3, [pc, #420]	; (8007c4c <UART_SetConfig+0x31c>)
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007aac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ab0:	d011      	beq.n	8007ad6 <UART_SetConfig+0x1a6>
 8007ab2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ab6:	d817      	bhi.n	8007ae8 <UART_SetConfig+0x1b8>
 8007ab8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007abc:	d011      	beq.n	8007ae2 <UART_SetConfig+0x1b2>
 8007abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ac2:	d811      	bhi.n	8007ae8 <UART_SetConfig+0x1b8>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d003      	beq.n	8007ad0 <UART_SetConfig+0x1a0>
 8007ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007acc:	d006      	beq.n	8007adc <UART_SetConfig+0x1ac>
 8007ace:	e00b      	b.n	8007ae8 <UART_SetConfig+0x1b8>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	77fb      	strb	r3, [r7, #31]
 8007ad4:	e037      	b.n	8007b46 <UART_SetConfig+0x216>
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	77fb      	strb	r3, [r7, #31]
 8007ada:	e034      	b.n	8007b46 <UART_SetConfig+0x216>
 8007adc:	2304      	movs	r3, #4
 8007ade:	77fb      	strb	r3, [r7, #31]
 8007ae0:	e031      	b.n	8007b46 <UART_SetConfig+0x216>
 8007ae2:	2308      	movs	r3, #8
 8007ae4:	77fb      	strb	r3, [r7, #31]
 8007ae6:	e02e      	b.n	8007b46 <UART_SetConfig+0x216>
 8007ae8:	2310      	movs	r3, #16
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e02b      	b.n	8007b46 <UART_SetConfig+0x216>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a5a      	ldr	r2, [pc, #360]	; (8007c5c <UART_SetConfig+0x32c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d124      	bne.n	8007b42 <UART_SetConfig+0x212>
 8007af8:	4b54      	ldr	r3, [pc, #336]	; (8007c4c <UART_SetConfig+0x31c>)
 8007afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007b00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b04:	d011      	beq.n	8007b2a <UART_SetConfig+0x1fa>
 8007b06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b0a:	d817      	bhi.n	8007b3c <UART_SetConfig+0x20c>
 8007b0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b10:	d011      	beq.n	8007b36 <UART_SetConfig+0x206>
 8007b12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b16:	d811      	bhi.n	8007b3c <UART_SetConfig+0x20c>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <UART_SetConfig+0x1f4>
 8007b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b20:	d006      	beq.n	8007b30 <UART_SetConfig+0x200>
 8007b22:	e00b      	b.n	8007b3c <UART_SetConfig+0x20c>
 8007b24:	2300      	movs	r3, #0
 8007b26:	77fb      	strb	r3, [r7, #31]
 8007b28:	e00d      	b.n	8007b46 <UART_SetConfig+0x216>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	77fb      	strb	r3, [r7, #31]
 8007b2e:	e00a      	b.n	8007b46 <UART_SetConfig+0x216>
 8007b30:	2304      	movs	r3, #4
 8007b32:	77fb      	strb	r3, [r7, #31]
 8007b34:	e007      	b.n	8007b46 <UART_SetConfig+0x216>
 8007b36:	2308      	movs	r3, #8
 8007b38:	77fb      	strb	r3, [r7, #31]
 8007b3a:	e004      	b.n	8007b46 <UART_SetConfig+0x216>
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e001      	b.n	8007b46 <UART_SetConfig+0x216>
 8007b42:	2310      	movs	r3, #16
 8007b44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b4e:	d15b      	bne.n	8007c08 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8007b50:	7ffb      	ldrb	r3, [r7, #31]
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d827      	bhi.n	8007ba6 <UART_SetConfig+0x276>
 8007b56:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <UART_SetConfig+0x22c>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007b81 	.word	0x08007b81
 8007b60:	08007b89 	.word	0x08007b89
 8007b64:	08007b91 	.word	0x08007b91
 8007b68:	08007ba7 	.word	0x08007ba7
 8007b6c:	08007b97 	.word	0x08007b97
 8007b70:	08007ba7 	.word	0x08007ba7
 8007b74:	08007ba7 	.word	0x08007ba7
 8007b78:	08007ba7 	.word	0x08007ba7
 8007b7c:	08007b9f 	.word	0x08007b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b80:	f7fd fe34 	bl	80057ec <HAL_RCC_GetPCLK1Freq>
 8007b84:	61b8      	str	r0, [r7, #24]
        break;
 8007b86:	e013      	b.n	8007bb0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b88:	f7fd fe52 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8007b8c:	61b8      	str	r0, [r7, #24]
        break;
 8007b8e:	e00f      	b.n	8007bb0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b90:	4b33      	ldr	r3, [pc, #204]	; (8007c60 <UART_SetConfig+0x330>)
 8007b92:	61bb      	str	r3, [r7, #24]
        break;
 8007b94:	e00c      	b.n	8007bb0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b96:	f7fd fdb3 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 8007b9a:	61b8      	str	r0, [r7, #24]
        break;
 8007b9c:	e008      	b.n	8007bb0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ba2:	61bb      	str	r3, [r7, #24]
        break;
 8007ba4:	e004      	b.n	8007bb0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	77bb      	strb	r3, [r7, #30]
        break;
 8007bae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 8082 	beq.w	8007cbc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	005a      	lsls	r2, r3, #1
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	085b      	lsrs	r3, r3, #1
 8007bc2:	441a      	add	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b0f      	cmp	r3, #15
 8007bd2:	d916      	bls.n	8007c02 <UART_SetConfig+0x2d2>
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bda:	d212      	bcs.n	8007c02 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	f023 030f 	bic.w	r3, r3, #15
 8007be4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	085b      	lsrs	r3, r3, #1
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	89fb      	ldrh	r3, [r7, #14]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	89fa      	ldrh	r2, [r7, #14]
 8007bfe:	60da      	str	r2, [r3, #12]
 8007c00:	e05c      	b.n	8007cbc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	77bb      	strb	r3, [r7, #30]
 8007c06:	e059      	b.n	8007cbc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c08:	7ffb      	ldrb	r3, [r7, #31]
 8007c0a:	2b08      	cmp	r3, #8
 8007c0c:	d835      	bhi.n	8007c7a <UART_SetConfig+0x34a>
 8007c0e:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <UART_SetConfig+0x2e4>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c41 	.word	0x08007c41
 8007c1c:	08007c65 	.word	0x08007c65
 8007c20:	08007c7b 	.word	0x08007c7b
 8007c24:	08007c6b 	.word	0x08007c6b
 8007c28:	08007c7b 	.word	0x08007c7b
 8007c2c:	08007c7b 	.word	0x08007c7b
 8007c30:	08007c7b 	.word	0x08007c7b
 8007c34:	08007c73 	.word	0x08007c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c38:	f7fd fdd8 	bl	80057ec <HAL_RCC_GetPCLK1Freq>
 8007c3c:	61b8      	str	r0, [r7, #24]
        break;
 8007c3e:	e021      	b.n	8007c84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c40:	f7fd fdf6 	bl	8005830 <HAL_RCC_GetPCLK2Freq>
 8007c44:	61b8      	str	r0, [r7, #24]
        break;
 8007c46:	e01d      	b.n	8007c84 <UART_SetConfig+0x354>
 8007c48:	40013800 	.word	0x40013800
 8007c4c:	40021000 	.word	0x40021000
 8007c50:	40004400 	.word	0x40004400
 8007c54:	40004800 	.word	0x40004800
 8007c58:	40004c00 	.word	0x40004c00
 8007c5c:	40005000 	.word	0x40005000
 8007c60:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c64:	4b1b      	ldr	r3, [pc, #108]	; (8007cd4 <UART_SetConfig+0x3a4>)
 8007c66:	61bb      	str	r3, [r7, #24]
        break;
 8007c68:	e00c      	b.n	8007c84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c6a:	f7fd fd49 	bl	8005700 <HAL_RCC_GetSysClockFreq>
 8007c6e:	61b8      	str	r0, [r7, #24]
        break;
 8007c70:	e008      	b.n	8007c84 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c76:	61bb      	str	r3, [r7, #24]
        break;
 8007c78:	e004      	b.n	8007c84 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	77bb      	strb	r3, [r7, #30]
        break;
 8007c82:	bf00      	nop
    }

    if (pclk != 0U)
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d018      	beq.n	8007cbc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	085a      	lsrs	r2, r3, #1
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	441a      	add	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2b0f      	cmp	r3, #15
 8007ca2:	d909      	bls.n	8007cb8 <UART_SetConfig+0x388>
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007caa:	d205      	bcs.n	8007cb8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	60da      	str	r2, [r3, #12]
 8007cb6:	e001      	b.n	8007cbc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007cc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3720      	adds	r7, #32
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	007a1200 	.word	0x007a1200

08007cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	f003 0308 	and.w	r3, r3, #8
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	f003 0310 	and.w	r3, r3, #16
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	430a      	orrs	r2, r1
 8007daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d01a      	beq.n	8007dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd6:	d10a      	bne.n	8007dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	605a      	str	r2, [r3, #4]
  }
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b098      	sub	sp, #96	; 0x60
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e2c:	f7fa fa80 	bl	8002330 <HAL_GetTick>
 8007e30:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0308 	and.w	r3, r3, #8
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d12e      	bne.n	8007e9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f88c 	bl	8007f6c <UART_WaitOnFlagUntilTimeout>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d021      	beq.n	8007e9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	e853 3f00 	ldrex	r3, [r3]
 8007e66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e6e:	653b      	str	r3, [r7, #80]	; 0x50
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	461a      	mov	r2, r3
 8007e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e78:	647b      	str	r3, [r7, #68]	; 0x44
 8007e7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e80:	e841 2300 	strex	r3, r2, [r1]
 8007e84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1e6      	bne.n	8007e5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e062      	b.n	8007f64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d149      	bne.n	8007f40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f856 	bl	8007f6c <UART_WaitOnFlagUntilTimeout>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d03c      	beq.n	8007f40 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eec:	e841 2300 	strex	r3, r2, [r1]
 8007ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e6      	bne.n	8007ec6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3308      	adds	r3, #8
 8007efe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f023 0301 	bic.w	r3, r3, #1
 8007f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3308      	adds	r3, #8
 8007f16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f18:	61fa      	str	r2, [r7, #28]
 8007f1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	69b9      	ldr	r1, [r7, #24]
 8007f1e:	69fa      	ldr	r2, [r7, #28]
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	617b      	str	r3, [r7, #20]
   return(result);
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e5      	bne.n	8007ef8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e011      	b.n	8007f64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3758      	adds	r7, #88	; 0x58
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f7c:	e049      	b.n	8008012 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f84:	d045      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f86:	f7fa f9d3 	bl	8002330 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d302      	bcc.n	8007f9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e048      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 0304 	and.w	r3, r3, #4
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d031      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d110      	bne.n	8007fde <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 f8ed 	bl	80081a4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2208      	movs	r2, #8
 8007fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e029      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fec:	d111      	bne.n	8008012 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f8d3 	bl	80081a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e00f      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69da      	ldr	r2, [r3, #28]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4013      	ands	r3, r2
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	429a      	cmp	r2, r3
 8008020:	bf0c      	ite	eq
 8008022:	2301      	moveq	r3, #1
 8008024:	2300      	movne	r3, #0
 8008026:	b2db      	uxtb	r3, r3
 8008028:	461a      	mov	r2, r3
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	429a      	cmp	r2, r3
 800802e:	d0a6      	beq.n	8007f7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800803c:	b480      	push	{r7}
 800803e:	b097      	sub	sp, #92	; 0x5c
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	4613      	mov	r3, r2
 8008048:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	88fa      	ldrh	r2, [r7, #6]
 8008054:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	88fa      	ldrh	r2, [r7, #6]
 800805c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800806e:	d10e      	bne.n	800808e <UART_Start_Receive_IT+0x52>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d105      	bne.n	8008084 <UART_Start_Receive_IT+0x48>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800807e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008082:	e01a      	b.n	80080ba <UART_Start_Receive_IT+0x7e>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	22ff      	movs	r2, #255	; 0xff
 8008088:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800808c:	e015      	b.n	80080ba <UART_Start_Receive_IT+0x7e>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10d      	bne.n	80080b2 <UART_Start_Receive_IT+0x76>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d104      	bne.n	80080a8 <UART_Start_Receive_IT+0x6c>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	22ff      	movs	r2, #255	; 0xff
 80080a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080a6:	e008      	b.n	80080ba <UART_Start_Receive_IT+0x7e>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	227f      	movs	r2, #127	; 0x7f
 80080ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080b0:	e003      	b.n	80080ba <UART_Start_Receive_IT+0x7e>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2222      	movs	r2, #34	; 0x22
 80080c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	3308      	adds	r3, #8
 80080d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	f043 0301 	orr.w	r3, r3, #1
 80080e0:	657b      	str	r3, [r7, #84]	; 0x54
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3308      	adds	r3, #8
 80080e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80080ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e5      	bne.n	80080ca <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008106:	d107      	bne.n	8008118 <UART_Start_Receive_IT+0xdc>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d103      	bne.n	8008118 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4a22      	ldr	r2, [pc, #136]	; (800819c <UART_Start_Receive_IT+0x160>)
 8008114:	669a      	str	r2, [r3, #104]	; 0x68
 8008116:	e002      	b.n	800811e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4a21      	ldr	r2, [pc, #132]	; (80081a0 <UART_Start_Receive_IT+0x164>)
 800811c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d019      	beq.n	800815a <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812e:	e853 3f00 	ldrex	r3, [r3]
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800813a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	461a      	mov	r2, r3
 8008142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008144:	637b      	str	r3, [r7, #52]	; 0x34
 8008146:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800814a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800814c:	e841 2300 	strex	r3, r2, [r1]
 8008150:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e6      	bne.n	8008126 <UART_Start_Receive_IT+0xea>
 8008158:	e018      	b.n	800818c <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	613b      	str	r3, [r7, #16]
   return(result);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f043 0320 	orr.w	r3, r3, #32
 800816e:	653b      	str	r3, [r7, #80]	; 0x50
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	461a      	mov	r2, r3
 8008176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008178:	623b      	str	r3, [r7, #32]
 800817a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	69f9      	ldr	r1, [r7, #28]
 800817e:	6a3a      	ldr	r2, [r7, #32]
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	61bb      	str	r3, [r7, #24]
   return(result);
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e6      	bne.n	800815a <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	375c      	adds	r7, #92	; 0x5c
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	0800860d 	.word	0x0800860d
 80081a0:	08008465 	.word	0x08008465

080081a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b095      	sub	sp, #84	; 0x54
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ca:	643b      	str	r3, [r7, #64]	; 0x40
 80081cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e6      	bne.n	80081ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3308      	adds	r3, #8
 80081e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	f023 0301 	bic.w	r3, r3, #1
 80081f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3308      	adds	r3, #8
 80081fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008200:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e5      	bne.n	80081de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008216:	2b01      	cmp	r3, #1
 8008218:	d118      	bne.n	800824c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	e853 3f00 	ldrex	r3, [r3]
 8008226:	60bb      	str	r3, [r7, #8]
   return(result);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f023 0310 	bic.w	r3, r3, #16
 800822e:	647b      	str	r3, [r7, #68]	; 0x44
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	461a      	mov	r2, r3
 8008236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	6979      	ldr	r1, [r7, #20]
 800823e:	69ba      	ldr	r2, [r7, #24]
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	613b      	str	r3, [r7, #16]
   return(result);
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e6      	bne.n	800821a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008260:	bf00      	nop
 8008262:	3754      	adds	r7, #84	; 0x54
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff fb3a 	bl	8007904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008290:	bf00      	nop
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008298:	b480      	push	{r7}
 800829a:	b08f      	sub	sp, #60	; 0x3c
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a4:	2b21      	cmp	r3, #33	; 0x21
 80082a6:	d14d      	bne.n	8008344 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d132      	bne.n	800831a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082c8:	637b      	str	r3, [r7, #52]	; 0x34
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082d4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e6      	bne.n	80082b4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	e853 3f00 	ldrex	r3, [r3]
 80082f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082fa:	633b      	str	r3, [r7, #48]	; 0x30
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008304:	61bb      	str	r3, [r7, #24]
 8008306:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008308:	6979      	ldr	r1, [r7, #20]
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	e841 2300 	strex	r3, r2, [r1]
 8008310:	613b      	str	r3, [r7, #16]
   return(result);
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e6      	bne.n	80082e6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008318:	e014      	b.n	8008344 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800831e:	781a      	ldrb	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	b292      	uxth	r2, r2
 8008326:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008344:	bf00      	nop
 8008346:	373c      	adds	r7, #60	; 0x3c
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008350:	b480      	push	{r7}
 8008352:	b091      	sub	sp, #68	; 0x44
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835c:	2b21      	cmp	r3, #33	; 0x21
 800835e:	d151      	bne.n	8008404 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008366:	b29b      	uxth	r3, r3
 8008368:	2b00      	cmp	r3, #0
 800836a:	d132      	bne.n	80083d2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	623b      	str	r3, [r7, #32]
   return(result);
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008380:	63bb      	str	r3, [r7, #56]	; 0x38
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838a:	633b      	str	r3, [r7, #48]	; 0x30
 800838c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e6      	bne.n	800836c <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	61fb      	str	r3, [r7, #28]
 80083be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	69b9      	ldr	r1, [r7, #24]
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	617b      	str	r3, [r7, #20]
   return(result);
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e6      	bne.n	800839e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80083d0:	e018      	b.n	8008404 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80083d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083da:	881a      	ldrh	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083e4:	b292      	uxth	r2, r2
 80083e6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ec:	1c9a      	adds	r2, r3, #2
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	3b01      	subs	r3, #1
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008404:	bf00      	nop
 8008406:	3744      	adds	r7, #68	; 0x44
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	e853 3f00 	ldrex	r3, [r3]
 8008424:	60bb      	str	r3, [r7, #8]
   return(result);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800842c:	61fb      	str	r3, [r7, #28]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	61bb      	str	r3, [r7, #24]
 8008438:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	6979      	ldr	r1, [r7, #20]
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	613b      	str	r3, [r7, #16]
   return(result);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e6      	bne.n	8008418 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2220      	movs	r2, #32
 800844e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff fa4a 	bl	80078f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800845c:	bf00      	nop
 800845e:	3720      	adds	r7, #32
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b09c      	sub	sp, #112	; 0x70
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008472:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800847c:	2b22      	cmp	r3, #34	; 0x22
 800847e:	f040 80b9 	bne.w	80085f4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008488:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800848c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008490:	b2d9      	uxtb	r1, r3
 8008492:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008496:	b2da      	uxtb	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849c:	400a      	ands	r2, r1
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	3b01      	subs	r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f040 809c 	bne.w	8008604 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80084ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e6      	bne.n	80084cc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3308      	adds	r3, #8
 8008504:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800850e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008510:	f023 0301 	bic.w	r3, r3, #1
 8008514:	667b      	str	r3, [r7, #100]	; 0x64
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3308      	adds	r3, #8
 800851c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800851e:	647a      	str	r2, [r7, #68]	; 0x44
 8008520:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008524:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e5      	bne.n	80084fe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2220      	movs	r2, #32
 8008536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d018      	beq.n	8008586 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	e853 3f00 	ldrex	r3, [r3]
 8008560:	623b      	str	r3, [r7, #32]
   return(result);
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008568:	663b      	str	r3, [r7, #96]	; 0x60
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008572:	633b      	str	r3, [r7, #48]	; 0x30
 8008574:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e6      	bne.n	8008554 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800858a:	2b01      	cmp	r3, #1
 800858c:	d12e      	bne.n	80085ec <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f023 0310 	bic.w	r3, r3, #16
 80085a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085b2:	61fb      	str	r3, [r7, #28]
 80085b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	69b9      	ldr	r1, [r7, #24]
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	617b      	str	r3, [r7, #20]
   return(result);
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e6      	bne.n	8008594 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	f003 0310 	and.w	r3, r3, #16
 80085d0:	2b10      	cmp	r3, #16
 80085d2:	d103      	bne.n	80085dc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2210      	movs	r2, #16
 80085da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff f997 	bl	8007918 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085ea:	e00b      	b.n	8008604 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7f8 f9f7 	bl	80009e0 <HAL_UART_RxCpltCallback>
}
 80085f2:	e007      	b.n	8008604 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	699a      	ldr	r2, [r3, #24]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0208 	orr.w	r2, r2, #8
 8008602:	619a      	str	r2, [r3, #24]
}
 8008604:	bf00      	nop
 8008606:	3770      	adds	r7, #112	; 0x70
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b09c      	sub	sp, #112	; 0x70
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800861a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008624:	2b22      	cmp	r3, #34	; 0x22
 8008626:	f040 80b9 	bne.w	800879c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008630:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008638:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800863a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800863e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008642:	4013      	ands	r3, r2
 8008644:	b29a      	uxth	r2, r3
 8008646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008648:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864e:	1c9a      	adds	r2, r3, #2
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800865a:	b29b      	uxth	r3, r3
 800865c:	3b01      	subs	r3, #1
 800865e:	b29a      	uxth	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800866c:	b29b      	uxth	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	f040 809c 	bne.w	80087ac <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008684:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008688:	667b      	str	r3, [r7, #100]	; 0x64
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008692:	657b      	str	r3, [r7, #84]	; 0x54
 8008694:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008698:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e6      	bne.n	8008674 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3308      	adds	r3, #8
 80086ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b0:	e853 3f00 	ldrex	r3, [r3]
 80086b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	f023 0301 	bic.w	r3, r3, #1
 80086bc:	663b      	str	r3, [r7, #96]	; 0x60
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3308      	adds	r3, #8
 80086c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086c6:	643a      	str	r2, [r7, #64]	; 0x40
 80086c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086ce:	e841 2300 	strex	r3, r2, [r1]
 80086d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e5      	bne.n	80086a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2220      	movs	r2, #32
 80086de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d018      	beq.n	800872e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	61fb      	str	r3, [r7, #28]
   return(result);
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800871a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800871c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008722:	e841 2300 	strex	r3, r2, [r1]
 8008726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1e6      	bne.n	80086fc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008732:	2b01      	cmp	r3, #1
 8008734:	d12e      	bne.n	8008794 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	60bb      	str	r3, [r7, #8]
   return(result);
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f023 0310 	bic.w	r3, r3, #16
 8008750:	65bb      	str	r3, [r7, #88]	; 0x58
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800875a:	61bb      	str	r3, [r7, #24]
 800875c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6979      	ldr	r1, [r7, #20]
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	613b      	str	r3, [r7, #16]
   return(result);
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e6      	bne.n	800873c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	f003 0310 	and.w	r3, r3, #16
 8008778:	2b10      	cmp	r3, #16
 800877a:	d103      	bne.n	8008784 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2210      	movs	r2, #16
 8008782:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff f8c3 	bl	8007918 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008792:	e00b      	b.n	80087ac <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7f8 f923 	bl	80009e0 <HAL_UART_RxCpltCallback>
}
 800879a:	e007      	b.n	80087ac <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	699a      	ldr	r2, [r3, #24]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f042 0208 	orr.w	r2, r2, #8
 80087aa:	619a      	str	r2, [r3, #24]
}
 80087ac:	bf00      	nop
 80087ae:	3770      	adds	r7, #112	; 0x70
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80087d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80087d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80087dc:	b29a      	uxth	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	43db      	mvns	r3, r3
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	4013      	ands	r3, r2
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80087fe:	b084      	sub	sp, #16
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	f107 0014 	add.w	r0, r7, #20
 800880c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	b004      	add	sp, #16
 800883e:	4770      	bx	lr

08008840 <__errno>:
 8008840:	4b01      	ldr	r3, [pc, #4]	; (8008848 <__errno+0x8>)
 8008842:	6818      	ldr	r0, [r3, #0]
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	2000009c 	.word	0x2000009c

0800884c <__libc_init_array>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	4d0d      	ldr	r5, [pc, #52]	; (8008884 <__libc_init_array+0x38>)
 8008850:	4c0d      	ldr	r4, [pc, #52]	; (8008888 <__libc_init_array+0x3c>)
 8008852:	1b64      	subs	r4, r4, r5
 8008854:	10a4      	asrs	r4, r4, #2
 8008856:	2600      	movs	r6, #0
 8008858:	42a6      	cmp	r6, r4
 800885a:	d109      	bne.n	8008870 <__libc_init_array+0x24>
 800885c:	4d0b      	ldr	r5, [pc, #44]	; (800888c <__libc_init_array+0x40>)
 800885e:	4c0c      	ldr	r4, [pc, #48]	; (8008890 <__libc_init_array+0x44>)
 8008860:	f000 fcb4 	bl	80091cc <_init>
 8008864:	1b64      	subs	r4, r4, r5
 8008866:	10a4      	asrs	r4, r4, #2
 8008868:	2600      	movs	r6, #0
 800886a:	42a6      	cmp	r6, r4
 800886c:	d105      	bne.n	800887a <__libc_init_array+0x2e>
 800886e:	bd70      	pop	{r4, r5, r6, pc}
 8008870:	f855 3b04 	ldr.w	r3, [r5], #4
 8008874:	4798      	blx	r3
 8008876:	3601      	adds	r6, #1
 8008878:	e7ee      	b.n	8008858 <__libc_init_array+0xc>
 800887a:	f855 3b04 	ldr.w	r3, [r5], #4
 800887e:	4798      	blx	r3
 8008880:	3601      	adds	r6, #1
 8008882:	e7f2      	b.n	800886a <__libc_init_array+0x1e>
 8008884:	0800b768 	.word	0x0800b768
 8008888:	0800b768 	.word	0x0800b768
 800888c:	0800b768 	.word	0x0800b768
 8008890:	0800b76c 	.word	0x0800b76c

08008894 <malloc>:
 8008894:	4b02      	ldr	r3, [pc, #8]	; (80088a0 <malloc+0xc>)
 8008896:	4601      	mov	r1, r0
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	f000 b885 	b.w	80089a8 <_malloc_r>
 800889e:	bf00      	nop
 80088a0:	2000009c 	.word	0x2000009c

080088a4 <memcpy>:
 80088a4:	440a      	add	r2, r1
 80088a6:	4291      	cmp	r1, r2
 80088a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088ac:	d100      	bne.n	80088b0 <memcpy+0xc>
 80088ae:	4770      	bx	lr
 80088b0:	b510      	push	{r4, lr}
 80088b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ba:	4291      	cmp	r1, r2
 80088bc:	d1f9      	bne.n	80088b2 <memcpy+0xe>
 80088be:	bd10      	pop	{r4, pc}

080088c0 <memset>:
 80088c0:	4402      	add	r2, r0
 80088c2:	4603      	mov	r3, r0
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d100      	bne.n	80088ca <memset+0xa>
 80088c8:	4770      	bx	lr
 80088ca:	f803 1b01 	strb.w	r1, [r3], #1
 80088ce:	e7f9      	b.n	80088c4 <memset+0x4>

080088d0 <_free_r>:
 80088d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088d2:	2900      	cmp	r1, #0
 80088d4:	d044      	beq.n	8008960 <_free_r+0x90>
 80088d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088da:	9001      	str	r0, [sp, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f1a1 0404 	sub.w	r4, r1, #4
 80088e2:	bfb8      	it	lt
 80088e4:	18e4      	addlt	r4, r4, r3
 80088e6:	f000 f921 	bl	8008b2c <__malloc_lock>
 80088ea:	4a1e      	ldr	r2, [pc, #120]	; (8008964 <_free_r+0x94>)
 80088ec:	9801      	ldr	r0, [sp, #4]
 80088ee:	6813      	ldr	r3, [r2, #0]
 80088f0:	b933      	cbnz	r3, 8008900 <_free_r+0x30>
 80088f2:	6063      	str	r3, [r4, #4]
 80088f4:	6014      	str	r4, [r2, #0]
 80088f6:	b003      	add	sp, #12
 80088f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088fc:	f000 b91c 	b.w	8008b38 <__malloc_unlock>
 8008900:	42a3      	cmp	r3, r4
 8008902:	d908      	bls.n	8008916 <_free_r+0x46>
 8008904:	6825      	ldr	r5, [r4, #0]
 8008906:	1961      	adds	r1, r4, r5
 8008908:	428b      	cmp	r3, r1
 800890a:	bf01      	itttt	eq
 800890c:	6819      	ldreq	r1, [r3, #0]
 800890e:	685b      	ldreq	r3, [r3, #4]
 8008910:	1949      	addeq	r1, r1, r5
 8008912:	6021      	streq	r1, [r4, #0]
 8008914:	e7ed      	b.n	80088f2 <_free_r+0x22>
 8008916:	461a      	mov	r2, r3
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	b10b      	cbz	r3, 8008920 <_free_r+0x50>
 800891c:	42a3      	cmp	r3, r4
 800891e:	d9fa      	bls.n	8008916 <_free_r+0x46>
 8008920:	6811      	ldr	r1, [r2, #0]
 8008922:	1855      	adds	r5, r2, r1
 8008924:	42a5      	cmp	r5, r4
 8008926:	d10b      	bne.n	8008940 <_free_r+0x70>
 8008928:	6824      	ldr	r4, [r4, #0]
 800892a:	4421      	add	r1, r4
 800892c:	1854      	adds	r4, r2, r1
 800892e:	42a3      	cmp	r3, r4
 8008930:	6011      	str	r1, [r2, #0]
 8008932:	d1e0      	bne.n	80088f6 <_free_r+0x26>
 8008934:	681c      	ldr	r4, [r3, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	6053      	str	r3, [r2, #4]
 800893a:	4421      	add	r1, r4
 800893c:	6011      	str	r1, [r2, #0]
 800893e:	e7da      	b.n	80088f6 <_free_r+0x26>
 8008940:	d902      	bls.n	8008948 <_free_r+0x78>
 8008942:	230c      	movs	r3, #12
 8008944:	6003      	str	r3, [r0, #0]
 8008946:	e7d6      	b.n	80088f6 <_free_r+0x26>
 8008948:	6825      	ldr	r5, [r4, #0]
 800894a:	1961      	adds	r1, r4, r5
 800894c:	428b      	cmp	r3, r1
 800894e:	bf04      	itt	eq
 8008950:	6819      	ldreq	r1, [r3, #0]
 8008952:	685b      	ldreq	r3, [r3, #4]
 8008954:	6063      	str	r3, [r4, #4]
 8008956:	bf04      	itt	eq
 8008958:	1949      	addeq	r1, r1, r5
 800895a:	6021      	streq	r1, [r4, #0]
 800895c:	6054      	str	r4, [r2, #4]
 800895e:	e7ca      	b.n	80088f6 <_free_r+0x26>
 8008960:	b003      	add	sp, #12
 8008962:	bd30      	pop	{r4, r5, pc}
 8008964:	2000074c 	.word	0x2000074c

08008968 <sbrk_aligned>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	4e0e      	ldr	r6, [pc, #56]	; (80089a4 <sbrk_aligned+0x3c>)
 800896c:	460c      	mov	r4, r1
 800896e:	6831      	ldr	r1, [r6, #0]
 8008970:	4605      	mov	r5, r0
 8008972:	b911      	cbnz	r1, 800897a <sbrk_aligned+0x12>
 8008974:	f000 f88c 	bl	8008a90 <_sbrk_r>
 8008978:	6030      	str	r0, [r6, #0]
 800897a:	4621      	mov	r1, r4
 800897c:	4628      	mov	r0, r5
 800897e:	f000 f887 	bl	8008a90 <_sbrk_r>
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	d00a      	beq.n	800899c <sbrk_aligned+0x34>
 8008986:	1cc4      	adds	r4, r0, #3
 8008988:	f024 0403 	bic.w	r4, r4, #3
 800898c:	42a0      	cmp	r0, r4
 800898e:	d007      	beq.n	80089a0 <sbrk_aligned+0x38>
 8008990:	1a21      	subs	r1, r4, r0
 8008992:	4628      	mov	r0, r5
 8008994:	f000 f87c 	bl	8008a90 <_sbrk_r>
 8008998:	3001      	adds	r0, #1
 800899a:	d101      	bne.n	80089a0 <sbrk_aligned+0x38>
 800899c:	f04f 34ff 	mov.w	r4, #4294967295
 80089a0:	4620      	mov	r0, r4
 80089a2:	bd70      	pop	{r4, r5, r6, pc}
 80089a4:	20000750 	.word	0x20000750

080089a8 <_malloc_r>:
 80089a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ac:	1ccd      	adds	r5, r1, #3
 80089ae:	f025 0503 	bic.w	r5, r5, #3
 80089b2:	3508      	adds	r5, #8
 80089b4:	2d0c      	cmp	r5, #12
 80089b6:	bf38      	it	cc
 80089b8:	250c      	movcc	r5, #12
 80089ba:	2d00      	cmp	r5, #0
 80089bc:	4607      	mov	r7, r0
 80089be:	db01      	blt.n	80089c4 <_malloc_r+0x1c>
 80089c0:	42a9      	cmp	r1, r5
 80089c2:	d905      	bls.n	80089d0 <_malloc_r+0x28>
 80089c4:	230c      	movs	r3, #12
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	2600      	movs	r6, #0
 80089ca:	4630      	mov	r0, r6
 80089cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d0:	4e2e      	ldr	r6, [pc, #184]	; (8008a8c <_malloc_r+0xe4>)
 80089d2:	f000 f8ab 	bl	8008b2c <__malloc_lock>
 80089d6:	6833      	ldr	r3, [r6, #0]
 80089d8:	461c      	mov	r4, r3
 80089da:	bb34      	cbnz	r4, 8008a2a <_malloc_r+0x82>
 80089dc:	4629      	mov	r1, r5
 80089de:	4638      	mov	r0, r7
 80089e0:	f7ff ffc2 	bl	8008968 <sbrk_aligned>
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	4604      	mov	r4, r0
 80089e8:	d14d      	bne.n	8008a86 <_malloc_r+0xde>
 80089ea:	6834      	ldr	r4, [r6, #0]
 80089ec:	4626      	mov	r6, r4
 80089ee:	2e00      	cmp	r6, #0
 80089f0:	d140      	bne.n	8008a74 <_malloc_r+0xcc>
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	4631      	mov	r1, r6
 80089f6:	4638      	mov	r0, r7
 80089f8:	eb04 0803 	add.w	r8, r4, r3
 80089fc:	f000 f848 	bl	8008a90 <_sbrk_r>
 8008a00:	4580      	cmp	r8, r0
 8008a02:	d13a      	bne.n	8008a7a <_malloc_r+0xd2>
 8008a04:	6821      	ldr	r1, [r4, #0]
 8008a06:	3503      	adds	r5, #3
 8008a08:	1a6d      	subs	r5, r5, r1
 8008a0a:	f025 0503 	bic.w	r5, r5, #3
 8008a0e:	3508      	adds	r5, #8
 8008a10:	2d0c      	cmp	r5, #12
 8008a12:	bf38      	it	cc
 8008a14:	250c      	movcc	r5, #12
 8008a16:	4629      	mov	r1, r5
 8008a18:	4638      	mov	r0, r7
 8008a1a:	f7ff ffa5 	bl	8008968 <sbrk_aligned>
 8008a1e:	3001      	adds	r0, #1
 8008a20:	d02b      	beq.n	8008a7a <_malloc_r+0xd2>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	442b      	add	r3, r5
 8008a26:	6023      	str	r3, [r4, #0]
 8008a28:	e00e      	b.n	8008a48 <_malloc_r+0xa0>
 8008a2a:	6822      	ldr	r2, [r4, #0]
 8008a2c:	1b52      	subs	r2, r2, r5
 8008a2e:	d41e      	bmi.n	8008a6e <_malloc_r+0xc6>
 8008a30:	2a0b      	cmp	r2, #11
 8008a32:	d916      	bls.n	8008a62 <_malloc_r+0xba>
 8008a34:	1961      	adds	r1, r4, r5
 8008a36:	42a3      	cmp	r3, r4
 8008a38:	6025      	str	r5, [r4, #0]
 8008a3a:	bf18      	it	ne
 8008a3c:	6059      	strne	r1, [r3, #4]
 8008a3e:	6863      	ldr	r3, [r4, #4]
 8008a40:	bf08      	it	eq
 8008a42:	6031      	streq	r1, [r6, #0]
 8008a44:	5162      	str	r2, [r4, r5]
 8008a46:	604b      	str	r3, [r1, #4]
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f104 060b 	add.w	r6, r4, #11
 8008a4e:	f000 f873 	bl	8008b38 <__malloc_unlock>
 8008a52:	f026 0607 	bic.w	r6, r6, #7
 8008a56:	1d23      	adds	r3, r4, #4
 8008a58:	1af2      	subs	r2, r6, r3
 8008a5a:	d0b6      	beq.n	80089ca <_malloc_r+0x22>
 8008a5c:	1b9b      	subs	r3, r3, r6
 8008a5e:	50a3      	str	r3, [r4, r2]
 8008a60:	e7b3      	b.n	80089ca <_malloc_r+0x22>
 8008a62:	6862      	ldr	r2, [r4, #4]
 8008a64:	42a3      	cmp	r3, r4
 8008a66:	bf0c      	ite	eq
 8008a68:	6032      	streq	r2, [r6, #0]
 8008a6a:	605a      	strne	r2, [r3, #4]
 8008a6c:	e7ec      	b.n	8008a48 <_malloc_r+0xa0>
 8008a6e:	4623      	mov	r3, r4
 8008a70:	6864      	ldr	r4, [r4, #4]
 8008a72:	e7b2      	b.n	80089da <_malloc_r+0x32>
 8008a74:	4634      	mov	r4, r6
 8008a76:	6876      	ldr	r6, [r6, #4]
 8008a78:	e7b9      	b.n	80089ee <_malloc_r+0x46>
 8008a7a:	230c      	movs	r3, #12
 8008a7c:	603b      	str	r3, [r7, #0]
 8008a7e:	4638      	mov	r0, r7
 8008a80:	f000 f85a 	bl	8008b38 <__malloc_unlock>
 8008a84:	e7a1      	b.n	80089ca <_malloc_r+0x22>
 8008a86:	6025      	str	r5, [r4, #0]
 8008a88:	e7de      	b.n	8008a48 <_malloc_r+0xa0>
 8008a8a:	bf00      	nop
 8008a8c:	2000074c 	.word	0x2000074c

08008a90 <_sbrk_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d06      	ldr	r5, [pc, #24]	; (8008aac <_sbrk_r+0x1c>)
 8008a94:	2300      	movs	r3, #0
 8008a96:	4604      	mov	r4, r0
 8008a98:	4608      	mov	r0, r1
 8008a9a:	602b      	str	r3, [r5, #0]
 8008a9c:	f7f9 fb7c 	bl	8002198 <_sbrk>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_sbrk_r+0x1a>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_sbrk_r+0x1a>
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	20000754 	.word	0x20000754

08008ab0 <siprintf>:
 8008ab0:	b40e      	push	{r1, r2, r3}
 8008ab2:	b500      	push	{lr}
 8008ab4:	b09c      	sub	sp, #112	; 0x70
 8008ab6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ab8:	9002      	str	r0, [sp, #8]
 8008aba:	9006      	str	r0, [sp, #24]
 8008abc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ac0:	4809      	ldr	r0, [pc, #36]	; (8008ae8 <siprintf+0x38>)
 8008ac2:	9107      	str	r1, [sp, #28]
 8008ac4:	9104      	str	r1, [sp, #16]
 8008ac6:	4909      	ldr	r1, [pc, #36]	; (8008aec <siprintf+0x3c>)
 8008ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008acc:	9105      	str	r1, [sp, #20]
 8008ace:	6800      	ldr	r0, [r0, #0]
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	a902      	add	r1, sp, #8
 8008ad4:	f000 f892 	bl	8008bfc <_svfiprintf_r>
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	2200      	movs	r2, #0
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	b01c      	add	sp, #112	; 0x70
 8008ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ae4:	b003      	add	sp, #12
 8008ae6:	4770      	bx	lr
 8008ae8:	2000009c 	.word	0x2000009c
 8008aec:	ffff0208 	.word	0xffff0208

08008af0 <strdup>:
 8008af0:	4b02      	ldr	r3, [pc, #8]	; (8008afc <strdup+0xc>)
 8008af2:	4601      	mov	r1, r0
 8008af4:	6818      	ldr	r0, [r3, #0]
 8008af6:	f000 b803 	b.w	8008b00 <_strdup_r>
 8008afa:	bf00      	nop
 8008afc:	2000009c 	.word	0x2000009c

08008b00 <_strdup_r>:
 8008b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b02:	4604      	mov	r4, r0
 8008b04:	4608      	mov	r0, r1
 8008b06:	460d      	mov	r5, r1
 8008b08:	f7f7 fb6c 	bl	80001e4 <strlen>
 8008b0c:	1c42      	adds	r2, r0, #1
 8008b0e:	4611      	mov	r1, r2
 8008b10:	4620      	mov	r0, r4
 8008b12:	9201      	str	r2, [sp, #4]
 8008b14:	f7ff ff48 	bl	80089a8 <_malloc_r>
 8008b18:	4604      	mov	r4, r0
 8008b1a:	b118      	cbz	r0, 8008b24 <_strdup_r+0x24>
 8008b1c:	9a01      	ldr	r2, [sp, #4]
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f7ff fec0 	bl	80088a4 <memcpy>
 8008b24:	4620      	mov	r0, r4
 8008b26:	b003      	add	sp, #12
 8008b28:	bd30      	pop	{r4, r5, pc}
	...

08008b2c <__malloc_lock>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	; (8008b34 <__malloc_lock+0x8>)
 8008b2e:	f000 baf9 	b.w	8009124 <__retarget_lock_acquire_recursive>
 8008b32:	bf00      	nop
 8008b34:	20000758 	.word	0x20000758

08008b38 <__malloc_unlock>:
 8008b38:	4801      	ldr	r0, [pc, #4]	; (8008b40 <__malloc_unlock+0x8>)
 8008b3a:	f000 baf4 	b.w	8009126 <__retarget_lock_release_recursive>
 8008b3e:	bf00      	nop
 8008b40:	20000758 	.word	0x20000758

08008b44 <__ssputs_r>:
 8008b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b48:	688e      	ldr	r6, [r1, #8]
 8008b4a:	429e      	cmp	r6, r3
 8008b4c:	4682      	mov	sl, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	4690      	mov	r8, r2
 8008b52:	461f      	mov	r7, r3
 8008b54:	d838      	bhi.n	8008bc8 <__ssputs_r+0x84>
 8008b56:	898a      	ldrh	r2, [r1, #12]
 8008b58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b5c:	d032      	beq.n	8008bc4 <__ssputs_r+0x80>
 8008b5e:	6825      	ldr	r5, [r4, #0]
 8008b60:	6909      	ldr	r1, [r1, #16]
 8008b62:	eba5 0901 	sub.w	r9, r5, r1
 8008b66:	6965      	ldr	r5, [r4, #20]
 8008b68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b70:	3301      	adds	r3, #1
 8008b72:	444b      	add	r3, r9
 8008b74:	106d      	asrs	r5, r5, #1
 8008b76:	429d      	cmp	r5, r3
 8008b78:	bf38      	it	cc
 8008b7a:	461d      	movcc	r5, r3
 8008b7c:	0553      	lsls	r3, r2, #21
 8008b7e:	d531      	bpl.n	8008be4 <__ssputs_r+0xa0>
 8008b80:	4629      	mov	r1, r5
 8008b82:	f7ff ff11 	bl	80089a8 <_malloc_r>
 8008b86:	4606      	mov	r6, r0
 8008b88:	b950      	cbnz	r0, 8008ba0 <__ssputs_r+0x5c>
 8008b8a:	230c      	movs	r3, #12
 8008b8c:	f8ca 3000 	str.w	r3, [sl]
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b96:	81a3      	strh	r3, [r4, #12]
 8008b98:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba0:	6921      	ldr	r1, [r4, #16]
 8008ba2:	464a      	mov	r2, r9
 8008ba4:	f7ff fe7e 	bl	80088a4 <memcpy>
 8008ba8:	89a3      	ldrh	r3, [r4, #12]
 8008baa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb2:	81a3      	strh	r3, [r4, #12]
 8008bb4:	6126      	str	r6, [r4, #16]
 8008bb6:	6165      	str	r5, [r4, #20]
 8008bb8:	444e      	add	r6, r9
 8008bba:	eba5 0509 	sub.w	r5, r5, r9
 8008bbe:	6026      	str	r6, [r4, #0]
 8008bc0:	60a5      	str	r5, [r4, #8]
 8008bc2:	463e      	mov	r6, r7
 8008bc4:	42be      	cmp	r6, r7
 8008bc6:	d900      	bls.n	8008bca <__ssputs_r+0x86>
 8008bc8:	463e      	mov	r6, r7
 8008bca:	6820      	ldr	r0, [r4, #0]
 8008bcc:	4632      	mov	r2, r6
 8008bce:	4641      	mov	r1, r8
 8008bd0:	f000 faaa 	bl	8009128 <memmove>
 8008bd4:	68a3      	ldr	r3, [r4, #8]
 8008bd6:	1b9b      	subs	r3, r3, r6
 8008bd8:	60a3      	str	r3, [r4, #8]
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	4433      	add	r3, r6
 8008bde:	6023      	str	r3, [r4, #0]
 8008be0:	2000      	movs	r0, #0
 8008be2:	e7db      	b.n	8008b9c <__ssputs_r+0x58>
 8008be4:	462a      	mov	r2, r5
 8008be6:	f000 fab9 	bl	800915c <_realloc_r>
 8008bea:	4606      	mov	r6, r0
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d1e1      	bne.n	8008bb4 <__ssputs_r+0x70>
 8008bf0:	6921      	ldr	r1, [r4, #16]
 8008bf2:	4650      	mov	r0, sl
 8008bf4:	f7ff fe6c 	bl	80088d0 <_free_r>
 8008bf8:	e7c7      	b.n	8008b8a <__ssputs_r+0x46>
	...

08008bfc <_svfiprintf_r>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	4698      	mov	r8, r3
 8008c02:	898b      	ldrh	r3, [r1, #12]
 8008c04:	061b      	lsls	r3, r3, #24
 8008c06:	b09d      	sub	sp, #116	; 0x74
 8008c08:	4607      	mov	r7, r0
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	d50e      	bpl.n	8008c2e <_svfiprintf_r+0x32>
 8008c10:	690b      	ldr	r3, [r1, #16]
 8008c12:	b963      	cbnz	r3, 8008c2e <_svfiprintf_r+0x32>
 8008c14:	2140      	movs	r1, #64	; 0x40
 8008c16:	f7ff fec7 	bl	80089a8 <_malloc_r>
 8008c1a:	6028      	str	r0, [r5, #0]
 8008c1c:	6128      	str	r0, [r5, #16]
 8008c1e:	b920      	cbnz	r0, 8008c2a <_svfiprintf_r+0x2e>
 8008c20:	230c      	movs	r3, #12
 8008c22:	603b      	str	r3, [r7, #0]
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	e0d1      	b.n	8008dce <_svfiprintf_r+0x1d2>
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	616b      	str	r3, [r5, #20]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9309      	str	r3, [sp, #36]	; 0x24
 8008c32:	2320      	movs	r3, #32
 8008c34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c3c:	2330      	movs	r3, #48	; 0x30
 8008c3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008de8 <_svfiprintf_r+0x1ec>
 8008c42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c46:	f04f 0901 	mov.w	r9, #1
 8008c4a:	4623      	mov	r3, r4
 8008c4c:	469a      	mov	sl, r3
 8008c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c52:	b10a      	cbz	r2, 8008c58 <_svfiprintf_r+0x5c>
 8008c54:	2a25      	cmp	r2, #37	; 0x25
 8008c56:	d1f9      	bne.n	8008c4c <_svfiprintf_r+0x50>
 8008c58:	ebba 0b04 	subs.w	fp, sl, r4
 8008c5c:	d00b      	beq.n	8008c76 <_svfiprintf_r+0x7a>
 8008c5e:	465b      	mov	r3, fp
 8008c60:	4622      	mov	r2, r4
 8008c62:	4629      	mov	r1, r5
 8008c64:	4638      	mov	r0, r7
 8008c66:	f7ff ff6d 	bl	8008b44 <__ssputs_r>
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	f000 80aa 	beq.w	8008dc4 <_svfiprintf_r+0x1c8>
 8008c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c72:	445a      	add	r2, fp
 8008c74:	9209      	str	r2, [sp, #36]	; 0x24
 8008c76:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 80a2 	beq.w	8008dc4 <_svfiprintf_r+0x1c8>
 8008c80:	2300      	movs	r3, #0
 8008c82:	f04f 32ff 	mov.w	r2, #4294967295
 8008c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c8a:	f10a 0a01 	add.w	sl, sl, #1
 8008c8e:	9304      	str	r3, [sp, #16]
 8008c90:	9307      	str	r3, [sp, #28]
 8008c92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c96:	931a      	str	r3, [sp, #104]	; 0x68
 8008c98:	4654      	mov	r4, sl
 8008c9a:	2205      	movs	r2, #5
 8008c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca0:	4851      	ldr	r0, [pc, #324]	; (8008de8 <_svfiprintf_r+0x1ec>)
 8008ca2:	f7f7 faad 	bl	8000200 <memchr>
 8008ca6:	9a04      	ldr	r2, [sp, #16]
 8008ca8:	b9d8      	cbnz	r0, 8008ce2 <_svfiprintf_r+0xe6>
 8008caa:	06d0      	lsls	r0, r2, #27
 8008cac:	bf44      	itt	mi
 8008cae:	2320      	movmi	r3, #32
 8008cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb4:	0711      	lsls	r1, r2, #28
 8008cb6:	bf44      	itt	mi
 8008cb8:	232b      	movmi	r3, #43	; 0x2b
 8008cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc4:	d015      	beq.n	8008cf2 <_svfiprintf_r+0xf6>
 8008cc6:	9a07      	ldr	r2, [sp, #28]
 8008cc8:	4654      	mov	r4, sl
 8008cca:	2000      	movs	r0, #0
 8008ccc:	f04f 0c0a 	mov.w	ip, #10
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cd6:	3b30      	subs	r3, #48	; 0x30
 8008cd8:	2b09      	cmp	r3, #9
 8008cda:	d94e      	bls.n	8008d7a <_svfiprintf_r+0x17e>
 8008cdc:	b1b0      	cbz	r0, 8008d0c <_svfiprintf_r+0x110>
 8008cde:	9207      	str	r2, [sp, #28]
 8008ce0:	e014      	b.n	8008d0c <_svfiprintf_r+0x110>
 8008ce2:	eba0 0308 	sub.w	r3, r0, r8
 8008ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8008cea:	4313      	orrs	r3, r2
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	46a2      	mov	sl, r4
 8008cf0:	e7d2      	b.n	8008c98 <_svfiprintf_r+0x9c>
 8008cf2:	9b03      	ldr	r3, [sp, #12]
 8008cf4:	1d19      	adds	r1, r3, #4
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	9103      	str	r1, [sp, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	bfbb      	ittet	lt
 8008cfe:	425b      	neglt	r3, r3
 8008d00:	f042 0202 	orrlt.w	r2, r2, #2
 8008d04:	9307      	strge	r3, [sp, #28]
 8008d06:	9307      	strlt	r3, [sp, #28]
 8008d08:	bfb8      	it	lt
 8008d0a:	9204      	strlt	r2, [sp, #16]
 8008d0c:	7823      	ldrb	r3, [r4, #0]
 8008d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8008d10:	d10c      	bne.n	8008d2c <_svfiprintf_r+0x130>
 8008d12:	7863      	ldrb	r3, [r4, #1]
 8008d14:	2b2a      	cmp	r3, #42	; 0x2a
 8008d16:	d135      	bne.n	8008d84 <_svfiprintf_r+0x188>
 8008d18:	9b03      	ldr	r3, [sp, #12]
 8008d1a:	1d1a      	adds	r2, r3, #4
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	9203      	str	r2, [sp, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	bfb8      	it	lt
 8008d24:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d28:	3402      	adds	r4, #2
 8008d2a:	9305      	str	r3, [sp, #20]
 8008d2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008df8 <_svfiprintf_r+0x1fc>
 8008d30:	7821      	ldrb	r1, [r4, #0]
 8008d32:	2203      	movs	r2, #3
 8008d34:	4650      	mov	r0, sl
 8008d36:	f7f7 fa63 	bl	8000200 <memchr>
 8008d3a:	b140      	cbz	r0, 8008d4e <_svfiprintf_r+0x152>
 8008d3c:	2340      	movs	r3, #64	; 0x40
 8008d3e:	eba0 000a 	sub.w	r0, r0, sl
 8008d42:	fa03 f000 	lsl.w	r0, r3, r0
 8008d46:	9b04      	ldr	r3, [sp, #16]
 8008d48:	4303      	orrs	r3, r0
 8008d4a:	3401      	adds	r4, #1
 8008d4c:	9304      	str	r3, [sp, #16]
 8008d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d52:	4826      	ldr	r0, [pc, #152]	; (8008dec <_svfiprintf_r+0x1f0>)
 8008d54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d58:	2206      	movs	r2, #6
 8008d5a:	f7f7 fa51 	bl	8000200 <memchr>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d038      	beq.n	8008dd4 <_svfiprintf_r+0x1d8>
 8008d62:	4b23      	ldr	r3, [pc, #140]	; (8008df0 <_svfiprintf_r+0x1f4>)
 8008d64:	bb1b      	cbnz	r3, 8008dae <_svfiprintf_r+0x1b2>
 8008d66:	9b03      	ldr	r3, [sp, #12]
 8008d68:	3307      	adds	r3, #7
 8008d6a:	f023 0307 	bic.w	r3, r3, #7
 8008d6e:	3308      	adds	r3, #8
 8008d70:	9303      	str	r3, [sp, #12]
 8008d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d74:	4433      	add	r3, r6
 8008d76:	9309      	str	r3, [sp, #36]	; 0x24
 8008d78:	e767      	b.n	8008c4a <_svfiprintf_r+0x4e>
 8008d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d7e:	460c      	mov	r4, r1
 8008d80:	2001      	movs	r0, #1
 8008d82:	e7a5      	b.n	8008cd0 <_svfiprintf_r+0xd4>
 8008d84:	2300      	movs	r3, #0
 8008d86:	3401      	adds	r4, #1
 8008d88:	9305      	str	r3, [sp, #20]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	f04f 0c0a 	mov.w	ip, #10
 8008d90:	4620      	mov	r0, r4
 8008d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d96:	3a30      	subs	r2, #48	; 0x30
 8008d98:	2a09      	cmp	r2, #9
 8008d9a:	d903      	bls.n	8008da4 <_svfiprintf_r+0x1a8>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0c5      	beq.n	8008d2c <_svfiprintf_r+0x130>
 8008da0:	9105      	str	r1, [sp, #20]
 8008da2:	e7c3      	b.n	8008d2c <_svfiprintf_r+0x130>
 8008da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008da8:	4604      	mov	r4, r0
 8008daa:	2301      	movs	r3, #1
 8008dac:	e7f0      	b.n	8008d90 <_svfiprintf_r+0x194>
 8008dae:	ab03      	add	r3, sp, #12
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	462a      	mov	r2, r5
 8008db4:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <_svfiprintf_r+0x1f8>)
 8008db6:	a904      	add	r1, sp, #16
 8008db8:	4638      	mov	r0, r7
 8008dba:	f3af 8000 	nop.w
 8008dbe:	1c42      	adds	r2, r0, #1
 8008dc0:	4606      	mov	r6, r0
 8008dc2:	d1d6      	bne.n	8008d72 <_svfiprintf_r+0x176>
 8008dc4:	89ab      	ldrh	r3, [r5, #12]
 8008dc6:	065b      	lsls	r3, r3, #25
 8008dc8:	f53f af2c 	bmi.w	8008c24 <_svfiprintf_r+0x28>
 8008dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dce:	b01d      	add	sp, #116	; 0x74
 8008dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd4:	ab03      	add	r3, sp, #12
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	462a      	mov	r2, r5
 8008dda:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <_svfiprintf_r+0x1f8>)
 8008ddc:	a904      	add	r1, sp, #16
 8008dde:	4638      	mov	r0, r7
 8008de0:	f000 f87a 	bl	8008ed8 <_printf_i>
 8008de4:	e7eb      	b.n	8008dbe <_svfiprintf_r+0x1c2>
 8008de6:	bf00      	nop
 8008de8:	0800b734 	.word	0x0800b734
 8008dec:	0800b73e 	.word	0x0800b73e
 8008df0:	00000000 	.word	0x00000000
 8008df4:	08008b45 	.word	0x08008b45
 8008df8:	0800b73a 	.word	0x0800b73a

08008dfc <_printf_common>:
 8008dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e00:	4616      	mov	r6, r2
 8008e02:	4699      	mov	r9, r3
 8008e04:	688a      	ldr	r2, [r1, #8]
 8008e06:	690b      	ldr	r3, [r1, #16]
 8008e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	bfb8      	it	lt
 8008e10:	4613      	movlt	r3, r2
 8008e12:	6033      	str	r3, [r6, #0]
 8008e14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e18:	4607      	mov	r7, r0
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	b10a      	cbz	r2, 8008e22 <_printf_common+0x26>
 8008e1e:	3301      	adds	r3, #1
 8008e20:	6033      	str	r3, [r6, #0]
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	0699      	lsls	r1, r3, #26
 8008e26:	bf42      	ittt	mi
 8008e28:	6833      	ldrmi	r3, [r6, #0]
 8008e2a:	3302      	addmi	r3, #2
 8008e2c:	6033      	strmi	r3, [r6, #0]
 8008e2e:	6825      	ldr	r5, [r4, #0]
 8008e30:	f015 0506 	ands.w	r5, r5, #6
 8008e34:	d106      	bne.n	8008e44 <_printf_common+0x48>
 8008e36:	f104 0a19 	add.w	sl, r4, #25
 8008e3a:	68e3      	ldr	r3, [r4, #12]
 8008e3c:	6832      	ldr	r2, [r6, #0]
 8008e3e:	1a9b      	subs	r3, r3, r2
 8008e40:	42ab      	cmp	r3, r5
 8008e42:	dc26      	bgt.n	8008e92 <_printf_common+0x96>
 8008e44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e48:	1e13      	subs	r3, r2, #0
 8008e4a:	6822      	ldr	r2, [r4, #0]
 8008e4c:	bf18      	it	ne
 8008e4e:	2301      	movne	r3, #1
 8008e50:	0692      	lsls	r2, r2, #26
 8008e52:	d42b      	bmi.n	8008eac <_printf_common+0xb0>
 8008e54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e58:	4649      	mov	r1, r9
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	47c0      	blx	r8
 8008e5e:	3001      	adds	r0, #1
 8008e60:	d01e      	beq.n	8008ea0 <_printf_common+0xa4>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	68e5      	ldr	r5, [r4, #12]
 8008e66:	6832      	ldr	r2, [r6, #0]
 8008e68:	f003 0306 	and.w	r3, r3, #6
 8008e6c:	2b04      	cmp	r3, #4
 8008e6e:	bf08      	it	eq
 8008e70:	1aad      	subeq	r5, r5, r2
 8008e72:	68a3      	ldr	r3, [r4, #8]
 8008e74:	6922      	ldr	r2, [r4, #16]
 8008e76:	bf0c      	ite	eq
 8008e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e7c:	2500      	movne	r5, #0
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	bfc4      	itt	gt
 8008e82:	1a9b      	subgt	r3, r3, r2
 8008e84:	18ed      	addgt	r5, r5, r3
 8008e86:	2600      	movs	r6, #0
 8008e88:	341a      	adds	r4, #26
 8008e8a:	42b5      	cmp	r5, r6
 8008e8c:	d11a      	bne.n	8008ec4 <_printf_common+0xc8>
 8008e8e:	2000      	movs	r0, #0
 8008e90:	e008      	b.n	8008ea4 <_printf_common+0xa8>
 8008e92:	2301      	movs	r3, #1
 8008e94:	4652      	mov	r2, sl
 8008e96:	4649      	mov	r1, r9
 8008e98:	4638      	mov	r0, r7
 8008e9a:	47c0      	blx	r8
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d103      	bne.n	8008ea8 <_printf_common+0xac>
 8008ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea8:	3501      	adds	r5, #1
 8008eaa:	e7c6      	b.n	8008e3a <_printf_common+0x3e>
 8008eac:	18e1      	adds	r1, r4, r3
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	2030      	movs	r0, #48	; 0x30
 8008eb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eb6:	4422      	add	r2, r4
 8008eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ebc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ec0:	3302      	adds	r3, #2
 8008ec2:	e7c7      	b.n	8008e54 <_printf_common+0x58>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	4622      	mov	r2, r4
 8008ec8:	4649      	mov	r1, r9
 8008eca:	4638      	mov	r0, r7
 8008ecc:	47c0      	blx	r8
 8008ece:	3001      	adds	r0, #1
 8008ed0:	d0e6      	beq.n	8008ea0 <_printf_common+0xa4>
 8008ed2:	3601      	adds	r6, #1
 8008ed4:	e7d9      	b.n	8008e8a <_printf_common+0x8e>
	...

08008ed8 <_printf_i>:
 8008ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008edc:	7e0f      	ldrb	r7, [r1, #24]
 8008ede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ee0:	2f78      	cmp	r7, #120	; 0x78
 8008ee2:	4691      	mov	r9, r2
 8008ee4:	4680      	mov	r8, r0
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	469a      	mov	sl, r3
 8008eea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008eee:	d807      	bhi.n	8008f00 <_printf_i+0x28>
 8008ef0:	2f62      	cmp	r7, #98	; 0x62
 8008ef2:	d80a      	bhi.n	8008f0a <_printf_i+0x32>
 8008ef4:	2f00      	cmp	r7, #0
 8008ef6:	f000 80d8 	beq.w	80090aa <_printf_i+0x1d2>
 8008efa:	2f58      	cmp	r7, #88	; 0x58
 8008efc:	f000 80a3 	beq.w	8009046 <_printf_i+0x16e>
 8008f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f08:	e03a      	b.n	8008f80 <_printf_i+0xa8>
 8008f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f0e:	2b15      	cmp	r3, #21
 8008f10:	d8f6      	bhi.n	8008f00 <_printf_i+0x28>
 8008f12:	a101      	add	r1, pc, #4	; (adr r1, 8008f18 <_printf_i+0x40>)
 8008f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f18:	08008f71 	.word	0x08008f71
 8008f1c:	08008f85 	.word	0x08008f85
 8008f20:	08008f01 	.word	0x08008f01
 8008f24:	08008f01 	.word	0x08008f01
 8008f28:	08008f01 	.word	0x08008f01
 8008f2c:	08008f01 	.word	0x08008f01
 8008f30:	08008f85 	.word	0x08008f85
 8008f34:	08008f01 	.word	0x08008f01
 8008f38:	08008f01 	.word	0x08008f01
 8008f3c:	08008f01 	.word	0x08008f01
 8008f40:	08008f01 	.word	0x08008f01
 8008f44:	08009091 	.word	0x08009091
 8008f48:	08008fb5 	.word	0x08008fb5
 8008f4c:	08009073 	.word	0x08009073
 8008f50:	08008f01 	.word	0x08008f01
 8008f54:	08008f01 	.word	0x08008f01
 8008f58:	080090b3 	.word	0x080090b3
 8008f5c:	08008f01 	.word	0x08008f01
 8008f60:	08008fb5 	.word	0x08008fb5
 8008f64:	08008f01 	.word	0x08008f01
 8008f68:	08008f01 	.word	0x08008f01
 8008f6c:	0800907b 	.word	0x0800907b
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	1d1a      	adds	r2, r3, #4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	602a      	str	r2, [r5, #0]
 8008f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f80:	2301      	movs	r3, #1
 8008f82:	e0a3      	b.n	80090cc <_printf_i+0x1f4>
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	6829      	ldr	r1, [r5, #0]
 8008f88:	0606      	lsls	r6, r0, #24
 8008f8a:	f101 0304 	add.w	r3, r1, #4
 8008f8e:	d50a      	bpl.n	8008fa6 <_printf_i+0xce>
 8008f90:	680e      	ldr	r6, [r1, #0]
 8008f92:	602b      	str	r3, [r5, #0]
 8008f94:	2e00      	cmp	r6, #0
 8008f96:	da03      	bge.n	8008fa0 <_printf_i+0xc8>
 8008f98:	232d      	movs	r3, #45	; 0x2d
 8008f9a:	4276      	negs	r6, r6
 8008f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa0:	485e      	ldr	r0, [pc, #376]	; (800911c <_printf_i+0x244>)
 8008fa2:	230a      	movs	r3, #10
 8008fa4:	e019      	b.n	8008fda <_printf_i+0x102>
 8008fa6:	680e      	ldr	r6, [r1, #0]
 8008fa8:	602b      	str	r3, [r5, #0]
 8008faa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fae:	bf18      	it	ne
 8008fb0:	b236      	sxthne	r6, r6
 8008fb2:	e7ef      	b.n	8008f94 <_printf_i+0xbc>
 8008fb4:	682b      	ldr	r3, [r5, #0]
 8008fb6:	6820      	ldr	r0, [r4, #0]
 8008fb8:	1d19      	adds	r1, r3, #4
 8008fba:	6029      	str	r1, [r5, #0]
 8008fbc:	0601      	lsls	r1, r0, #24
 8008fbe:	d501      	bpl.n	8008fc4 <_printf_i+0xec>
 8008fc0:	681e      	ldr	r6, [r3, #0]
 8008fc2:	e002      	b.n	8008fca <_printf_i+0xf2>
 8008fc4:	0646      	lsls	r6, r0, #25
 8008fc6:	d5fb      	bpl.n	8008fc0 <_printf_i+0xe8>
 8008fc8:	881e      	ldrh	r6, [r3, #0]
 8008fca:	4854      	ldr	r0, [pc, #336]	; (800911c <_printf_i+0x244>)
 8008fcc:	2f6f      	cmp	r7, #111	; 0x6f
 8008fce:	bf0c      	ite	eq
 8008fd0:	2308      	moveq	r3, #8
 8008fd2:	230a      	movne	r3, #10
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fda:	6865      	ldr	r5, [r4, #4]
 8008fdc:	60a5      	str	r5, [r4, #8]
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	bfa2      	ittt	ge
 8008fe2:	6821      	ldrge	r1, [r4, #0]
 8008fe4:	f021 0104 	bicge.w	r1, r1, #4
 8008fe8:	6021      	strge	r1, [r4, #0]
 8008fea:	b90e      	cbnz	r6, 8008ff0 <_printf_i+0x118>
 8008fec:	2d00      	cmp	r5, #0
 8008fee:	d04d      	beq.n	800908c <_printf_i+0x1b4>
 8008ff0:	4615      	mov	r5, r2
 8008ff2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ff6:	fb03 6711 	mls	r7, r3, r1, r6
 8008ffa:	5dc7      	ldrb	r7, [r0, r7]
 8008ffc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009000:	4637      	mov	r7, r6
 8009002:	42bb      	cmp	r3, r7
 8009004:	460e      	mov	r6, r1
 8009006:	d9f4      	bls.n	8008ff2 <_printf_i+0x11a>
 8009008:	2b08      	cmp	r3, #8
 800900a:	d10b      	bne.n	8009024 <_printf_i+0x14c>
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	07de      	lsls	r6, r3, #31
 8009010:	d508      	bpl.n	8009024 <_printf_i+0x14c>
 8009012:	6923      	ldr	r3, [r4, #16]
 8009014:	6861      	ldr	r1, [r4, #4]
 8009016:	4299      	cmp	r1, r3
 8009018:	bfde      	ittt	le
 800901a:	2330      	movle	r3, #48	; 0x30
 800901c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009020:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009024:	1b52      	subs	r2, r2, r5
 8009026:	6122      	str	r2, [r4, #16]
 8009028:	f8cd a000 	str.w	sl, [sp]
 800902c:	464b      	mov	r3, r9
 800902e:	aa03      	add	r2, sp, #12
 8009030:	4621      	mov	r1, r4
 8009032:	4640      	mov	r0, r8
 8009034:	f7ff fee2 	bl	8008dfc <_printf_common>
 8009038:	3001      	adds	r0, #1
 800903a:	d14c      	bne.n	80090d6 <_printf_i+0x1fe>
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	b004      	add	sp, #16
 8009042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009046:	4835      	ldr	r0, [pc, #212]	; (800911c <_printf_i+0x244>)
 8009048:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800904c:	6829      	ldr	r1, [r5, #0]
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	f851 6b04 	ldr.w	r6, [r1], #4
 8009054:	6029      	str	r1, [r5, #0]
 8009056:	061d      	lsls	r5, r3, #24
 8009058:	d514      	bpl.n	8009084 <_printf_i+0x1ac>
 800905a:	07df      	lsls	r7, r3, #31
 800905c:	bf44      	itt	mi
 800905e:	f043 0320 	orrmi.w	r3, r3, #32
 8009062:	6023      	strmi	r3, [r4, #0]
 8009064:	b91e      	cbnz	r6, 800906e <_printf_i+0x196>
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	f023 0320 	bic.w	r3, r3, #32
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	2310      	movs	r3, #16
 8009070:	e7b0      	b.n	8008fd4 <_printf_i+0xfc>
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	f043 0320 	orr.w	r3, r3, #32
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	2378      	movs	r3, #120	; 0x78
 800907c:	4828      	ldr	r0, [pc, #160]	; (8009120 <_printf_i+0x248>)
 800907e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009082:	e7e3      	b.n	800904c <_printf_i+0x174>
 8009084:	0659      	lsls	r1, r3, #25
 8009086:	bf48      	it	mi
 8009088:	b2b6      	uxthmi	r6, r6
 800908a:	e7e6      	b.n	800905a <_printf_i+0x182>
 800908c:	4615      	mov	r5, r2
 800908e:	e7bb      	b.n	8009008 <_printf_i+0x130>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	6826      	ldr	r6, [r4, #0]
 8009094:	6961      	ldr	r1, [r4, #20]
 8009096:	1d18      	adds	r0, r3, #4
 8009098:	6028      	str	r0, [r5, #0]
 800909a:	0635      	lsls	r5, r6, #24
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	d501      	bpl.n	80090a4 <_printf_i+0x1cc>
 80090a0:	6019      	str	r1, [r3, #0]
 80090a2:	e002      	b.n	80090aa <_printf_i+0x1d2>
 80090a4:	0670      	lsls	r0, r6, #25
 80090a6:	d5fb      	bpl.n	80090a0 <_printf_i+0x1c8>
 80090a8:	8019      	strh	r1, [r3, #0]
 80090aa:	2300      	movs	r3, #0
 80090ac:	6123      	str	r3, [r4, #16]
 80090ae:	4615      	mov	r5, r2
 80090b0:	e7ba      	b.n	8009028 <_printf_i+0x150>
 80090b2:	682b      	ldr	r3, [r5, #0]
 80090b4:	1d1a      	adds	r2, r3, #4
 80090b6:	602a      	str	r2, [r5, #0]
 80090b8:	681d      	ldr	r5, [r3, #0]
 80090ba:	6862      	ldr	r2, [r4, #4]
 80090bc:	2100      	movs	r1, #0
 80090be:	4628      	mov	r0, r5
 80090c0:	f7f7 f89e 	bl	8000200 <memchr>
 80090c4:	b108      	cbz	r0, 80090ca <_printf_i+0x1f2>
 80090c6:	1b40      	subs	r0, r0, r5
 80090c8:	6060      	str	r0, [r4, #4]
 80090ca:	6863      	ldr	r3, [r4, #4]
 80090cc:	6123      	str	r3, [r4, #16]
 80090ce:	2300      	movs	r3, #0
 80090d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090d4:	e7a8      	b.n	8009028 <_printf_i+0x150>
 80090d6:	6923      	ldr	r3, [r4, #16]
 80090d8:	462a      	mov	r2, r5
 80090da:	4649      	mov	r1, r9
 80090dc:	4640      	mov	r0, r8
 80090de:	47d0      	blx	sl
 80090e0:	3001      	adds	r0, #1
 80090e2:	d0ab      	beq.n	800903c <_printf_i+0x164>
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	079b      	lsls	r3, r3, #30
 80090e8:	d413      	bmi.n	8009112 <_printf_i+0x23a>
 80090ea:	68e0      	ldr	r0, [r4, #12]
 80090ec:	9b03      	ldr	r3, [sp, #12]
 80090ee:	4298      	cmp	r0, r3
 80090f0:	bfb8      	it	lt
 80090f2:	4618      	movlt	r0, r3
 80090f4:	e7a4      	b.n	8009040 <_printf_i+0x168>
 80090f6:	2301      	movs	r3, #1
 80090f8:	4632      	mov	r2, r6
 80090fa:	4649      	mov	r1, r9
 80090fc:	4640      	mov	r0, r8
 80090fe:	47d0      	blx	sl
 8009100:	3001      	adds	r0, #1
 8009102:	d09b      	beq.n	800903c <_printf_i+0x164>
 8009104:	3501      	adds	r5, #1
 8009106:	68e3      	ldr	r3, [r4, #12]
 8009108:	9903      	ldr	r1, [sp, #12]
 800910a:	1a5b      	subs	r3, r3, r1
 800910c:	42ab      	cmp	r3, r5
 800910e:	dcf2      	bgt.n	80090f6 <_printf_i+0x21e>
 8009110:	e7eb      	b.n	80090ea <_printf_i+0x212>
 8009112:	2500      	movs	r5, #0
 8009114:	f104 0619 	add.w	r6, r4, #25
 8009118:	e7f5      	b.n	8009106 <_printf_i+0x22e>
 800911a:	bf00      	nop
 800911c:	0800b745 	.word	0x0800b745
 8009120:	0800b756 	.word	0x0800b756

08009124 <__retarget_lock_acquire_recursive>:
 8009124:	4770      	bx	lr

08009126 <__retarget_lock_release_recursive>:
 8009126:	4770      	bx	lr

08009128 <memmove>:
 8009128:	4288      	cmp	r0, r1
 800912a:	b510      	push	{r4, lr}
 800912c:	eb01 0402 	add.w	r4, r1, r2
 8009130:	d902      	bls.n	8009138 <memmove+0x10>
 8009132:	4284      	cmp	r4, r0
 8009134:	4623      	mov	r3, r4
 8009136:	d807      	bhi.n	8009148 <memmove+0x20>
 8009138:	1e43      	subs	r3, r0, #1
 800913a:	42a1      	cmp	r1, r4
 800913c:	d008      	beq.n	8009150 <memmove+0x28>
 800913e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009142:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009146:	e7f8      	b.n	800913a <memmove+0x12>
 8009148:	4402      	add	r2, r0
 800914a:	4601      	mov	r1, r0
 800914c:	428a      	cmp	r2, r1
 800914e:	d100      	bne.n	8009152 <memmove+0x2a>
 8009150:	bd10      	pop	{r4, pc}
 8009152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009156:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800915a:	e7f7      	b.n	800914c <memmove+0x24>

0800915c <_realloc_r>:
 800915c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009160:	4680      	mov	r8, r0
 8009162:	4614      	mov	r4, r2
 8009164:	460e      	mov	r6, r1
 8009166:	b921      	cbnz	r1, 8009172 <_realloc_r+0x16>
 8009168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800916c:	4611      	mov	r1, r2
 800916e:	f7ff bc1b 	b.w	80089a8 <_malloc_r>
 8009172:	b92a      	cbnz	r2, 8009180 <_realloc_r+0x24>
 8009174:	f7ff fbac 	bl	80088d0 <_free_r>
 8009178:	4625      	mov	r5, r4
 800917a:	4628      	mov	r0, r5
 800917c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009180:	f000 f81b 	bl	80091ba <_malloc_usable_size_r>
 8009184:	4284      	cmp	r4, r0
 8009186:	4607      	mov	r7, r0
 8009188:	d802      	bhi.n	8009190 <_realloc_r+0x34>
 800918a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800918e:	d812      	bhi.n	80091b6 <_realloc_r+0x5a>
 8009190:	4621      	mov	r1, r4
 8009192:	4640      	mov	r0, r8
 8009194:	f7ff fc08 	bl	80089a8 <_malloc_r>
 8009198:	4605      	mov	r5, r0
 800919a:	2800      	cmp	r0, #0
 800919c:	d0ed      	beq.n	800917a <_realloc_r+0x1e>
 800919e:	42bc      	cmp	r4, r7
 80091a0:	4622      	mov	r2, r4
 80091a2:	4631      	mov	r1, r6
 80091a4:	bf28      	it	cs
 80091a6:	463a      	movcs	r2, r7
 80091a8:	f7ff fb7c 	bl	80088a4 <memcpy>
 80091ac:	4631      	mov	r1, r6
 80091ae:	4640      	mov	r0, r8
 80091b0:	f7ff fb8e 	bl	80088d0 <_free_r>
 80091b4:	e7e1      	b.n	800917a <_realloc_r+0x1e>
 80091b6:	4635      	mov	r5, r6
 80091b8:	e7df      	b.n	800917a <_realloc_r+0x1e>

080091ba <_malloc_usable_size_r>:
 80091ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091be:	1f18      	subs	r0, r3, #4
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	bfbc      	itt	lt
 80091c4:	580b      	ldrlt	r3, [r1, r0]
 80091c6:	18c0      	addlt	r0, r0, r3
 80091c8:	4770      	bx	lr
	...

080091cc <_init>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	bf00      	nop
 80091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d2:	bc08      	pop	{r3}
 80091d4:	469e      	mov	lr, r3
 80091d6:	4770      	bx	lr

080091d8 <_fini>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	bf00      	nop
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr
